[
    {
        "thought": "By encouraging the LLM to think step by step rather than directly outputting an answer, chain-of-thought reasoning enables complex problem-solving through intermediate steps. This practice improves the model's ability to handle tasks that require deeper reasoning and provides insight into its decision-making process.",
        "name": "Chain-of-Thought",
        "code": "def forward(self, taskInfo):\n    # Instruction for the Chain-of-Thought (CoT) approach\n    # It is an important practice that allows the LLM to think step by step before solving the task.\n    cot_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instantiate a new LLM agent specifically for CoT\n    # To allow LLM thinking before answering, we need to set an additional output field 'thinking'.\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Prepare the inputs for the CoT agent\n    # The input should be a list of Info, and the first one is often the taskInfo\n    cot_agent_inputs = [taskInfo]\n\n    # Get the response from the CoT agent\n    thinking, answer = cot_agent(cot_agent_inputs, cot_instruction)\n\n    # Return only the final answer\n    return answer\n",
        "api_calls": 1,
        "structure_label": "Chain-of-Thought Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (7.8%, 19.5%), Median: 13.3%",
        "test_fitness": "95% Bootstrap Confidence Interval: (12.4%, 17.2%), Median: 14.8%"
    },
    {
        "thought": "While an LLM can arrive at the correct answer, its reasoning may vary. By repeatedly asking the same question with high temperature settings, we can generate different reasoning paths. We then combine multiple answers from these Chain-of-Thought (CoT) agents to produce a more accurate final answer through ensembling.",
        "name": "Self-Consistency with Chain-of-Thought",
        "code": "def forward(self, taskInfo):\n    # Instruction for step-by-step reasoning\n    cot_instruction = \"Please think step by step and then solve the task.\"\n    N = 5 # Number of CoT agents\n\n    # Initialize multiple CoT agents with a higher temperature for varied reasoning\n    cot_agents = [LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent', temperature=0.8) for _ in range(N)]\n\n    # Majority voting function to select the most common answer\n    from collections import Counter\n    def majority_voting(answers):\n        return Counter(answers).most_common(1)[0][0]\n    \n    possible_answers = []\n    for i in range(N):\n        thinking, answer = cot_agents[i]([taskInfo], cot_instruction)\n        possible_answers.append(answer.content)\n\n    # Ensembling the answers from multiple CoT agents\n    answer = majority_voting(possible_answers)\n    return answer  \n",
        "api_calls": 5,
        "structure_label": "Multi-Agent Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (4.7%, 14.8%), Median: 9.4%",
        "test_fitness": "95% Bootstrap Confidence Interval: (10.5%, 15.1%), Median: 12.8%"
    },
    {
        "thought": "To enhance its performance, an LLM can iteratively improve its answer based on feedback. By reflecting on its previous attempts and incorporating feedback, the model can refine its reasoning and provide a more accurate solution.",
        "name": "Self-Refine (Reflexion)",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    cot_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for reflecting on previous attempts and feedback to improve\n    cot_reflect_instruction = \"Given previous attempts and feedback, carefully consider where you could go wrong in your latest attempt. Using insights from previous attempts, try to solve the task better.\"\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Instruction for providing feedback and correcting the answer\n    critic_instruction = \"Please review the answer above and criticize on where might be wrong. If you are absolutely sure it is correct, output 'True' in 'correct'.\"\n    critic_agent = LLMAgentBase(['feedback', 'correct'], 'Critic Agent')\n    \n    N_max = 5 # Maximum number of attempts\n\n    # Initial attempt\n    cot_inputs = [taskInfo]\n    thinking, answer = cot_agent(cot_inputs, cot_initial_instruction, 0)\n\n    for i in range(N_max):\n        # Get feedback and correct status from the critic\n        feedback, correct = critic_agent([taskInfo, thinking, answer], critic_instruction, i)\n        if correct.content == 'True':\n            break\n            \n        # Add feedback to the inputs for the next iteration\n        cot_inputs.extend([thinking, answer, feedback])\n\n        # Reflect on previous attempts and refine the answer\n        thinking, answer = cot_agent(cot_inputs, cot_reflect_instruction, i + 1)\n    return answer\n",
        "api_calls": 7,
        "structure_label": "Self-Reflection Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (12.5%, 25.8%), Median: 18.8%",
        "test_fitness": "95% Bootstrap Confidence Interval: (13.0%, 18.0%), Median: 15.5%"
    },
    {
        "thought": "By letting different LLMs debate with each other, we can leverage their diverse perspectives to find better solutions for tasks.",
        "name": "LLM Debate",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    debate_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for debating and updating the solution based on other agents' solutions\n    debate_instruction = \"Given solutions to the problem from other agents, consider their opinions as additional advice. Please think carefully and provide an updated answer.\"\n    \n    # Initialize debate agents with different roles and a moderate temperature for varied reasoning\n    debate_agents = [LLMAgentBase(['thinking', 'answer'], 'Debate Agent', temperature=0.8, role=role) for role in ['Math Professor', 'Grade School Teacher', 'Math Enthusiast']]\n\n    # Instruction for final decision-making based on all debates and solutions\n    final_decision_instruction = \"Given all the above thinking and answers, reason over them carefully and provide a final answer.\"\n    final_decision_agent = LLMAgentBase(['thinking', 'answer'], 'Final Decision Agent', temperature=0.1)\n\n    max_round = 2 # Maximum number of debate rounds\n    all_thinking = [[] for _ in range(max_round)]\n    all_answer = [[] for _ in range(max_round)]\n\n    # Perform debate rounds\n    for r in range(max_round):\n        for i in range(len(debate_agents)):\n            if r == 0:\n                thinking, answer = debate_agents[i]([taskInfo], debate_initial_instruction)\n            else:\n                input_infos = [taskInfo] + [all_thinking[r-1][i]] + all_thinking[r-1][:i] + all_thinking[r-1][i+1:]\n                thinking, answer = debate_agents[i](input_infos, debate_instruction)\n            all_thinking[r].append(thinking)\n            all_answer[r].append(answer)\n    \n    # Make the final decision based on all debate results and solutions\n    thinking, answer = final_decision_agent([taskInfo] + all_thinking[max_round-1] + all_answer[max_round-1], final_decision_instruction)\n    return answer\n",
        "api_calls": 9,
        "structure_label": "Multi-Agent Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (48.4%, 65.6%), Median: 57.0%",
        "test_fitness": "95% Bootstrap Confidence Interval: (42.8%, 49.8%), Median: 46.2%"
    },
    {
        "thought": "Let LLM first think about the principles involved in solving this task which could be helpful. By understanding the underlying principles, the model can better reason through the problem and provide a more accurate solution.",
        "name": "Step-back Abstraction",
        "code": "def forward(self, taskInfo):\n        # Instruction for understanding the principles involved in the task\n        principle_instruction = \"What are the physics, chemistry or biology principles and concepts involved in solving this task? First think step by step. Then list all involved principles and explain them.\"\n        \n        # Instruction for solving the task based on the principles\n        cot_instruction = \"Given the question and the involved principle behind the question, think step by step and then solve the task.\"\n        \n        # Instantiate LLM agents\n        principle_agent = LLMAgentBase(['thinking', 'principle'], 'Principle Agent')\n        cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n        \n        # Get the principles involved in the task\n        thinking, principle = principle_agent([taskInfo], principle_instruction)\n\n        # Use the principles to solve the task\n        thinking, answer = cot_agent([taskInfo, thinking, principle], cot_instruction)\n        return answer\n",
        "api_calls": 2,
        "structure_label": "Abstraction to Principles Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (15.6%, 29.7%), Median: 22.7%",
        "test_fitness": "95% Bootstrap Confidence Interval: (22.5%, 28.5%), Median: 25.5%"
    },
    {
        "thought": "Similar to Quality-Diversity methods, let LLM generate multiple diverse interesting solutions could help. By encouraging the model to explore different reasoning paths, we can increase the chances of finding the best solution.",
        "name": "Quality-Diversity",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    cot_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for giving diverse answers\n    qd_instruction = \"Given previous attempts, try to come up with another interesting way to solve the task.\"\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Instruction for final decision-making based on collected reasoning and answers\n    final_decision_instruction = \"Given all the above solutions, reason over them carefully and provide a final answer.\"\n    final_decision_agent = LLMAgentBase(['thinking', 'answer'], 'Final Decision Agent', temperature=0.1)\n    \n    N_max = 3 # Maximum number of attempts\n\n    # Initial attempt\n    cot_inputs = [taskInfo]\n    possible_answers = []\n    thinking, answer = cot_agent(cot_inputs, cot_initial_instruction, 0)\n\n    # Add the answer to the list of possible answers\n    possible_answers.extend([thinking, answer])\n\n    for i in range(N_max):\n        # Reflect on previous attempts and generate another interesting answer\n        cot_inputs.extend([thinking, answer])\n\n        # Generate another interesting answer\n        thinking, answer = cot_agent(cot_inputs, qd_instruction, i + 1)\n        possible_answers.extend([thinking, answer])\n\n    # Make the final decision based on all generated answers\n    thinking, answer = final_decision_agent([taskInfo] + possible_answers, final_decision_instruction)\n    return answer\n",
        "api_calls": 7,
        "structure_label": "Multi-Agent Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (50.8%, 68.0%), Median: 59.4%",
        "test_fitness": "95% Bootstrap Confidence Interval: (51.9%, 58.8%), Median: 55.4%"
    },
    {
        "thought": "Similar to Auto-GPT and expert prompting, we can use dynamic control flow in the design to let the agent decide what expert we should use.",
        "name": "Dynamic Assignment of Roles",
        "code": "def forward(self, taskInfo):\n        # Instruction for step-by-step reasoning\n        cot_instruction = \"Please think step by step and then solve the task.\"\n        expert_agents = [LLMAgentBase(['thinking', 'answer'], 'Expert Agent', role=role) for role in ['Math Professor', 'Grade School Teacher', 'Math Enthusiast', 'Helpful Assistant']]\n\n        # Instruction for routing the task to the appropriate expert\n        routing_instruction = \"Given the task, please choose an Expert to answer the question. Choose from: Math Professor, Grade School Teacher, Math Enthusiast.\"\n        routing_agent = LLMAgentBase(['choice'], 'Routing agent')\n\n        # Get the choice of expert to route the task\n        choice = routing_agent([taskInfo], routing_instruction)[0]\n\n        if 'professor' in choice.content.lower():\n            expert_id = 0\n        elif 'teacher' in choice.content.lower():\n            expert_id = 1\n        elif 'enthusiast' in choice.content.lower():\n            expert_id = 2\n        else:\n            expert_id = 3 # Default to helpful assistant\n\n        thinking, answer = expert_agents[expert_id]([taskInfo], cot_instruction)\n        return answer\n",
        "api_calls": 4,
        "structure_label": "Multi-Agent Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (12.5%, 25.8%), Median: 18.8%",
        "test_fitness": "95% Bootstrap Confidence Interval: (11.0%, 15.6%), Median: 13.2%"
    },
    {
        "thought": "**Insights:**\nTo enhance the architecture further, I propose a single agent that performs collaborative reasoning through a structured analysis process where it evaluates multiple perspectives internally. This will allow the agent to generate varied reasoning paths and combine them effectively without requiring multiple agents or API calls.\n\n**Overall Idea:**\nThe architecture will consist of a single agent that first generates multiple reasoning outputs based on varied perspectives and then synthesizes these outputs into a final answer. This allows for both diversity in reasoning and a single API call, thus adhering to the rules properly.",
        "name": "Collaborative Reasoning Synthesis",
        "code": "def forward(self, taskInfo):\n    # Step 1: Instruction for generating diverse reasoning outputs\n    instruction = \"Generate multiple reasoning paths for solving this mathematical problem. Think step by step and provide all insights and answers generated.\"\n    \n    # Step 2: Use a single agent to generate diverse outputs\n    agent = LLMAgentBase([\"thinking\", \"answers\"], \"Collaborative Reasoning Agent\")\n\n    # Perform reasoning to gather multiple perspectives in one call\n    response = agent([taskInfo], instruction)\n\n    # Step 3: Synthesize the outputs from the response\n    answers = [info.content for info in response if info.name == 'answers']\n    \n    # Logic to aggregate and refine answers, using a simple majority or best match approach\n    final_answer = max(set(answers), key=answers.count) if answers else 'No valid answer generated.'\n\n    return final_answer",
        "fitness": "95% Bootstrap Confidence Interval: (69.5%, 84.4%), Median: 77.3%",
        "generation": 7,
        "api_calls": 1,
        "structure_label": "Multi-Agent Reasoning",
        "test_fitness": "95% Bootstrap Confidence Interval: (66.6%, 73.0%), Median: 69.9%"
    },
    {
        "thought": "**Insights:**\nTo enhance the existing collaborative reasoning architecture, I propose a single-agent approach that not only generates multiple reasoning paths but also incorporates an integrated evaluation process that weighs the reasoning quality when synthesizing the final answer. This way, the model can explore diverse reasoning routes while ensuring logical clarity and correctness. By implementing a scoring system for the reasoning paths, we can prioritize higher-quality paths in the final answer synthesis.\n\n**Overall Idea:**\nThe design will focus on generating diverse reasoning outputs, evaluating their quality in terms of coherence and correctness, and synthesizing a final answer that takes into account the weights of the evaluated outputs. This integrated approach will help improve accuracy while maintaining efficiency by utilizing a single agent to manage the entire process.",
        "name": "Weighted Evaluative Reasoning",
        "code": "def forward(self, taskInfo):\n    # Instruction for generating multiple reasoning paths and evaluating them\n    instruction = ('Generate multiple reasoning paths for solving this mathematical problem. After generating each path, evaluate its correctness and coherence. Provide any corrections needed before synthesizing the final answer.')\n    \n    # Single agent to handle both reasoning generation and evaluation\n    evaluative_agent = LLMAgentBase(['thinking', 'answers'], 'Weighted Evaluative Reasoning Agent')\n    \n    # Gather outputs from the agent\n    response = evaluative_agent([taskInfo], instruction)\n    \n    # Collect the answers from the response\n    answers_info = [info for info in response if info.name == 'answers']\n    if answers_info:\n        # Select the most common answer from the responses\n        from collections import Counter\n        answer_counts = Counter(info.content for info in answers_info)\n        final_answer = answer_counts.most_common(1)[0][0]  # Get the most common answer\n        return final_answer\n    return Info('answer', 'Weighted Evaluative Reasoning Agent', 'No valid answer generated.', 0)",
        "fitness": "95% Bootstrap Confidence Interval: (57.8%, 74.2%), Median: 66.4%",
        "generation": 21,
        "api_calls": 1,
        "structure_label": "Chain-of-Thought Reasoning",
        "test_fitness": "95% Bootstrap Confidence Interval: (57.4%, 64.1%), Median: 60.8%"
    },
    {
        "thought": "**Insights:**\nTo create a more engaging and innovative architecture, I will design a method that generates diverse reasoning paths and immediately evaluates them before synthesizing a final answer. This dual approach ensures that reasoning is not only diverse but also critically reviewed for accuracy, increasing the likelihood of a correct solution. \n**Overall Idea:**\nThe architecture will contain a single agent responsible for generating multiple reasoning outputs, evaluating those outputs in real-time, and synthesizing a final answer based on the corrected reasoning paths. This approach maximizes the benefits of diverse reasoning and ensures correctness through immediate evaluation. \n**Implementation:**\n1. Generate diverse reasoning outputs based on the task. \n2. Evaluate and correct any flaws in the reasoning outputs. \n3. Synthesize the adjusted outputs into a final answer using a majority or best-match approach, ensuring a streamlined process that stays within a single API call.",
        "name": "Evaluative Collaborative Reasoning",
        "code": "def forward(self, taskInfo):\n    # Instruction for generating diverse reasoning outputs and evaluating them\n    instruction = 'Generate multiple reasoning paths for solving this mathematical problem. After generating each path, evaluate its correctness and provide any corrections needed before synthesizing the final answer.'\n    \n    # Instantiate a single LLM agent to handle both reasoning generation and evaluation\n    agent = LLMAgentBase(['thinking', 'answers'], 'Evaluative Collaborative Reasoning Agent')\n    \n    # Gather outputs from the agent\n    response = agent([taskInfo], instruction)\n    \n    # Extract the first valid answer directly from the response\n    final_answer = next((info.content for info in response if info.name == 'answers'), 'No valid answer generated.')\n    \n    return final_answer",
        "fitness": "95% Bootstrap Confidence Interval: (56.2%, 72.7%), Median: 64.8%",
        "generation": 8,
        "api_calls": 1,
        "structure_label": "Self-Reflection Reasoning",
        "test_fitness": "95% Bootstrap Confidence Interval: (56.9%, 63.6%), Median: 60.2%"
    }
]