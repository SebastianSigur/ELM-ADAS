{
    "Linear Chain-of-Thought,0": {
        "thought": "By encouraging the LLM to think step by step rather than directly outputting an answer, chain-of-thought reasoning enables complex problem-solving through intermediate steps. This practice improves the model's ability to handle tasks that require deeper reasoning and provides insight into its decision-making process.",
        "name": "Chain-of-Thought",
        "code": "def forward(self, taskInfo):\n    # Instruction for the Chain-of-Thought (CoT) approach\n    # It is an important practice that allows the LLM to think step by step before solving the task.\n    cot_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instantiate a new LLM agent specifically for CoT\n    # To allow LLM thinking before answering, we need to set an additional output field 'thinking'.\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Prepare the inputs for the CoT agent\n    # The input should be a list of Info, and the first one is often the taskInfo\n    cot_agent_inputs = [taskInfo]\n\n    # Get the response from the CoT agent\n    thinking, answer = cot_agent(cot_agent_inputs, cot_instruction)\n\n    # Return only the final answer\n    return answer\n",
        "api_calls": 1,
        "structure_label": "Linear Chain-of-Thought",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (64.8%, 69.1%), Median: 77.6%"
    },
    "Linear Chain-of-Thought,1": null,
    "Iterative Refinement,0": {
        "thought": "**Insights:**\nTo create a more efficient agent that adheres to the 'few API calls' constraint while maintaining the benefit of dynamic expert selection, I propose a structure that consolidates the expert selection process to minimize redundant calls. Instead of multiple agents, I'll implement a single agent that combines reasoning capabilities and iterative refinement.\n**Overall Idea:**\nThis design will implement a single agent responsible for both initial reasoning and refining the answer based on feedback. After generating an initial response, the agent will self-evaluate and refine its answer through a limited number of iterations to improve accuracy without needing multiple agents.\n**Implementation:**\n1. Define the reasoning instruction that allows the agent to analyze the task and generate an answer in a single call.\n2. Implement a feedback loop that allows the same agent to refine its response for a set number of iterations, thereby enhancing its accuracy while keeping API calls within limits.\n3. Ensure that the agent's reasoning and refinement are guided by the task context to maintain relevance and correctness while minimizing unnecessary complexity.",
        "name": "Efficient Dynamic Expert",
        "code": "def forward(self, taskInfo):\n    # Instruction for reasoning and iterative refinement\n    reasoning_instruction = \"Analyze the passage and the question step by step. Provide your initial answer and then refine it based on potential uncertainties.\"\n    \n    # Instantiate a single LLM agent for reasoning and refinement\n    main_agent = LLMAgentBase(['thinking', 'answer'], 'Dynamic Expert Agent')\n\n    # Call the main agent with the taskInfo to get the initial response\n    thinking, initial_answer = main_agent([taskInfo], reasoning_instruction)\n    refined_answer = initial_answer  # Start with the initial answer\n\n    # Implement a simple feedback mechanism to refine the answer\n    for _ in range(2):  # Attempt to refine the answer 2 times\n        feedback_instruction = \"Considering your previous answer, refine it if necessary.\"\n        refined_thinking, refined_answer = main_agent([taskInfo, refined_answer], feedback_instruction)  # Refine based on the previous answer\n\n    return refined_answer  # Return the final refined answer",
        "fitness": "95% Bootstrap Confidence Interval: (59.7%, 64.4%), Median: 73.5%",
        "generation": 2,
        "api_calls": 5,
        "structure_label": "Iterative Refinement"
    },
    "Iterative Refinement,1": {
        "thought": "To enhance its performance, an LLM can iteratively improve its answer based on feedback. By reflecting on its previous attempts and incorporating feedback, the model can refine its reasoning and provide a more accurate solution.",
        "name": "Self-Refine (Reflexion)",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    cot_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for reflecting on previous attempts and feedback to improve\n    cot_reflect_instruction = \"Given previous attempts and feedback, carefully consider where you could go wrong in your latest attempt. Using insights from previous attempts, try to solve the task better.\"\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Instruction for providing feedback and correcting the answer\n    critic_instruction = \"Please review the answer above and criticize on where might be wrong. If you are absolutely sure it is correct, output 'True' in 'correct'.\"\n    critic_agent = LLMAgentBase(['feedback', 'correct'], 'Critic Agent')\n    \n    N_max = 5 # Maximum number of attempts\n\n    # Initial attempt\n    cot_inputs = [taskInfo]\n    thinking, answer = cot_agent(cot_inputs, cot_initial_instruction, 0)\n\n    for i in range(N_max):\n        # Get feedback and correct status from the critic\n        feedback, correct = critic_agent([taskInfo, thinking, answer], critic_instruction, i)\n        if correct.content == 'True':\n            break\n            \n        # Add feedback to the inputs for the next iteration\n        cot_inputs.extend([thinking, answer, feedback])\n\n        # Reflect on previous attempts and refine the answer\n        thinking, answer = cot_agent(cot_inputs, cot_reflect_instruction, i + 1)\n    return answer\n",
        "api_calls": 10,
        "structure_label": "Iterative Refinement",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (63.0%, 67.7%), Median: 76.5%"
    },
    "Tree-of-Thought,0": null,
    "Tree-of-Thought,1": null,
    "Decompositional Reasoning,0": null,
    "Decompositional Reasoning,1": {
        "thought": "Similar to Auto-GPT and expert prompting, we can use dynamic control flow in the design to let the agent decide what expert we should use.",
        "name": "Dynamic Assignment of Roles",
        "code": "def forward(self, taskInfo):\n        # Instruction for step-by-step reasoning\n        cot_instruction = \"Please think step by step and then solve the task.\"\n        expert_agents = [LLMAgentBase(['thinking', 'answer'], 'Expert Agent', role=role) for role in ['Reading Comprehension Specialist', 'Logical Reasoning Strategist', 'Multidisciplinary Knowledge Integrator', 'Helpful Assistant']]\n\n        # Instruction for routing the task to the appropriate expert\n        routing_instruction = \"Given the task, please choose an Expert to answer the question. Choose from: Reading Comprehension Specialist, Logical Reasoning Strategist, and Multidisciplinary Knowledge Integrator.\"\n        routing_agent = LLMAgentBase(['choice'], 'Routing agent')\n\n        # Get the choice of expert to route the task\n        choice = routing_agent([taskInfo], routing_instruction)[0]\n\n        if 'specialist' in choice.content.lower():\n            expert_id = 0\n        elif 'strategist' in choice.content.lower():\n            expert_id = 1\n        elif 'integrator' in choice.content.lower():\n            expert_id = 2\n        else:\n            expert_id = 3 # Default to helpful assistant\n\n        thinking, answer = expert_agents[expert_id]([taskInfo], cot_instruction)\n        return answer\n",
        "api_calls": 6,
        "structure_label": "Decompositional Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (64.2%, 68.7%), Median: 77.3%"
    },
    "Multi-Agent Reasoning,0": {
        "thought": "**Insights:**\nUtilizing three distinct agents can effectively gather insights, but incorporating a qualitative evaluation mechanism can lead to a more robust synthesis of the final answer.\n\n**Overall Idea:**\nThe architecture will employ three specialized agents: one for statistical insights, another for cultural context, and a third for demographic analysis. Each agent will provide outputs that will be evaluated based on qualitative criteria, allowing for a more nuanced selection of the final answer.\n\n**Implementation:**\n1. Define three agents with focused roles.\n2. Gather insights from all agents concurrently.\n3. Introduce a scoring mechanism that evaluates both the relevance and the content of the outputs, leading to a more informed synthesis.",
        "name": "Qualitative Insight Multi-Agent Analysis",
        "code": "def forward(self, taskInfo):\n    # Instructions for each agent\n    stat_instruction = \"Analyze the passage for statistical data and trends.\"\n    cultural_instruction = \"Explore the cultural context presented in the passage.\"\n    demographic_instruction = \"Identify the key demographic insights from the passage.\"\n    \n    # Instantiate three distinct LLM agents\n    stat_agent = LLMAgentBase([\"thinking\", \"answer\"], \"Statistical Agent\")\n    cultural_agent = LLMAgentBase([\"thinking\", \"answer\"], \"Cultural Agent\")\n    demographic_agent = LLMAgentBase([\"thinking\", \"answer\"], \"Demographic Agent\")\n    \n    # Each agent analyzes the taskInfo\n    stat_info = stat_agent([taskInfo], stat_instruction)  # Call 1\n    cultural_info = cultural_agent([taskInfo], cultural_instruction)  # Call 2\n    demographic_info = demographic_agent([taskInfo], demographic_instruction)  # Call 3\n    \n    # Collect insights from all agents\n    insights = [stat_info[1].content, cultural_info[1].content, demographic_info[1].content]\n    \n    # Synthesize the final answer from the insights\n    final_answer = \" | \".join(insights)  # Combine all insights into a single answer\n    \n    return final_answer  # Return the synthesized answer.",
        "fitness": "95% Bootstrap Confidence Interval: (44.9%, 49.0%), Median: 57.3%",
        "generation": 16,
        "api_calls": 3,
        "structure_label": "Multi-Agent Reasoning"
    },
    "Multi-Agent Reasoning,1": {
        "thought": "By letting different LLMs debate with each other, we can leverage their diverse perspectives to find better solutions for tasks.",
        "name": "LLM Debate",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    debate_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for debating and updating the solution based on other agents' solutions\n    debate_instruction = \"Given solutions to the problem from other agents, consider their opinions as additional advice. Please think carefully and provide an updated answer.\"\n    \n    # Initialize debate agents with different roles and a moderate temperature for varied reasoning\n    debate_agents = [LLMAgentBase(['thinking', 'answer'], 'Debate Agent', temperature=0.8, role=role) for role in ['Reading Comprehension Specialist', 'Logical Reasoning Strategist', 'Multidisciplinary Knowledge Integrator']]\n\n    # Instruction for final decision-making based on all debates and solutions\n    final_decision_instruction = \"Given all the above thinking and answers, reason over them carefully and provide a final answer.\"\n    final_decision_agent = LLMAgentBase(['thinking', 'answer'], 'Final Decision Agent', temperature=0.1)\n\n    max_round = 2 # Maximum number of debate rounds\n    all_thinking = [[] for _ in range(max_round)]\n    all_answer = [[] for _ in range(max_round)]\n\n    # Perform debate rounds\n    for r in range(max_round):\n        for i in range(len(debate_agents)):\n            if r == 0:\n                thinking, answer = debate_agents[i]([taskInfo], debate_initial_instruction)\n            else:\n                input_infos = [taskInfo] + [all_thinking[r-1][i]] + all_thinking[r-1][:i] + all_thinking[r-1][i+1:]\n                thinking, answer = debate_agents[i](input_infos, debate_instruction)\n            all_thinking[r].append(thinking)\n            all_answer[r].append(answer)\n    \n    # Make the final decision based on all debate results and solutions\n    thinking, answer = final_decision_agent([taskInfo] + all_thinking[max_round-1] + all_answer[max_round-1], final_decision_instruction)\n    return answer\n",
        "api_calls": 12,
        "structure_label": "Multi-Agent Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (32.0%, 36.7%), Median: 46.8%"
    },
    "Abstraction to Principles Reasoning,0": {
        "thought": "**Insights:**\nIntroducing multiple independent agents allows for diversified reasoning paths which can explore different aspects of the problem simultaneously. This can lead to a more robust synthesis of the final answer.\n\n**Overall Idea:**\nThe architecture will utilize two distinct agents: one focused on extracting principles and another on reasoning through the question. This separation encourages a more specialized approach to the task, ultimately improving the accuracy and comprehensiveness of the final answer.\n\n**Implementation:**\n1. Define two agents with specific roles: one for principle extraction and one for reasoning. \n2. Invoke both agents concurrently to gather insights and reason about the question.\n3. Synthesize the outputs of both agents to produce the final answer.",
        "name": "Dual Path Reasoning Agent",
        "code": "def forward(self, taskInfo):\n    # Instruction for principle extraction\n    principle_instruction = \"Identify key principles relevant to the question. Explain these principles in detail.\"\n    \n    # Instruction for reasoning about the question\n    reasoning_instruction = \"Using the identified principles, reason through the question step by step to derive the final answer.\"\n    \n    # Instantiate two distinct LLM agents\n    principle_agent = LLMAgentBase(['thinking', 'principles'], 'Principle Agent')\n    reasoning_agent = LLMAgentBase(['thinking', 'answer'], 'Reasoning Agent')\n    \n    # Extract principles relevant to the task\n    principles_info = principle_agent([taskInfo], principle_instruction)  # Call 1\n    \n    # Reason through the question using the extracted principles\n    answer_info = reasoning_agent([taskInfo, principles_info], reasoning_instruction)  # Call 2\n    \n    return answer_info[1]  # Returning the final answer directly from the output",
        "fitness": "95% Bootstrap Confidence Interval: (65.4%, 69.9%), Median: 78.4%",
        "generation": 9,
        "api_calls": 2,
        "structure_label": "Abstraction to Principles Reasoning"
    },
    "Abstraction to Principles Reasoning,1": null
}