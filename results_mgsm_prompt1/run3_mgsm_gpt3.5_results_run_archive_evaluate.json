[
    {
        "thought": "By encouraging the LLM to think step by step rather than directly outputting an answer, chain-of-thought reasoning enables complex problem-solving through intermediate steps. This practice improves the model's ability to handle tasks that require deeper reasoning and provides insight into its decision-making process.",
        "name": "Chain-of-Thought",
        "code": "def forward(self, taskInfo):\n    # Instruction for the Chain-of-Thought (CoT) approach\n    # It is an important practice that allows the LLM to think step by step before solving the task.\n    cot_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instantiate a new LLM agent specifically for CoT\n    # To allow LLM thinking before answering, we need to set an additional output field 'thinking'.\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Prepare the inputs for the CoT agent\n    # The input should be a list of Info, and the first one is often the taskInfo\n    cot_agent_inputs = [taskInfo]\n\n    # Get the response from the CoT agent\n    thinking, answer = cot_agent(cot_agent_inputs, cot_instruction)\n\n    # Return only the final answer\n    return answer\n",
        "api_calls": 1,
        "structure_label": "Chain-of-Thought Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (12.5%, 25.8%), Median: 18.8%",
        "test_fitness": "95% Bootstrap Confidence Interval: (12.6%, 17.6%), Median: 15.1%"
    },
    {
        "thought": "While an LLM can arrive at the correct answer, its reasoning may vary. By repeatedly asking the same question with high temperature settings, we can generate different reasoning paths. We then combine multiple answers from these Chain-of-Thought (CoT) agents to produce a more accurate final answer through ensembling.",
        "name": "Self-Consistency with Chain-of-Thought",
        "code": "def forward(self, taskInfo):\n    # Instruction for step-by-step reasoning\n    cot_instruction = \"Please think step by step and then solve the task.\"\n    N = 5 # Number of CoT agents\n\n    # Initialize multiple CoT agents with a higher temperature for varied reasoning\n    cot_agents = [LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent', temperature=0.8) for _ in range(N)]\n\n    # Majority voting function to select the most common answer\n    from collections import Counter\n    def majority_voting(answers):\n        return Counter(answers).most_common(1)[0][0]\n    \n    possible_answers = []\n    for i in range(N):\n        thinking, answer = cot_agents[i]([taskInfo], cot_instruction)\n        possible_answers.append(answer.content)\n\n    # Ensembling the answers from multiple CoT agents\n    answer = majority_voting(possible_answers)\n    return answer  \n",
        "api_calls": 5,
        "structure_label": "Multi-Agent Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (8.6%, 20.3%), Median: 14.1%",
        "test_fitness": "95% Bootstrap Confidence Interval: (10.8%, 15.4%), Median: 13.0%"
    },
    {
        "thought": "To enhance its performance, an LLM can iteratively improve its answer based on feedback. By reflecting on its previous attempts and incorporating feedback, the model can refine its reasoning and provide a more accurate solution.",
        "name": "Self-Refine (Reflexion)",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    cot_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for reflecting on previous attempts and feedback to improve\n    cot_reflect_instruction = \"Given previous attempts and feedback, carefully consider where you could go wrong in your latest attempt. Using insights from previous attempts, try to solve the task better.\"\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Instruction for providing feedback and correcting the answer\n    critic_instruction = \"Please review the answer above and criticize on where might be wrong. If you are absolutely sure it is correct, output 'True' in 'correct'.\"\n    critic_agent = LLMAgentBase(['feedback', 'correct'], 'Critic Agent')\n    \n    N_max = 5 # Maximum number of attempts\n\n    # Initial attempt\n    cot_inputs = [taskInfo]\n    thinking, answer = cot_agent(cot_inputs, cot_initial_instruction, 0)\n\n    for i in range(N_max):\n        # Get feedback and correct status from the critic\n        feedback, correct = critic_agent([taskInfo, thinking, answer], critic_instruction, i)\n        if correct.content == 'True':\n            break\n            \n        # Add feedback to the inputs for the next iteration\n        cot_inputs.extend([thinking, answer, feedback])\n\n        # Reflect on previous attempts and refine the answer\n        thinking, answer = cot_agent(cot_inputs, cot_reflect_instruction, i + 1)\n    return answer\n",
        "api_calls": 7,
        "structure_label": "Self-Reflection Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (15.6%, 30.5%), Median: 22.7%",
        "test_fitness": "95% Bootstrap Confidence Interval: (15.4%, 20.8%), Median: 18.0%"
    },
    {
        "thought": "By letting different LLMs debate with each other, we can leverage their diverse perspectives to find better solutions for tasks.",
        "name": "LLM Debate",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    debate_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for debating and updating the solution based on other agents' solutions\n    debate_instruction = \"Given solutions to the problem from other agents, consider their opinions as additional advice. Please think carefully and provide an updated answer.\"\n    \n    # Initialize debate agents with different roles and a moderate temperature for varied reasoning\n    debate_agents = [LLMAgentBase(['thinking', 'answer'], 'Debate Agent', temperature=0.8, role=role) for role in ['Math Professor', 'Grade School Teacher', 'Math Enthusiast']]\n\n    # Instruction for final decision-making based on all debates and solutions\n    final_decision_instruction = \"Given all the above thinking and answers, reason over them carefully and provide a final answer.\"\n    final_decision_agent = LLMAgentBase(['thinking', 'answer'], 'Final Decision Agent', temperature=0.1)\n\n    max_round = 2 # Maximum number of debate rounds\n    all_thinking = [[] for _ in range(max_round)]\n    all_answer = [[] for _ in range(max_round)]\n\n    # Perform debate rounds\n    for r in range(max_round):\n        for i in range(len(debate_agents)):\n            if r == 0:\n                thinking, answer = debate_agents[i]([taskInfo], debate_initial_instruction)\n            else:\n                input_infos = [taskInfo] + [all_thinking[r-1][i]] + all_thinking[r-1][:i] + all_thinking[r-1][i+1:]\n                thinking, answer = debate_agents[i](input_infos, debate_instruction)\n            all_thinking[r].append(thinking)\n            all_answer[r].append(answer)\n    \n    # Make the final decision based on all debate results and solutions\n    thinking, answer = final_decision_agent([taskInfo] + all_thinking[max_round-1] + all_answer[max_round-1], final_decision_instruction)\n    return answer\n",
        "api_calls": 9,
        "structure_label": "Multi-Agent Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (38.3%, 55.5%), Median: 46.9%",
        "test_fitness": "95% Bootstrap Confidence Interval: (40.6%, 47.5%), Median: 44.0%"
    },
    {
        "thought": "Let LLM first think about the principles involved in solving this task which could be helpful. By understanding the underlying principles, the model can better reason through the problem and provide a more accurate solution.",
        "name": "Step-back Abstraction",
        "code": "def forward(self, taskInfo):\n        # Instruction for understanding the principles involved in the task\n        principle_instruction = \"What are the physics, chemistry or biology principles and concepts involved in solving this task? First think step by step. Then list all involved principles and explain them.\"\n        \n        # Instruction for solving the task based on the principles\n        cot_instruction = \"Given the question and the involved principle behind the question, think step by step and then solve the task.\"\n        \n        # Instantiate LLM agents\n        principle_agent = LLMAgentBase(['thinking', 'principle'], 'Principle Agent')\n        cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n        \n        # Get the principles involved in the task\n        thinking, principle = principle_agent([taskInfo], principle_instruction)\n\n        # Use the principles to solve the task\n        thinking, answer = cot_agent([taskInfo, thinking, principle], cot_instruction)\n        return answer\n",
        "api_calls": 2,
        "structure_label": "Abstraction to Principles Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (18.0%, 33.6%), Median: 25.8%",
        "test_fitness": "95% Bootstrap Confidence Interval: (22.1%, 28.0%), Median: 25.0%"
    },
    {
        "thought": "Similar to Quality-Diversity methods, let LLM generate multiple diverse interesting solutions could help. By encouraging the model to explore different reasoning paths, we can increase the chances of finding the best solution.",
        "name": "Quality-Diversity",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    cot_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for giving diverse answers\n    qd_instruction = \"Given previous attempts, try to come up with another interesting way to solve the task.\"\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Instruction for final decision-making based on collected reasoning and answers\n    final_decision_instruction = \"Given all the above solutions, reason over them carefully and provide a final answer.\"\n    final_decision_agent = LLMAgentBase(['thinking', 'answer'], 'Final Decision Agent', temperature=0.1)\n    \n    N_max = 3 # Maximum number of attempts\n\n    # Initial attempt\n    cot_inputs = [taskInfo]\n    possible_answers = []\n    thinking, answer = cot_agent(cot_inputs, cot_initial_instruction, 0)\n\n    # Add the answer to the list of possible answers\n    possible_answers.extend([thinking, answer])\n\n    for i in range(N_max):\n        # Reflect on previous attempts and generate another interesting answer\n        cot_inputs.extend([thinking, answer])\n\n        # Generate another interesting answer\n        thinking, answer = cot_agent(cot_inputs, qd_instruction, i + 1)\n        possible_answers.extend([thinking, answer])\n\n    # Make the final decision based on all generated answers\n    thinking, answer = final_decision_agent([taskInfo] + possible_answers, final_decision_instruction)\n    return answer\n",
        "api_calls": 7,
        "structure_label": "Multi-Agent Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (49.2%, 66.4%), Median: 57.8%",
        "test_fitness": "95% Bootstrap Confidence Interval: (48.4%, 55.4%), Median: 51.9%"
    },
    {
        "thought": "Similar to Auto-GPT and expert prompting, we can use dynamic control flow in the design to let the agent decide what expert we should use.",
        "name": "Dynamic Assignment of Roles",
        "code": "def forward(self, taskInfo):\n        # Instruction for step-by-step reasoning\n        cot_instruction = \"Please think step by step and then solve the task.\"\n        expert_agents = [LLMAgentBase(['thinking', 'answer'], 'Expert Agent', role=role) for role in ['Math Professor', 'Grade School Teacher', 'Math Enthusiast', 'Helpful Assistant']]\n\n        # Instruction for routing the task to the appropriate expert\n        routing_instruction = \"Given the task, please choose an Expert to answer the question. Choose from: Math Professor, Grade School Teacher, Math Enthusiast.\"\n        routing_agent = LLMAgentBase(['choice'], 'Routing agent')\n\n        # Get the choice of expert to route the task\n        choice = routing_agent([taskInfo], routing_instruction)[0]\n\n        if 'professor' in choice.content.lower():\n            expert_id = 0\n        elif 'teacher' in choice.content.lower():\n            expert_id = 1\n        elif 'enthusiast' in choice.content.lower():\n            expert_id = 2\n        else:\n            expert_id = 3 # Default to helpful assistant\n\n        thinking, answer = expert_agents[expert_id]([taskInfo], cot_instruction)\n        return answer\n",
        "api_calls": 4,
        "structure_label": "Multi-Agent Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (7.0%, 18.8%), Median: 12.5%",
        "test_fitness": "95% Bootstrap Confidence Interval: (11.2%, 16.0%), Median: 13.6%"
    },
    {
        "thought": "**Insights:**\nTo further enhance collaborative reasoning without overly complicating the architecture, I propose a structure that consolidates the roles of agents while still allowing for independent reasoning. Instead of having separate agents for principles, solutions, and critiques, we can leverage a single Chain-of-Thought agent to handle both the initial answer generation and reflection based on feedback, reducing the complexity of the interactions. \n**Overall Idea:**\nThe revised architecture will utilize one Chain-of-Thought agent to generate an answer from the task input and feedback. This feedback will directly influence the solution in a single pass, promoting efficiency and clarity. We will eliminate redundant feedback loops and ensure that the final answer is derived from a more focused reflection process. \n**Implementation:**\n1. Use one Chain-of-Thought agent for both generating answers and reflecting on feedback.\n2. Implement a simple feedback mechanism that provides criticism and allows revising the answer in one step.\n3. Streamline the process to ensure fast convergence on a final answer.",
        "name": "Consolidated Reflection Reasoning",
        "code": "def forward(self, taskInfo):\n    # Instruction for generating an initial answer and providing feedback\n    instruction = \"Please think step by step and solve the task. After generating your answer, evaluate its correctness and suggest improvements if necessary.\"\n\n    # Instantiate a single Chain-of-Thought agent for both tasks\n    cot_agent = LLMAgentBase([\"thinking\", \"answer\"], \"Chain-of-Thought Agent\", temperature=0.8)\n    \n    # Generate an answer and evaluate it within the same call\n    thinking, final_answer = cot_agent([taskInfo], instruction)\n\n    # Return the final answer\n    return Info('answer', 'Final Decision Agent', final_answer.content, 0)",
        "fitness": "95% Bootstrap Confidence Interval: (12.5%, 25.8%), Median: 18.8%",
        "generation": 5,
        "api_calls": 1,
        "structure_label": "Self-Reflection Reasoning",
        "test_fitness": "95% Bootstrap Confidence Interval: (17.6%, 23.2%), Median: 20.4%"
    },
    {
        "thought": "**Insights:**\nTo streamline the architecture while maintaining the focus on reasoning diversity, I propose an architecture where a single Chain-of-Thought agent generates multiple reasoning paths in one iteration. This agent will then receive feedback from a critic agent, after which a simple consensus mechanism will determine the final answer based on the generated paths. This reduces the number of API calls and ensures that diverse outputs are still maintained effectively.\n\n**Overall Idea:**\nThe new architecture will utilize a single Chain-of-Thought agent for generating multiple reasoning paths, which will then be critiqued by a single feedback agent. The final output will be determined by a majority voting mechanism based on the reasoning outputs, thus optimizing both the number of API calls and the quality of answers.",
        "name": "Collaborative Decision-Making Chain-of-Thought",
        "code": "def forward(self, taskInfo):\n    # Instruction for generating multiple reasoning paths\n    cot_instruction = \"Please think step by step and generate three distinct logical solutions to the task.\"\n    critic_instruction = \"Please review the following answers and provide feedback on their correctness.\"\n\n    # Initialize a single Chain-of-Thought agent to generate multiple answers\n    cot_agent = LLMAgentBase([\"thinking\", \"answer\"], \"CoT Agent\", temperature=0.8)\n\n    # Generate multiple answers from the Chain-of-Thought agent\n    responses = cot_agent([taskInfo], cot_instruction)  # Collecting both thinking and answers\n\n    # Extract the answers for feedback\n    answer_contents = [response.content for response in responses]  # Extracting answers from returned Info\n\n    # Get feedback from a critic agent\n    critic_agent = LLMAgentBase([\"feedback\"], \"Critique Agent\")\n    feedback = critic_agent([taskInfo] + answer_contents, critic_instruction)[0]  # Assuming feedback is returned as Info\n\n    # Determine the final answer based on voting\n    final_answer = max(set(answer_contents), key=answer_contents.count)  # Majority voting based on generated answers\n\n    return Info('answer', 'Final Decision Agent', final_answer, 0)",
        "fitness": "95% Bootstrap Confidence Interval: (11.7%, 25.0%), Median: 18.0%",
        "generation": 8,
        "api_calls": 2,
        "structure_label": "Multi-Agent Reasoning",
        "test_fitness": "95% Bootstrap Confidence Interval: (13.2%, 18.4%), Median: 15.8%"
    },
    {
        "thought": "**Insights:**\nTo refine the previous architecture, I suggest a design where two Chain-of-Thought agents generate answers independently, and their outputs are fed to a single critic agent for feedback. This decreases the number of API calls while still utilizing diversity in reasoning. Instead of multiple refinement iterations, the focus will be on a single round of feedback, thus enhancing efficiency and staying within API usage limits.\n\n**Overall Idea:**\nThe architecture will consist of two independent Chain-of-Thought agents providing diverse outputs for the same task and a single critic agent that reviews these outputs and provides feedback for potential refinement.\n\n**Implementation:**\n1. Initialize two Chain-of-Thought agents to generate answers based on the same task input.\n2. Use a single critic agent to review both generated answers and provide feedback.\n3. Return the best answer based on the feedback received from the critic agent.",
        "name": "Collaborative Feedback Chain-of-Thought",
        "code": "def forward(self, taskInfo):\n    # Instruction for generating answers\n    cot_instruction = \"Please think step by step and solve the task using logical reasoning based on the information provided.\"\n    critic_instruction = \"Please review the following answers and provide feedback on their correctness and suggest improvements.\"\n\n    # Initialize two Chain-of-Thought agents to generate diverse answers\n    cot_agents = [LLMAgentBase([\"thinking\", \"answer\"], \"CoT Agent\", temperature=0.8) for _ in range(2)]\n    critic_agent = LLMAgentBase([\"feedback\"], \"Critique Agent\")\n\n    # Generate initial answers from both Chain-of-Thought agents\n    answers = [agent([taskInfo], cot_instruction) for agent in cot_agents]  # Collecting both thinking and answers\n\n    # Collect answers content for feedback\n    answer_contents = [answer[1].content for answer in answers]  # Extracting answers from returned Info\n\n    # Get feedback from the critic\n    feedback = critic_agent([taskInfo] + answer_contents, critic_instruction)[0]  # Assuming feedback is returned as Info\n\n    # Create refined input using feedback\n    refined_input = [taskInfo] + answer_contents + [feedback.content]\n    final_answer = LLMAgentBase([\"thinking\", \"answer\"], \"CoT Agent\", temperature=0.8)(refined_input, cot_instruction)[1]  # Final answer from new input\n\n    return final_answer",
        "fitness": "95% Bootstrap Confidence Interval: (8.6%, 21.1%), Median: 14.8%",
        "generation": 7,
        "api_calls": 5,
        "structure_label": "Multi-Agent Reasoning",
        "test_fitness": "95% Bootstrap Confidence Interval: (17.1%, 22.6%), Median: 19.9%"
    }
]