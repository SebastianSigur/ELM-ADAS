[
    {
        "thought": "By encouraging the LLM to think step by step rather than directly outputting an answer, chain-of-thought reasoning enables complex problem-solving through intermediate steps. This practice improves the model's ability to handle tasks that require deeper reasoning and provides insight into its decision-making process.",
        "name": "Chain-of-Thought",
        "code": "def forward(self, taskInfo):\n    # Instruction for the Chain-of-Thought (CoT) approach\n    # It is an important practice that allows the LLM to think step by step before solving the task.\n    cot_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instantiate a new LLM agent specifically for CoT\n    # To allow LLM thinking before answering, we need to set an additional output field 'thinking'.\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Prepare the inputs for the CoT agent\n    # The input should be a list of Info, and the first one is often the taskInfo\n    cot_agent_inputs = [taskInfo]\n\n    # Get the response from the CoT agent\n    thinking, answer = cot_agent(cot_agent_inputs, cot_instruction)\n\n    # Return only the final answer\n    return answer\n",
        "api_calls": 1,
        "structure_label": "Single-Pass Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (12.5%, 25.8%), Median: 18.8%",
        "test_fitness": "95% Bootstrap Confidence Interval: (13.9%, 19.0%), Median: 16.4%"
    },
    {
        "thought": "While an LLM can arrive at the correct answer, its reasoning may vary. By repeatedly asking the same question with high temperature settings, we can generate different reasoning paths. We then combine multiple answers from these Chain-of-Thought (CoT) agents to produce a more accurate final answer through ensembling.",
        "name": "Self-Consistency with Chain-of-Thought",
        "code": "def forward(self, taskInfo):\n    # Instruction for step-by-step reasoning\n    cot_instruction = \"Please think step by step and then solve the task.\"\n    N = 5 # Number of CoT agents\n\n    # Initialize multiple CoT agents with a higher temperature for varied reasoning\n    cot_agents = [LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent', temperature=0.8) for _ in range(N)]\n\n    # Majority voting function to select the most common answer\n    from collections import Counter\n    def majority_voting(answers):\n        return Counter(answers).most_common(1)[0][0]\n    \n    possible_answers = []\n    for i in range(N):\n        thinking, answer = cot_agents[i]([taskInfo], cot_instruction)\n        possible_answers.append(answer.content)\n\n    # Ensembling the answers from multiple CoT agents\n    answer = majority_voting(possible_answers)\n    return answer  \n",
        "api_calls": 5,
        "structure_label": "Parallel Ensemble Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (6.2%, 17.2%), Median: 11.7%",
        "test_fitness": "95% Bootstrap Confidence Interval: (9.5%, 14.0%), Median: 11.8%"
    },
    {
        "thought": "To enhance its performance, an LLM can iteratively improve its answer based on feedback. By reflecting on its previous attempts and incorporating feedback, the model can refine its reasoning and provide a more accurate solution.",
        "name": "Self-Refine (Reflexion)",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    cot_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for reflecting on previous attempts and feedback to improve\n    cot_reflect_instruction = \"Given previous attempts and feedback, carefully consider where you could go wrong in your latest attempt. Using insights from previous attempts, try to solve the task better.\"\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Instruction for providing feedback and correcting the answer\n    critic_instruction = \"Please review the answer above and criticize on where might be wrong. If you are absolutely sure it is correct, output 'True' in 'correct'.\"\n    critic_agent = LLMAgentBase(['feedback', 'correct'], 'Critic Agent')\n    \n    N_max = 5 # Maximum number of attempts\n\n    # Initial attempt\n    cot_inputs = [taskInfo]\n    thinking, answer = cot_agent(cot_inputs, cot_initial_instruction, 0)\n\n    for i in range(N_max):\n        # Get feedback and correct status from the critic\n        feedback, correct = critic_agent([taskInfo, thinking, answer], critic_instruction, i)\n        if correct.content == 'True':\n            break\n            \n        # Add feedback to the inputs for the next iteration\n        cot_inputs.extend([thinking, answer, feedback])\n\n        # Reflect on previous attempts and refine the answer\n        thinking, answer = cot_agent(cot_inputs, cot_reflect_instruction, i + 1)\n    return answer\n",
        "api_calls": 7,
        "structure_label": "Iterative Refinement",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (8.6%, 20.3%), Median: 14.1%",
        "test_fitness": "95% Bootstrap Confidence Interval: (15.2%, 20.6%), Median: 17.9%"
    },
    {
        "thought": "By letting different LLMs debate with each other, we can leverage their diverse perspectives to find better solutions for tasks.",
        "name": "LLM Debate",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    debate_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for debating and updating the solution based on other agents' solutions\n    debate_instruction = \"Given solutions to the problem from other agents, consider their opinions as additional advice. Please think carefully and provide an updated answer.\"\n    \n    # Initialize debate agents with different roles and a moderate temperature for varied reasoning\n    debate_agents = [LLMAgentBase(['thinking', 'answer'], 'Debate Agent', temperature=0.8, role=role) for role in ['Math Professor', 'Grade School Teacher', 'Math Enthusiast']]\n\n    # Instruction for final decision-making based on all debates and solutions\n    final_decision_instruction = \"Given all the above thinking and answers, reason over them carefully and provide a final answer.\"\n    final_decision_agent = LLMAgentBase(['thinking', 'answer'], 'Final Decision Agent', temperature=0.1)\n\n    max_round = 2 # Maximum number of debate rounds\n    all_thinking = [[] for _ in range(max_round)]\n    all_answer = [[] for _ in range(max_round)]\n\n    # Perform debate rounds\n    for r in range(max_round):\n        for i in range(len(debate_agents)):\n            if r == 0:\n                thinking, answer = debate_agents[i]([taskInfo], debate_initial_instruction)\n            else:\n                input_infos = [taskInfo] + [all_thinking[r-1][i]] + all_thinking[r-1][:i] + all_thinking[r-1][i+1:]\n                thinking, answer = debate_agents[i](input_infos, debate_instruction)\n            all_thinking[r].append(thinking)\n            all_answer[r].append(answer)\n    \n    # Make the final decision based on all debate results and solutions\n    thinking, answer = final_decision_agent([taskInfo] + all_thinking[max_round-1] + all_answer[max_round-1], final_decision_instruction)\n    return answer\n",
        "api_calls": 9,
        "structure_label": "Parallel Ensemble Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (39.8%, 57.0%), Median: 48.4%",
        "test_fitness": "95% Bootstrap Confidence Interval: (43.2%, 50.2%), Median: 46.8%"
    },
    {
        "thought": "Let LLM first think about the principles involved in solving this task which could be helpful. By understanding the underlying principles, the model can better reason through the problem and provide a more accurate solution.",
        "name": "Step-back Abstraction",
        "code": "def forward(self, taskInfo):\n        # Instruction for understanding the principles involved in the task\n        principle_instruction = \"What are the physics, chemistry or biology principles and concepts involved in solving this task? First think step by step. Then list all involved principles and explain them.\"\n        \n        # Instruction for solving the task based on the principles\n        cot_instruction = \"Given the question and the involved principle behind the question, think step by step and then solve the task.\"\n        \n        # Instantiate LLM agents\n        principle_agent = LLMAgentBase(['thinking', 'principle'], 'Principle Agent')\n        cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n        \n        # Get the principles involved in the task\n        thinking, principle = principle_agent([taskInfo], principle_instruction)\n\n        # Use the principles to solve the task\n        thinking, answer = cot_agent([taskInfo, thinking, principle], cot_instruction)\n        return answer\n",
        "api_calls": 2,
        "structure_label": "Abstraction-Based Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (15.6%, 30.5%), Median: 22.7%",
        "test_fitness": "95% Bootstrap Confidence Interval: (22.0%, 28.0%), Median: 25.0%"
    },
    {
        "thought": "Similar to Quality-Diversity methods, let LLM generate multiple diverse interesting solutions could help. By encouraging the model to explore different reasoning paths, we can increase the chances of finding the best solution.",
        "name": "Quality-Diversity",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    cot_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for giving diverse answers\n    qd_instruction = \"Given previous attempts, try to come up with another interesting way to solve the task.\"\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Instruction for final decision-making based on collected reasoning and answers\n    final_decision_instruction = \"Given all the above solutions, reason over them carefully and provide a final answer.\"\n    final_decision_agent = LLMAgentBase(['thinking', 'answer'], 'Final Decision Agent', temperature=0.1)\n    \n    N_max = 3 # Maximum number of attempts\n\n    # Initial attempt\n    cot_inputs = [taskInfo]\n    possible_answers = []\n    thinking, answer = cot_agent(cot_inputs, cot_initial_instruction, 0)\n\n    # Add the answer to the list of possible answers\n    possible_answers.extend([thinking, answer])\n\n    for i in range(N_max):\n        # Reflect on previous attempts and generate another interesting answer\n        cot_inputs.extend([thinking, answer])\n\n        # Generate another interesting answer\n        thinking, answer = cot_agent(cot_inputs, qd_instruction, i + 1)\n        possible_answers.extend([thinking, answer])\n\n    # Make the final decision based on all generated answers\n    thinking, answer = final_decision_agent([taskInfo] + possible_answers, final_decision_instruction)\n    return answer\n",
        "api_calls": 7,
        "structure_label": "Iterative Refinement",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (44.5%, 61.7%), Median: 53.1%",
        "test_fitness": "95% Bootstrap Confidence Interval: (54.8%, 61.5%), Median: 58.1%"
    },
    {
        "thought": "Similar to Auto-GPT and expert prompting, we can use dynamic control flow in the design to let the agent decide what expert we should use.",
        "name": "Dynamic Assignment of Roles",
        "code": "def forward(self, taskInfo):\n        # Instruction for step-by-step reasoning\n        cot_instruction = \"Please think step by step and then solve the task.\"\n        expert_agents = [LLMAgentBase(['thinking', 'answer'], 'Expert Agent', role=role) for role in ['Math Professor', 'Grade School Teacher', 'Math Enthusiast', 'Helpful Assistant']]\n\n        # Instruction for routing the task to the appropriate expert\n        routing_instruction = \"Given the task, please choose an Expert to answer the question. Choose from: Math Professor, Grade School Teacher, Math Enthusiast.\"\n        routing_agent = LLMAgentBase(['choice'], 'Routing agent')\n\n        # Get the choice of expert to route the task\n        choice = routing_agent([taskInfo], routing_instruction)[0]\n\n        if 'professor' in choice.content.lower():\n            expert_id = 0\n        elif 'teacher' in choice.content.lower():\n            expert_id = 1\n        elif 'enthusiast' in choice.content.lower():\n            expert_id = 2\n        else:\n            expert_id = 3 # Default to helpful assistant\n\n        thinking, answer = expert_agents[expert_id]([taskInfo], cot_instruction)\n        return answer\n",
        "api_calls": 4,
        "structure_label": "Single-Pass Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (8.6%, 20.3%), Median: 14.1%",
        "test_fitness": "95% Bootstrap Confidence Interval: (13.1%, 18.1%), Median: 15.6%"
    },
    {
        "thought": "**Insights:**\nTo optimize the abstraction-based reasoning process while strictly adhering to the API call limits, I propose a unified architecture that combines principle extraction, initial reasoning, and iterative refinement into a single cohesive function. This architecture will focus on leveraging a single LLMAgentBase instance to handle multiple aspects of the task without increasing the total API calls.\n\n**Overall Idea:**\nThe new architecture will first extract the principles and relationships relevant to the mathematical problem in a step-by-step manner, and then it will iteratively refine the solution based on feedback, all within a single instance. This will maintain efficiency and stay well within the API call limits while still allowing for comprehensive reasoning.",
        "name": "Unified Abstraction and Refinement",
        "code": "def forward(self, taskInfo):\n    # Instruction for extracting principles, providing an initial solution, and iteratively refining the answer based on feedback\n    unified_instruction = \"Identify relevant mathematical principles, provide an initial solution, and suggest improvements in one go.\"\n    \n    # Instantiate a single LLM agent to handle the entire process\n    unified_agent = LLMAgentBase([\"thinking\", \"answer\"], \"Unified Abstraction Agent\")\n    \n    # Prepare the input as a list of Info, starting with taskInfo\n    inputs = [taskInfo]\n\n    # Initial pass for principles and an answer\n    thinking, initial_answer = unified_agent(inputs, unified_instruction)\n    \n    # Feedback and refinement in one call\n    feedback_instruction = \"Review the answer and suggest specific improvements.\"\n    refined_input = inputs + [initial_answer]\n    refined_thinking, refined_answer = unified_agent(refined_input, feedback_instruction)\n\n    return refined_answer",
        "fitness": "95% Bootstrap Confidence Interval: (28.9%, 46.1%), Median: 37.5%",
        "generation": 5,
        "api_calls": 2,
        "structure_label": "Iterative Refinement",
        "test_fitness": "95% Bootstrap Confidence Interval: (28.2%, 34.8%), Median: 31.5%"
    },
    {
        "thought": "**Insights:**\nTo elevate the architecture further, I propose adding a layer of validation and quality assessment for the generated solutions. This architecture will maintain the exploratory nature but emphasize more on validating the correctness of each solution before agreeing on a final answer. This will incorporate both diversity in solutions and a rigorous evaluation of their validity.\n\n**Overall Idea:**\nThe architecture will guide the LLM to explore multiple mathematical strategies, generate a variety of solutions, and then validate each solution's correctness through explicit criteria. This will enable the agent to select the most reliable answer based on both reasoning quality and correctness evaluations, thereby increasing robustness and reliability in problem-solving.",
        "name": "Validation-Driven Exploratory Reasoning",
        "code": "def forward(self, taskInfo):\n    # Unified instruction for exploring various mathematical strategies and validating solutions\n    unified_instruction = \"Explore different mathematical strategies relevant to solving this task. For each strategy, provide a detailed explanation and validate its correctness with 'True' or 'False'.\"\n    \n    # Instantiate a single LLM agent for the entire task\n    exploratory_agent = LLMAgentBase([\"thinking\", \"answer\", \"validation\"], \"Validation-Driven Exploratory Reasoning Agent\")\n    \n    # Get the response from the agent in one API call\n    response_infos = exploratory_agent([taskInfo], unified_instruction)\n    \n    # Collecting answers and validations\n    answers = []\n    validations = []\n    for info in response_infos:\n        if info.name == 'answer':\n            answers.append(info.content)\n        elif info.name == 'validation':\n            validations.append(info.content)\n\n    # Filter answers based on validations\n    valid_answers = [answer for answer, valid in zip(answers, validations) if valid.lower() == 'true']\n    final_answer = valid_answers[0] if valid_answers else 'No valid answer generated.'\n\n    return final_answer",
        "fitness": "95% Bootstrap Confidence Interval: (20.3%, 35.9%), Median: 28.1%",
        "generation": 19,
        "api_calls": 1,
        "structure_label": "Single-Pass Reasoning",
        "test_fitness": "95% Bootstrap Confidence Interval: (25.9%, 32.1%), Median: 29.0%"
    },
    {
        "thought": "**Insights:**\nTo enhance the Chain-of-Thought architecture, we could introduce a mechanism that encourages the LLM to not only reason step-by-step but also to explore alternative mathematical relationships or operations that could lead to the solution. This could foster a broader understanding and ultimately improve the likelihood of arriving at the correct answer.\n\n**Overall Idea:**\nThe new architecture will prompt the model to consider multiple mathematical properties relevant to the problem, thus increasing the likelihood of uncovering the solution through varied reasoning paths while still maintaining a single-pass structure.\n\n**Implementation:**\n1. Define an instruction that emphasizes both step-by-step reasoning and the exploration of different mathematical relationships.\n2. Create a single instance of LLMAgentBase that captures the reasoning process and the final answer.\n3. Call this agent once with the task information to obtain both the reasoning and the answer in a single API call, maintaining compliance with the rule regarding API call limits.",
        "name": "Exploratory Chain-of-Thought",
        "code": "def forward(self, taskInfo):\n    # Instruction for the Exploratory Chain-of-Thought approach\n    exploratory_instruction = \"Analyze the problem step by step and explore different mathematical relationships. Solve the task while clearly expressing each relationship.\"\n\n    # Instantiate a new LLM agent for exploratory reasoning\n    exploratory_agent = LLMAgentBase(['thinking', 'answer'], 'Exploratory Chain-of-Thought Agent')\n\n    # Prepare the input as a list of Info, starting with taskInfo\n    exploratory_agent_inputs = [taskInfo]\n\n    # Get the response from the exploratory agent in one API call\n    thinking, answer = exploratory_agent(exploratory_agent_inputs, exploratory_instruction)\n\n    # Return the final answer\n    return answer",
        "fitness": "95% Bootstrap Confidence Interval: (17.2%, 32.0%), Median: 24.2%",
        "generation": 1,
        "api_calls": 1,
        "structure_label": "Single-Pass Reasoning",
        "test_fitness": "95% Bootstrap Confidence Interval: (20.2%, 26.1%), Median: 23.1%"
    }
]