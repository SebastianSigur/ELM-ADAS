[
    {
        "thought": "By encouraging the LLM to think step by step rather than directly outputting an answer, chain-of-thought reasoning enables complex problem-solving through intermediate steps. This practice improves the model's ability to handle tasks that require deeper reasoning and provides insight into its decision-making process.",
        "name": "Chain-of-Thought",
        "code": "def forward(self, taskInfo):\n    # Instruction for the Chain-of-Thought (CoT) approach\n    # It is an important practice that allows the LLM to think step by step before solving the task.\n    cot_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instantiate a new LLM agent specifically for CoT\n    # To allow LLM thinking before answering, we need to set an additional output field 'thinking'.\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Prepare the inputs for the CoT agent\n    # The input should be a list of Info, and the first one is often the taskInfo\n    cot_agent_inputs = [taskInfo]\n\n    # Get the response from the CoT agent\n    thinking, answer = cot_agent(cot_agent_inputs, cot_instruction)\n\n    # Return only the final answer\n    return answer\n",
        "api_calls": 1,
        "structure_label": "Chain-of-Thought Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (9.4%, 21.9%), Median: 15.6%",
        "test_fitness": "95% Bootstrap Confidence Interval: (12.4%, 17.4%), Median: 14.9%"
    },
    {
        "thought": "While an LLM can arrive at the correct answer, its reasoning may vary. By repeatedly asking the same question with high temperature settings, we can generate different reasoning paths. We then combine multiple answers from these Chain-of-Thought (CoT) agents to produce a more accurate final answer through ensembling.",
        "name": "Self-Consistency with Chain-of-Thought",
        "code": "def forward(self, taskInfo):\n    # Instruction for step-by-step reasoning\n    cot_instruction = \"Please think step by step and then solve the task.\"\n    N = 5 # Number of CoT agents\n\n    # Initialize multiple CoT agents with a higher temperature for varied reasoning\n    cot_agents = [LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent', temperature=0.8) for _ in range(N)]\n\n    # Majority voting function to select the most common answer\n    from collections import Counter\n    def majority_voting(answers):\n        return Counter(answers).most_common(1)[0][0]\n    \n    possible_answers = []\n    for i in range(N):\n        thinking, answer = cot_agents[i]([taskInfo], cot_instruction)\n        possible_answers.append(answer.content)\n\n    # Ensembling the answers from multiple CoT agents\n    answer = majority_voting(possible_answers)\n    return answer  \n",
        "api_calls": 5,
        "structure_label": "Multi-Agent Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (8.6%, 20.3%), Median: 14.1%",
        "test_fitness": "95% Bootstrap Confidence Interval: (10.9%, 15.5%), Median: 13.1%"
    },
    {
        "thought": "To enhance its performance, an LLM can iteratively improve its answer based on feedback. By reflecting on its previous attempts and incorporating feedback, the model can refine its reasoning and provide a more accurate solution.",
        "name": "Self-Refine (Reflexion)",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    cot_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for reflecting on previous attempts and feedback to improve\n    cot_reflect_instruction = \"Given previous attempts and feedback, carefully consider where you could go wrong in your latest attempt. Using insights from previous attempts, try to solve the task better.\"\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Instruction for providing feedback and correcting the answer\n    critic_instruction = \"Please review the answer above and criticize on where might be wrong. If you are absolutely sure it is correct, output 'True' in 'correct'.\"\n    critic_agent = LLMAgentBase(['feedback', 'correct'], 'Critic Agent')\n    \n    N_max = 5 # Maximum number of attempts\n\n    # Initial attempt\n    cot_inputs = [taskInfo]\n    thinking, answer = cot_agent(cot_inputs, cot_initial_instruction, 0)\n\n    for i in range(N_max):\n        # Get feedback and correct status from the critic\n        feedback, correct = critic_agent([taskInfo, thinking, answer], critic_instruction, i)\n        if correct.content == 'True':\n            break\n            \n        # Add feedback to the inputs for the next iteration\n        cot_inputs.extend([thinking, answer, feedback])\n\n        # Reflect on previous attempts and refine the answer\n        thinking, answer = cot_agent(cot_inputs, cot_reflect_instruction, i + 1)\n    return answer\n",
        "api_calls": 7,
        "structure_label": "Self-Reflection Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (10.9%, 24.2%), Median: 17.2%",
        "test_fitness": "95% Bootstrap Confidence Interval: (13.1%, 18.1%), Median: 15.6%"
    },
    {
        "thought": "By letting different LLMs debate with each other, we can leverage their diverse perspectives to find better solutions for tasks.",
        "name": "LLM Debate",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    debate_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for debating and updating the solution based on other agents' solutions\n    debate_instruction = \"Given solutions to the problem from other agents, consider their opinions as additional advice. Please think carefully and provide an updated answer.\"\n    \n    # Initialize debate agents with different roles and a moderate temperature for varied reasoning\n    debate_agents = [LLMAgentBase(['thinking', 'answer'], 'Debate Agent', temperature=0.8, role=role) for role in ['Math Professor', 'Grade School Teacher', 'Math Enthusiast']]\n\n    # Instruction for final decision-making based on all debates and solutions\n    final_decision_instruction = \"Given all the above thinking and answers, reason over them carefully and provide a final answer.\"\n    final_decision_agent = LLMAgentBase(['thinking', 'answer'], 'Final Decision Agent', temperature=0.1)\n\n    max_round = 2 # Maximum number of debate rounds\n    all_thinking = [[] for _ in range(max_round)]\n    all_answer = [[] for _ in range(max_round)]\n\n    # Perform debate rounds\n    for r in range(max_round):\n        for i in range(len(debate_agents)):\n            if r == 0:\n                thinking, answer = debate_agents[i]([taskInfo], debate_initial_instruction)\n            else:\n                input_infos = [taskInfo] + [all_thinking[r-1][i]] + all_thinking[r-1][:i] + all_thinking[r-1][i+1:]\n                thinking, answer = debate_agents[i](input_infos, debate_instruction)\n            all_thinking[r].append(thinking)\n            all_answer[r].append(answer)\n    \n    # Make the final decision based on all debate results and solutions\n    thinking, answer = final_decision_agent([taskInfo] + all_thinking[max_round-1] + all_answer[max_round-1], final_decision_instruction)\n    return answer\n",
        "api_calls": 9,
        "structure_label": "Multi-Agent Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (39.1%, 56.2%), Median: 47.7%",
        "test_fitness": "95% Bootstrap Confidence Interval: (43.5%, 50.5%), Median: 47.0%"
    },
    {
        "thought": "Let LLM first think about the principles involved in solving this task which could be helpful. By understanding the underlying principles, the model can better reason through the problem and provide a more accurate solution.",
        "name": "Step-back Abstraction",
        "code": "def forward(self, taskInfo):\n        # Instruction for understanding the principles involved in the task\n        principle_instruction = \"What are the physics, chemistry or biology principles and concepts involved in solving this task? First think step by step. Then list all involved principles and explain them.\"\n        \n        # Instruction for solving the task based on the principles\n        cot_instruction = \"Given the question and the involved principle behind the question, think step by step and then solve the task.\"\n        \n        # Instantiate LLM agents\n        principle_agent = LLMAgentBase(['thinking', 'principle'], 'Principle Agent')\n        cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n        \n        # Get the principles involved in the task\n        thinking, principle = principle_agent([taskInfo], principle_instruction)\n\n        # Use the principles to solve the task\n        thinking, answer = cot_agent([taskInfo, thinking, principle], cot_instruction)\n        return answer\n",
        "api_calls": 2,
        "structure_label": "Abstraction to Principles Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (20.3%, 35.9%), Median: 28.1%",
        "test_fitness": "95% Bootstrap Confidence Interval: (23.0%, 29.0%), Median: 26.0%"
    },
    {
        "thought": "Similar to Quality-Diversity methods, let LLM generate multiple diverse interesting solutions could help. By encouraging the model to explore different reasoning paths, we can increase the chances of finding the best solution.",
        "name": "Quality-Diversity",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    cot_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for giving diverse answers\n    qd_instruction = \"Given previous attempts, try to come up with another interesting way to solve the task.\"\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Instruction for final decision-making based on collected reasoning and answers\n    final_decision_instruction = \"Given all the above solutions, reason over them carefully and provide a final answer.\"\n    final_decision_agent = LLMAgentBase(['thinking', 'answer'], 'Final Decision Agent', temperature=0.1)\n    \n    N_max = 3 # Maximum number of attempts\n\n    # Initial attempt\n    cot_inputs = [taskInfo]\n    possible_answers = []\n    thinking, answer = cot_agent(cot_inputs, cot_initial_instruction, 0)\n\n    # Add the answer to the list of possible answers\n    possible_answers.extend([thinking, answer])\n\n    for i in range(N_max):\n        # Reflect on previous attempts and generate another interesting answer\n        cot_inputs.extend([thinking, answer])\n\n        # Generate another interesting answer\n        thinking, answer = cot_agent(cot_inputs, qd_instruction, i + 1)\n        possible_answers.extend([thinking, answer])\n\n    # Make the final decision based on all generated answers\n    thinking, answer = final_decision_agent([taskInfo] + possible_answers, final_decision_instruction)\n    return answer\n",
        "api_calls": 7,
        "structure_label": "Multi-Agent Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (46.9%, 64.1%), Median: 55.5%",
        "test_fitness": "95% Bootstrap Confidence Interval: (50.5%, 57.5%), Median: 54.0%"
    },
    {
        "thought": "Similar to Auto-GPT and expert prompting, we can use dynamic control flow in the design to let the agent decide what expert we should use.",
        "name": "Dynamic Assignment of Roles",
        "code": "def forward(self, taskInfo):\n        # Instruction for step-by-step reasoning\n        cot_instruction = \"Please think step by step and then solve the task.\"\n        expert_agents = [LLMAgentBase(['thinking', 'answer'], 'Expert Agent', role=role) for role in ['Math Professor', 'Grade School Teacher', 'Math Enthusiast', 'Helpful Assistant']]\n\n        # Instruction for routing the task to the appropriate expert\n        routing_instruction = \"Given the task, please choose an Expert to answer the question. Choose from: Math Professor, Grade School Teacher, Math Enthusiast.\"\n        routing_agent = LLMAgentBase(['choice'], 'Routing agent')\n\n        # Get the choice of expert to route the task\n        choice = routing_agent([taskInfo], routing_instruction)[0]\n\n        if 'professor' in choice.content.lower():\n            expert_id = 0\n        elif 'teacher' in choice.content.lower():\n            expert_id = 1\n        elif 'enthusiast' in choice.content.lower():\n            expert_id = 2\n        else:\n            expert_id = 3 # Default to helpful assistant\n\n        thinking, answer = expert_agents[expert_id]([taskInfo], cot_instruction)\n        return answer\n",
        "api_calls": 4,
        "structure_label": "Multi-Agent Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (9.4%, 21.9%), Median: 15.6%",
        "test_fitness": "95% Bootstrap Confidence Interval: (11.5%, 16.2%), Median: 13.9%"
    },
    {
        "thought": "**Insights:**\nTo further enhance the architecture for multi-agent reasoning, I propose an architecture that leverages distinct agents to explore various reasoning paths while including a self-critique mechanism to evaluate each output independently. This architecture will utilize multiple independent reasoning agents to generate solutions in parallel and will include a single aggregate agent to compile and evaluate the outputs based on their critiques. The goal is to maximize diversity in reasoning and ensure robust evaluation without exceeding the API call limits.\n\n**Overall Idea:** \nThe new architecture will consist of multiple independent LLMAgentBase instances, each tasked with generating a unique solution to the problem based on the same input. Each agent will also evaluate its own solution for correctness, leading to a more thorough exploration of potential answers and ensuring that the final decision is based on well-reflected inputs.\n\n**Implementation:** \n1. Define a clear instruction for generating a solution that emphasizes both reasoning and self-reflection.\n2. Create multiple distinct reasoning agents, allowing for diverse outputs.\n3. Each agent will independently generate a response and critique its approach.\n4. After collecting responses, an aggregate evaluation mechanism will synthesize the findings to produce a final answer, ensuring comprehensive consideration of all paths taken.",
        "name": "Multi-Agent Reflective Evaluation",
        "code": "def forward(self, taskInfo):\n    # Instruction for generating multiple diverse solutions with critique\n    reasoning_instruction = \"Please generate at least 3 different solutions to the task and evaluate each solution for correctness and potential mistakes.\"\n\n    # Use a single agent to generate diverse reasoning outputs\n    agent = LLMAgentBase([\"thinking\", \"answer\", \"reflection\"], \"Diverse Reasoning Agent\")\n\n    # Collect responses for generating multiple solutions\n    responses = agent([taskInfo], reasoning_instruction)  # This will count as one API call\n\n    # Prepare final decision-making instruction\n    final_decision_instruction = \"Based on the evaluations of the generated solutions, provide a final answer considering strengths and weaknesses.\"\n    final_decision_agent = LLMAgentBase([\"thinking\", \"final_answer\"], \"Final Decision Agent\")\n\n    # Aggregate inputs for decision-making based on critiques\n    final_inputs = [taskInfo] + [resp.content for resp in responses if resp.name == 'answer']  # Use answers for final input\n\n    # Make the final decision based on aggregated evaluations\n    thinking, final_answer = final_decision_agent(final_inputs, final_decision_instruction)\n    return final_answer",
        "fitness": "95% Bootstrap Confidence Interval: (56.2%, 72.7%), Median: 64.8%",
        "generation": 19,
        "api_calls": 2,
        "structure_label": "Multi-Agent Reasoning",
        "test_fitness": "95% Bootstrap Confidence Interval: (61.1%, 67.8%), Median: 64.5%"
    },
    {
        "thought": "**Insights:**\nTo enhance the current architecture, I will implement a mechanism that allows a single agent to generate multiple diverse responses. This will not only help in adhering to the API call limits but also provide a more streamlined approach to self-reflection and reasoning. By using a single LLMAgentBase instance along with a structured approach to gather diverse outputs and reflections, I can maintain the essence of quality-diversity while simplifying the implementation. \n**Overall Idea:**\nThe architecture will utilize a single LLM agent to generate multiple diverse responses through iterative prompts and reflections on each of those responses, promoting a richer output without exceeding API call limits.\n**Implementation:**\n1. Use a single LLMAgentBase instance to generate a diverse set of responses by modifying the input instruction dynamically for each iteration.\n2. Incorporate a reflective step that critiques the generated answer within the same structure to ensure coherent output.\n3. Conclude with a final selection mechanism that synthesizes the best answer based on reflections.",
        "name": "Diverse Reflection Agent",
        "code": "def forward(self, taskInfo):\n    # Instruction for generating diverse solutions and self-reflection\n    integrated_instruction = \"Please think step by step to solve the task and generate at least 3 different approaches. After each approach, evaluate it for correctness and potential mistakes. Present each approach followed by its evaluation.\"\n\n    # Instantiate a single LLM agent for generating diverse answers and reflections\n    diverse_agent = LLMAgentBase([\"thinking\", \"answer\", \"reflection\"], \"Diverse Reflection Agent\")\n\n    # Initialize to collect responses\n    responses = []\n\n    for i in range(3):  # Generate 3 diverse solutions\n        response_info = diverse_agent([taskInfo], integrated_instruction)  # Expecting a structured response\n        responses.append(response_info)  # Append the response Info object\n\n    # Final decision-making instruction based on evaluations\n    final_decision_instruction = \"Based on the evaluations, provide a final answer considering the strengths and weaknesses of the generated solutions.\"\n    final_decision_agent = LLMAgentBase([\"thinking\", \"final_answer\"], \"Final Decision Agent\")\n\n    # Prepare final inputs using all responses\n    final_inputs = [taskInfo] + [item.content for response in responses for item in response if item.name == 'answer']  # Using answers from responses as input\n    thinking, final_answer = final_decision_agent(final_inputs, final_decision_instruction)\n\n    return final_answer",
        "fitness": "95% Bootstrap Confidence Interval: (52.3%, 69.5%), Median: 60.9%",
        "generation": 10,
        "api_calls": 6,
        "structure_label": "Self-Reflection Reasoning",
        "test_fitness": "95% Bootstrap Confidence Interval: (58.5%, 65.2%), Median: 61.9%"
    },
    {
        "thought": "**Insights:**\nTo create a more effective agent, I propose an architecture that generates diverse approaches and reflects on their correctness in a single call. This approach aims to maximize the information gained while adhering to the API call limits. The architecture will prompt the LLM to generate multiple approaches and include a critique of each, all in one structured response. \n\n**Overall Idea:**\nThe new architecture will combine the tasks of generating diverse solutions and their critiques into one call using a single LLMAgentBase instance. This will ensure compliance with the API call limits while providing a comprehensive evaluation of each approach. \n\n**Implementation:**\n1. Formulate a comprehensive instruction that asks the LLM to generate multiple solutions and critique them in a single response.\n2. Use a single LLMAgentBase instance to execute this instruction, ensuring that the implementation is efficient and within the API call limits.",
        "name": "Unified Reflection Agent",
        "code": "def forward(self, taskInfo):\n    # Comprehensive instruction for generating solutions and self-reflection\n    integrated_instruction = \"Please think step by step to solve the task. Generate at least 3 different approaches and critically evaluate the correctness of each one, identifying potential mistakes and suggesting improvements. Present each approach followed by its evaluation.\"\n    \n    # Instantiate a single LLM agent for generating diverse answers and reflections\n    unified_agent = LLMAgentBase([\"thinking\", \"answer\"], \"Unified Reflection Agent\")\n    \n    # Generate diverse responses along with critiques in one structured response\n    responses = unified_agent([taskInfo], integrated_instruction)  # Expecting a structured response\n    \n    # Prepare final inputs using all responses\n    final_inputs = [taskInfo] + [response.content for response in responses]  # Collecting all responses as input\n    \n    # Final decision-making instruction based on evaluations\n    final_decision_instruction = \"Based on the evaluations, provide a final answer considering the strengths and weaknesses of the generated solutions.\"\n    final_decision_agent = LLMAgentBase([\"thinking\", \"final_answer\"], \"Final Decision Agent\")\n    \n    # Make a final decision based on all collected evaluations\n    thinking, final_answer = final_decision_agent(final_inputs, final_decision_instruction)\n    \n    return final_answer",
        "fitness": "95% Bootstrap Confidence Interval: (51.6%, 68.8%), Median: 60.2%",
        "generation": 12,
        "api_calls": 2,
        "structure_label": "Self-Reflection Reasoning",
        "test_fitness": "95% Bootstrap Confidence Interval: (59.5%, 66.1%), Median: 62.9%"
    }
]