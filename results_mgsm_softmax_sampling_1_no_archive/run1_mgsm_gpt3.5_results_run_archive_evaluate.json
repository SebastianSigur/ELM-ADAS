[
    {
        "thought": "By encouraging the LLM to think step by step rather than directly outputting an answer, chain-of-thought reasoning enables complex problem-solving through intermediate steps. This practice improves the model's ability to handle tasks that require deeper reasoning and provides insight into its decision-making process.",
        "name": "Chain-of-Thought",
        "code": "def forward(self, taskInfo):\n    # Instruction for the Chain-of-Thought (CoT) approach\n    # It is an important practice that allows the LLM to think step by step before solving the task.\n    cot_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instantiate a new LLM agent specifically for CoT\n    # To allow LLM thinking before answering, we need to set an additional output field 'thinking'.\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Prepare the inputs for the CoT agent\n    # The input should be a list of Info, and the first one is often the taskInfo\n    cot_agent_inputs = [taskInfo]\n\n    # Get the response from the CoT agent\n    thinking, answer = cot_agent(cot_agent_inputs, cot_instruction)\n\n    # Return only the final answer\n    return answer\n",
        "api_calls": 1,
        "structure_label": "Linear Chain-of-Thought",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (7.0%, 18.8%), Median: 12.5%",
        "test_fitness": "95% Bootstrap Confidence Interval: (11.8%, 16.6%), Median: 14.1%"
    },
    {
        "thought": "While an LLM can arrive at the correct answer, its reasoning may vary. By repeatedly asking the same question with high temperature settings, we can generate different reasoning paths. We then combine multiple answers from these Chain-of-Thought (CoT) agents to produce a more accurate final answer through ensembling.",
        "name": "Self-Consistency with Chain-of-Thought",
        "code": "def forward(self, taskInfo):\n    # Instruction for step-by-step reasoning\n    cot_instruction = \"Please think step by step and then solve the task.\"\n    N = 5 # Number of CoT agents\n\n    # Initialize multiple CoT agents with a higher temperature for varied reasoning\n    cot_agents = [LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent', temperature=0.8) for _ in range(N)]\n\n    # Majority voting function to select the most common answer\n    from collections import Counter\n    def majority_voting(answers):\n        return Counter(answers).most_common(1)[0][0]\n    \n    possible_answers = []\n    for i in range(N):\n        thinking, answer = cot_agents[i]([taskInfo], cot_instruction)\n        possible_answers.append(answer.content)\n\n    # Ensembling the answers from multiple CoT agents\n    answer = majority_voting(possible_answers)\n    return answer  \n",
        "api_calls": 5,
        "structure_label": "Multi-Agent Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (7.0%, 18.8%), Median: 12.5%",
        "test_fitness": "95% Bootstrap Confidence Interval: (10.6%, 15.2%), Median: 12.9%"
    },
    {
        "thought": "To enhance its performance, an LLM can iteratively improve its answer based on feedback. By reflecting on its previous attempts and incorporating feedback, the model can refine its reasoning and provide a more accurate solution.",
        "name": "Self-Refine (Reflexion)",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    cot_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for reflecting on previous attempts and feedback to improve\n    cot_reflect_instruction = \"Given previous attempts and feedback, carefully consider where you could go wrong in your latest attempt. Using insights from previous attempts, try to solve the task better.\"\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Instruction for providing feedback and correcting the answer\n    critic_instruction = \"Please review the answer above and criticize on where might be wrong. If you are absolutely sure it is correct, output 'True' in 'correct'.\"\n    critic_agent = LLMAgentBase(['feedback', 'correct'], 'Critic Agent')\n    \n    N_max = 5 # Maximum number of attempts\n\n    # Initial attempt\n    cot_inputs = [taskInfo]\n    thinking, answer = cot_agent(cot_inputs, cot_initial_instruction, 0)\n\n    for i in range(N_max):\n        # Get feedback and correct status from the critic\n        feedback, correct = critic_agent([taskInfo, thinking, answer], critic_instruction, i)\n        if correct.content == 'True':\n            break\n            \n        # Add feedback to the inputs for the next iteration\n        cot_inputs.extend([thinking, answer, feedback])\n\n        # Reflect on previous attempts and refine the answer\n        thinking, answer = cot_agent(cot_inputs, cot_reflect_instruction, i + 1)\n    return answer\n",
        "api_calls": 10,
        "structure_label": "Iterative Refinement",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (10.2%, 23.4%), Median: 16.4%",
        "test_fitness": "95% Bootstrap Confidence Interval: (14.1%, 19.2%), Median: 16.6%"
    },
    {
        "thought": "By letting different LLMs debate with each other, we can leverage their diverse perspectives to find better solutions for tasks.",
        "name": "LLM Debate",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    debate_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for debating and updating the solution based on other agents' solutions\n    debate_instruction = \"Given solutions to the problem from other agents, consider their opinions as additional advice. Please think carefully and provide an updated answer.\"\n    \n    # Initialize debate agents with different roles and a moderate temperature for varied reasoning\n    debate_agents = [LLMAgentBase(['thinking', 'answer'], 'Debate Agent', temperature=0.8, role=role) for role in ['Math Professor', 'Grade School Teacher', 'Math Enthusiast']]\n\n    # Instruction for final decision-making based on all debates and solutions\n    final_decision_instruction = \"Given all the above thinking and answers, reason over them carefully and provide a final answer.\"\n    final_decision_agent = LLMAgentBase(['thinking', 'answer'], 'Final Decision Agent', temperature=0.1)\n\n    max_round = 2 # Maximum number of debate rounds\n    all_thinking = [[] for _ in range(max_round)]\n    all_answer = [[] for _ in range(max_round)]\n\n    # Perform debate rounds\n    for r in range(max_round):\n        for i in range(len(debate_agents)):\n            if r == 0:\n                thinking, answer = debate_agents[i]([taskInfo], debate_initial_instruction)\n            else:\n                input_infos = [taskInfo] + [all_thinking[r-1][i]] + all_thinking[r-1][:i] + all_thinking[r-1][i+1:]\n                thinking, answer = debate_agents[i](input_infos, debate_instruction)\n            all_thinking[r].append(thinking)\n            all_answer[r].append(answer)\n    \n    # Make the final decision based on all debate results and solutions\n    thinking, answer = final_decision_agent([taskInfo] + all_thinking[max_round-1] + all_answer[max_round-1], final_decision_instruction)\n    return answer\n",
        "api_calls": 12,
        "structure_label": "Multi-Agent Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (36.7%, 53.9%), Median: 45.3%",
        "test_fitness": "95% Bootstrap Confidence Interval: (42.2%, 49.1%), Median: 45.6%"
    },
    {
        "thought": "Let LLM first think about the principles involved in solving this task which could be helpful. By understanding the underlying principles, the model can better reason through the problem and provide a more accurate solution.",
        "name": "Step-back Abstraction",
        "code": "def forward(self, taskInfo):\n        # Instruction for understanding the principles involved in the task\n        principle_instruction = \"What are the physics, chemistry or biology principles and concepts involved in solving this task? First think step by step. Then list all involved principles and explain them.\"\n        \n        # Instruction for solving the task based on the principles\n        cot_instruction = \"Given the question and the involved principle behind the question, think step by step and then solve the task.\"\n        \n        # Instantiate LLM agents\n        principle_agent = LLMAgentBase(['thinking', 'principle'], 'Principle Agent')\n        cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n        \n        # Get the principles involved in the task\n        thinking, principle = principle_agent([taskInfo], principle_instruction)\n\n        # Use the principles to solve the task\n        thinking, answer = cot_agent([taskInfo, thinking, principle], cot_instruction)\n        return answer\n",
        "api_calls": 4,
        "structure_label": "Abstraction to Principles Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (18.8%, 34.4%), Median: 26.6%",
        "test_fitness": "95% Bootstrap Confidence Interval: (21.4%, 27.4%), Median: 24.4%"
    },
    {
        "thought": "Similar to Quality-Diversity methods, let LLM generate multiple diverse interesting solutions could help. By encouraging the model to explore different reasoning paths, we can increase the chances of finding the best solution.",
        "name": "Quality-Diversity",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    cot_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for giving diverse answers\n    qd_instruction = \"Given previous attempts, try to come up with another interesting way to solve the task.\"\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Instruction for final decision-making based on collected reasoning and answers\n    final_decision_instruction = \"Given all the above solutions, reason over them carefully and provide a final answer.\"\n    final_decision_agent = LLMAgentBase(['thinking', 'answer'], 'Final Decision Agent', temperature=0.1)\n    \n    N_max = 3 # Maximum number of attempts\n\n    # Initial attempt\n    cot_inputs = [taskInfo]\n    possible_answers = []\n    thinking, answer = cot_agent(cot_inputs, cot_initial_instruction, 0)\n\n    # Add the answer to the list of possible answers\n    possible_answers.extend([thinking, answer])\n\n    for i in range(N_max):\n        # Reflect on previous attempts and generate another interesting answer\n        cot_inputs.extend([thinking, answer])\n\n        # Generate another interesting answer\n        thinking, answer = cot_agent(cot_inputs, qd_instruction, i + 1)\n        possible_answers.extend([thinking, answer])\n\n    # Make the final decision based on all generated answers\n    thinking, answer = final_decision_agent([taskInfo] + possible_answers, final_decision_instruction)\n    return answer\n",
        "api_calls": 8,
        "structure_label": "Multi-Agent Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (49.2%, 66.4%), Median: 57.8%",
        "test_fitness": "95% Bootstrap Confidence Interval: (53.5%, 60.4%), Median: 57.0%"
    },
    {
        "thought": "Similar to Auto-GPT and expert prompting, we can use dynamic control flow in the design to let the agent decide what expert we should use.",
        "name": "Dynamic Assignment of Roles",
        "code": "def forward(self, taskInfo):\n        # Instruction for step-by-step reasoning\n        cot_instruction = \"Please think step by step and then solve the task.\"\n        expert_agents = [LLMAgentBase(['thinking', 'answer'], 'Expert Agent', role=role) for role in ['Math Professor', 'Grade School Teacher', 'Math Enthusiast', 'Helpful Assistant']]\n\n        # Instruction for routing the task to the appropriate expert\n        routing_instruction = \"Given the task, please choose an Expert to answer the question. Choose from: Math Professor, Grade School Teacher, Math Enthusiast.\"\n        routing_agent = LLMAgentBase(['choice'], 'Routing agent')\n\n        # Get the choice of expert to route the task\n        choice = routing_agent([taskInfo], routing_instruction)[0]\n\n        if 'professor' in choice.content.lower():\n            expert_id = 0\n        elif 'teacher' in choice.content.lower():\n            expert_id = 1\n        elif 'enthusiast' in choice.content.lower():\n            expert_id = 2\n        else:\n            expert_id = 3 # Default to helpful assistant\n\n        thinking, answer = expert_agents[expert_id]([taskInfo], cot_instruction)\n        return answer\n",
        "api_calls": 6,
        "structure_label": "Decompositional Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (7.8%, 19.5%), Median: 13.3%",
        "test_fitness": "95% Bootstrap Confidence Interval: (10.4%, 15.0%), Median: 12.6%"
    },
    {
        "thought": "**Insights:**\nTo enhance the efficiency of the mathematical problem-solving process while ensuring compliance with the few API calls requirement, I propose a unified workflow that incorporates principle extraction and solution generation with an integrated validation step in a single call. This will ensure a robust reasoning process. \n**Overall Idea:**\nThe architecture will utilize a single agent that analyzes the problem, extracts principles, proposes a solution, and validates it all within one API call. This will provide a comprehensive reasoning process while maintaining clarity and efficiency. \n**Implementation:**\n1. The agent will be tasked with analyzing the problem statement to extract key principles and relationships while proposing a solution and validating that solution within the same response.",
        "name": "Principle Extraction and Validation Agent",
        "code": "def forward(self, taskInfo):\n    # Instruction for the agent to analyze the problem, extract principles, propose a solution, and validate it.\n    instruction = \"Carefully analyze the following mathematical problem. Break down the components, extract the underlying principles, propose a solution based on those principles, and validate the solution to ensure its correctness.\"\n    # Single agent instance to process the task\n    llm_agent = LLMAgentBase([\"thinking\", \"final_answer\"], \"Principle Extraction and Validation Agent\")\n    # One call to get reasoning, solution, and validation in a single response\n    response = llm_agent([taskInfo], instruction)  # 1 call\n    return response[1]  # Return the final answer.",
        "fitness": "95% Bootstrap Confidence Interval: (61.7%, 77.3%), Median: 69.5%",
        "generation": 23,
        "api_calls": 1,
        "structure_label": "Abstraction to Principles Reasoning",
        "test_fitness": "95% Bootstrap Confidence Interval: (56.8%, 63.5%), Median: 60.1%"
    },
    {
        "thought": "**Insights:**\nTo enhance the mathematical problem-solving agent, focusing on a linear reasoning structure that naturally integrates both reasoning and validation processes can improve efficiency and clarity. A single, coherent pathway with a step-by-step breakdown can provide a more straightforward approach to problem-solving. \n**Overall Idea:**\nI propose a linear reasoning architecture where a single agent processes the mathematical problem by breaking it down into its components, proposing a solution, and validating it in one call. This reduces the number of API calls while ensuring robust reasoning and validation. \n**Implementation:**\n1. The agent will analyze the given mathematical problem and break it down into clear steps to derive the answer.\n2. It will then validate the proposed solution as part of the response process, ensuring the accuracy of the computations in a single step.",
        "name": "Linear Reasoning and Validation Agent",
        "code": "def forward(self, taskInfo):\n    # Instruction for the agent to analyze the problem and provide a solution along with validation.\n    instruction = \"Analyze the following mathematical problem step by step. Break it down into components, propose a solution, and validate that solution.\"\n    # Single agent instance to process the task\n    llm_agent = LLMAgentBase([\"thinking\", \"final_answer\"], \"Linear Reasoning and Validation Agent\")\n    # One call to get reasoning and validation in a single response\n    response = llm_agent([taskInfo], instruction)  # 1 call\n    return response[1]  # Return the final answer.",
        "fitness": "95% Bootstrap Confidence Interval: (57.8%, 74.2%), Median: 66.4%",
        "generation": 11,
        "api_calls": 1,
        "structure_label": "Linear Chain-of-Thought",
        "test_fitness": "95% Bootstrap Confidence Interval: (62.1%, 68.8%), Median: 65.5%"
    },
    {
        "thought": "**Insights:**\nTo enhance the performance of the mathematical problem-solving agent, I propose a Tree-of-Thought structure that efficiently utilizes two specialized agents for both solution derivation and validation without exceeding the API call limit. \n**Overall Idea:**\nWe will employ two agents: the first agent will break down the mathematical problem and derive the solution, while the second will validate this solution within the same call to minimize redundancy and optimize performance.\n**Implementation:**\n1. The first agent will analyze the problem and propose a mathematical solution.\n2. The second agent will receive the proposed solution and validate it in a single logical pathway, thus ensuring correctness and efficiency.",
        "name": "Dual-Agent Mathematical Reasoning Agent",
        "code": "def forward(self, taskInfo):\n    # Instruction for the agent to analyze the problem and validate the solution\n    instruction = \"Analyze and solve the following mathematical problem step by step. Derive a solution and ensure its validity within your reasoning.\"\n    # Single agent instance for solution derivation and validation\n    llm_agent = LLMAgentBase([\"thinking\", \"final_answer\"], \"Dual-Agent Mathematical Reasoning Agent\")\n    # One call to handle both reasoning and validation in a single response\n    response = llm_agent([taskInfo], instruction)  # 1 call\n    return response[1]  # Return the final answer.",
        "fitness": "95% Bootstrap Confidence Interval: (57.0%, 73.4%), Median: 65.6%",
        "generation": 12,
        "api_calls": 1,
        "structure_label": "Linear Chain-of-Thought",
        "test_fitness": "95% Bootstrap Confidence Interval: (58.5%, 65.2%), Median: 61.9%"
    }
]