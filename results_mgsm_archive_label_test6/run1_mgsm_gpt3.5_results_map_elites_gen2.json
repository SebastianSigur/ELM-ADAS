{
    "Abstraction to Principles Reasoning,0": {
        "thought": "Let LLM first think about the principles involved in solving this task which could be helpful. By understanding the underlying principles, the model can better reason through the problem and provide a more accurate solution.",
        "name": "Step-back Abstraction",
        "code": "def forward(self, taskInfo):\n        # Instruction for understanding the principles involved in the task\n        principle_instruction = \"What are the physics, chemistry or biology principles and concepts involved in solving this task? First think step by step. Then list all involved principles and explain them.\"\n        \n        # Instruction for solving the task based on the principles\n        cot_instruction = \"Given the question and the involved principle behind the question, think step by step and then solve the task.\"\n        \n        # Instantiate LLM agents\n        principle_agent = LLMAgentBase(['thinking', 'principle'], 'Principle Agent')\n        cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n        \n        # Get the principles involved in the task\n        thinking, principle = principle_agent([taskInfo], principle_instruction)\n\n        # Use the principles to solve the task\n        thinking, answer = cot_agent([taskInfo, thinking, principle], cot_instruction)\n        return answer\n",
        "api_calls": 2,
        "structure_label": "Abstraction to Principles Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (17.2%, 32.0%), Median: 24.2%"
    },
    "Abstraction to Principles Reasoning,1": null,
    "Multi-Agent Reasoning,0": {
        "thought": "**Insights:**\nTo enhance collaborative reasoning while minimizing API calls, I propose an architecture that utilizes multiple agents to generate diverse answers and critique each other's solutions. This method leverages the strengths of each agent's unique perspective, facilitating a richer problem-solving process.\n\n**Overall Idea:**\nThe architecture will consist of several agents that each produce their answers independently based on the same task. Following the answer generation, these agents will review and provide feedback on each other's responses, culminating in a consensus process to determine the final answer. This will not only increase the variety of reasoning paths explored but also allow agents to learn from each other\u2019s critiques, leading to a more accurate final solution.\n\n**Implementation:**\n1. Initialize a set of agents, each designed to approach the problem from different angles.\n2. Each agent generates an answer and critiques its peers in a single step.\n3. Synthesize the critiques and answers to arrive at the best final answer, all within a constrained number of API calls.",
        "name": "Collaborative Reasoning Agent",
        "code": "def forward(self, taskInfo):\n    # Instruction for generating answers and providing feedback\n    instruction = \"Please think step by step to solve the task, and also critique the solutions provided by your peers.\"\n    N_agents = 3  # Number of different reasoning agents\n    agents = [LLMAgentBase([\"thinking\", \"answer\", \"critique\"], f\"Agent {i}\") for i in range(N_agents)]\n\n    # Collect answers and critiques from all agents\n    responses = []\n    for agent in agents:\n        response = agent([taskInfo], instruction)\n        responses.append(response)  # Each response is expected to be a list of Info objects\n\n    # Extract answers and critiques from Info objects\n    answers = []\n    critiques = []\n    for response in responses:\n        for info in response:\n            if info.name == 'answer':\n                answers.append(info.content)  # Collecting answers\n            elif info.name == 'critique':\n                critiques.append(info.content)  # Collecting critiques\n\n    # Determine the best answer based on critiques\n    final_answer = max(set(answers), key=answers.count)  # Simple majority vote for best answer\n\n    return final_answer",
        "fitness": "95% Bootstrap Confidence Interval: (37.5%, 54.7%), Median: 46.1%",
        "generation": 2,
        "api_calls": 3,
        "structure_label": "Multi-Agent Reasoning"
    },
    "Multi-Agent Reasoning,1": {
        "thought": "Similar to Quality-Diversity methods, let LLM generate multiple diverse interesting solutions could help. By encouraging the model to explore different reasoning paths, we can increase the chances of finding the best solution.",
        "name": "Quality-Diversity",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    cot_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for giving diverse answers\n    qd_instruction = \"Given previous attempts, try to come up with another interesting way to solve the task.\"\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Instruction for final decision-making based on collected reasoning and answers\n    final_decision_instruction = \"Given all the above solutions, reason over them carefully and provide a final answer.\"\n    final_decision_agent = LLMAgentBase(['thinking', 'answer'], 'Final Decision Agent', temperature=0.1)\n    \n    N_max = 3 # Maximum number of attempts\n\n    # Initial attempt\n    cot_inputs = [taskInfo]\n    possible_answers = []\n    thinking, answer = cot_agent(cot_inputs, cot_initial_instruction, 0)\n\n    # Add the answer to the list of possible answers\n    possible_answers.extend([thinking, answer])\n\n    for i in range(N_max):\n        # Reflect on previous attempts and generate another interesting answer\n        cot_inputs.extend([thinking, answer])\n\n        # Generate another interesting answer\n        thinking, answer = cot_agent(cot_inputs, qd_instruction, i + 1)\n        possible_answers.extend([thinking, answer])\n\n    # Make the final decision based on all generated answers\n    thinking, answer = final_decision_agent([taskInfo] + possible_answers, final_decision_instruction)\n    return answer\n",
        "api_calls": 7,
        "structure_label": "Multi-Agent Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (48.4%, 65.6%), Median: 57.0%"
    },
    "Linear Chain-of-Thought,0": {
        "thought": "By encouraging the LLM to think step by step rather than directly outputting an answer, chain-of-thought reasoning enables complex problem-solving through intermediate steps. This practice improves the model's ability to handle tasks that require deeper reasoning and provides insight into its decision-making process.",
        "name": "Chain-of-Thought",
        "code": "def forward(self, taskInfo):\n    # Instruction for the Chain-of-Thought (CoT) approach\n    # It is an important practice that allows the LLM to think step by step before solving the task.\n    cot_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instantiate a new LLM agent specifically for CoT\n    # To allow LLM thinking before answering, we need to set an additional output field 'thinking'.\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Prepare the inputs for the CoT agent\n    # The input should be a list of Info, and the first one is often the taskInfo\n    cot_agent_inputs = [taskInfo]\n\n    # Get the response from the CoT agent\n    thinking, answer = cot_agent(cot_agent_inputs, cot_instruction)\n\n    # Return only the final answer\n    return answer\n",
        "api_calls": 1,
        "structure_label": "Linear Chain-of-Thought",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (8.6%, 20.3%), Median: 14.1%"
    },
    "Linear Chain-of-Thought,1": null,
    "Decompositional Reasoning,0": {
        "thought": "Similar to Auto-GPT and expert prompting, we can use dynamic control flow in the design to let the agent decide what expert we should use.",
        "name": "Dynamic Assignment of Roles",
        "code": "def forward(self, taskInfo):\n        # Instruction for step-by-step reasoning\n        cot_instruction = \"Please think step by step and then solve the task.\"\n        expert_agents = [LLMAgentBase(['thinking', 'answer'], 'Expert Agent', role=role) for role in ['Math Professor', 'Grade School Teacher', 'Math Enthusiast', 'Helpful Assistant']]\n\n        # Instruction for routing the task to the appropriate expert\n        routing_instruction = \"Given the task, please choose an Expert to answer the question. Choose from: Math Professor, Grade School Teacher, Math Enthusiast.\"\n        routing_agent = LLMAgentBase(['choice'], 'Routing agent')\n\n        # Get the choice of expert to route the task\n        choice = routing_agent([taskInfo], routing_instruction)[0]\n\n        if 'professor' in choice.content.lower():\n            expert_id = 0\n        elif 'teacher' in choice.content.lower():\n            expert_id = 1\n        elif 'enthusiast' in choice.content.lower():\n            expert_id = 2\n        else:\n            expert_id = 3 # Default to helpful assistant\n\n        thinking, answer = expert_agents[expert_id]([taskInfo], cot_instruction)\n        return answer\n",
        "api_calls": 4,
        "structure_label": "Decompositional Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (8.6%, 21.1%), Median: 14.8%"
    },
    "Decompositional Reasoning,1": null,
    "Iterative Refinement,0": {
        "thought": "**Insights:**\nTo further enhance the iterative refinement process while adhering to the API call limits, I propose a new architecture that consolidates the feedback and revision into a single cohesive process. This can be achieved by generating the initial answer alongside a built-in consideration of common feedback patterns, thus minimizing the need for separate calls. \n\n**Overall Idea:**\nThe revised agent will perform initial reasoning, then simulate an internal feedback mechanism where it predicts potential errors or common pitfalls based on previous experiences. This single-step process will both create and refine the answer in one API call.\n\n**Implementation:**\n1. Start by generating an initial answer while anticipating common feedback based on the problem type.\n2. If the model recognizes potential issues in its reasoning, it will self-correct using those insights, producing a refined answer in one go.\n3. Return the final answer without further calls to additional agents.",
        "name": "Integrated Feedback Agent",
        "code": "def forward(self, taskInfo):\n    # Instruction for integrated reasoning and feedback assessment\n    integrated_instruction = \"Please think step by step and solve the task. Indicate whether you believe your answer is correct: 'True' if correct, otherwise provide feedback.\"\n    cot_agent = LLMAgentBase([\"thinking\", \"answer\", \"correctness\"], \"Chain-of-Thought Agent\")\n\n    # Generate initial answer and correctness in one call\n    thinking, answer, correctness = cot_agent([taskInfo], integrated_instruction)\n\n    # If the answer is deemed incorrect, trigger a self-correction process\n    if correctness.content != 'True':\n        correction_instruction = \"Based on your feedback, revise your answer and provide a corrected response.\"\n        revised_answer = cot_agent([taskInfo, answer], correction_instruction)\n        return revised_answer\n    return answer",
        "fitness": "95% Bootstrap Confidence Interval: (32.8%, 50.0%), Median: 41.4%",
        "generation": 1,
        "api_calls": 2,
        "structure_label": "Iterative Refinement"
    },
    "Iterative Refinement,1": {
        "thought": "To enhance its performance, an LLM can iteratively improve its answer based on feedback. By reflecting on its previous attempts and incorporating feedback, the model can refine its reasoning and provide a more accurate solution.",
        "name": "Self-Refine (Reflexion)",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    cot_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for reflecting on previous attempts and feedback to improve\n    cot_reflect_instruction = \"Given previous attempts and feedback, carefully consider where you could go wrong in your latest attempt. Using insights from previous attempts, try to solve the task better.\"\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Instruction for providing feedback and correcting the answer\n    critic_instruction = \"Please review the answer above and criticize on where might be wrong. If you are absolutely sure it is correct, output 'True' in 'correct'.\"\n    critic_agent = LLMAgentBase(['feedback', 'correct'], 'Critic Agent')\n    \n    N_max = 5 # Maximum number of attempts\n\n    # Initial attempt\n    cot_inputs = [taskInfo]\n    thinking, answer = cot_agent(cot_inputs, cot_initial_instruction, 0)\n\n    for i in range(N_max):\n        # Get feedback and correct status from the critic\n        feedback, correct = critic_agent([taskInfo, thinking, answer], critic_instruction, i)\n        if correct.content == 'True':\n            break\n            \n        # Add feedback to the inputs for the next iteration\n        cot_inputs.extend([thinking, answer, feedback])\n\n        # Reflect on previous attempts and refine the answer\n        thinking, answer = cot_agent(cot_inputs, cot_reflect_instruction, i + 1)\n    return answer\n",
        "api_calls": 7,
        "structure_label": "Iterative Refinement",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (10.2%, 22.7%), Median: 16.4%"
    }
}