[
    {
        "thought": "By encouraging the LLM to think step by step rather than directly outputting an answer, chain-of-thought reasoning enables complex problem-solving through intermediate steps. This practice improves the model's ability to handle tasks that require deeper reasoning and provides insight into its decision-making process.",
        "name": "Chain-of-Thought",
        "code": "def forward(self, taskInfo):\n    # Instruction for the Chain-of-Thought (CoT) approach\n    # It is an important practice that allows the LLM to think step by step before solving the task.\n    cot_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instantiate a new LLM agent specifically for CoT\n    # To allow LLM thinking before answering, we need to set an additional output field 'thinking'.\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Prepare the inputs for the CoT agent\n    # The input should be a list of Info, and the first one is often the taskInfo\n    cot_agent_inputs = [taskInfo]\n\n    # Get the response from the CoT agent\n    thinking, answer = cot_agent(cot_agent_inputs, cot_instruction)\n\n    # Return only the final answer\n    return answer\n",
        "api_calls": 1,
        "structure_label": "Linear Chain-of-Thought",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (8.6%, 20.3%), Median: 14.1%"
    },
    {
        "thought": "While an LLM can arrive at the correct answer, its reasoning may vary. By repeatedly asking the same question with high temperature settings, we can generate different reasoning paths. We then combine multiple answers from these Chain-of-Thought (CoT) agents to produce a more accurate final answer through ensembling.",
        "name": "Self-Consistency with Chain-of-Thought",
        "code": "def forward(self, taskInfo):\n    # Instruction for step-by-step reasoning\n    cot_instruction = \"Please think step by step and then solve the task.\"\n    N = 5 # Number of CoT agents\n\n    # Initialize multiple CoT agents with a higher temperature for varied reasoning\n    cot_agents = [LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent', temperature=0.8) for _ in range(N)]\n\n    # Majority voting function to select the most common answer\n    from collections import Counter\n    def majority_voting(answers):\n        return Counter(answers).most_common(1)[0][0]\n    \n    possible_answers = []\n    for i in range(N):\n        thinking, answer = cot_agents[i]([taskInfo], cot_instruction)\n        possible_answers.append(answer.content)\n\n    # Ensembling the answers from multiple CoT agents\n    answer = majority_voting(possible_answers)\n    return answer  \n",
        "api_calls": 5,
        "structure_label": "Multi-Agent Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (8.6%, 20.3%), Median: 14.1%"
    },
    {
        "thought": "To enhance its performance, an LLM can iteratively improve its answer based on feedback. By reflecting on its previous attempts and incorporating feedback, the model can refine its reasoning and provide a more accurate solution.",
        "name": "Self-Refine (Reflexion)",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    cot_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for reflecting on previous attempts and feedback to improve\n    cot_reflect_instruction = \"Given previous attempts and feedback, carefully consider where you could go wrong in your latest attempt. Using insights from previous attempts, try to solve the task better.\"\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Instruction for providing feedback and correcting the answer\n    critic_instruction = \"Please review the answer above and criticize on where might be wrong. If you are absolutely sure it is correct, output 'True' in 'correct'.\"\n    critic_agent = LLMAgentBase(['feedback', 'correct'], 'Critic Agent')\n    \n    N_max = 5 # Maximum number of attempts\n\n    # Initial attempt\n    cot_inputs = [taskInfo]\n    thinking, answer = cot_agent(cot_inputs, cot_initial_instruction, 0)\n\n    for i in range(N_max):\n        # Get feedback and correct status from the critic\n        feedback, correct = critic_agent([taskInfo, thinking, answer], critic_instruction, i)\n        if correct.content == 'True':\n            break\n            \n        # Add feedback to the inputs for the next iteration\n        cot_inputs.extend([thinking, answer, feedback])\n\n        # Reflect on previous attempts and refine the answer\n        thinking, answer = cot_agent(cot_inputs, cot_reflect_instruction, i + 1)\n    return answer\n",
        "api_calls": 7,
        "structure_label": "Iterative Refinement",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (10.2%, 22.7%), Median: 16.4%"
    },
    {
        "thought": "By letting different LLMs debate with each other, we can leverage their diverse perspectives to find better solutions for tasks.",
        "name": "LLM Debate",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    debate_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for debating and updating the solution based on other agents' solutions\n    debate_instruction = \"Given solutions to the problem from other agents, consider their opinions as additional advice. Please think carefully and provide an updated answer.\"\n    \n    # Initialize debate agents with different roles and a moderate temperature for varied reasoning\n    debate_agents = [LLMAgentBase(['thinking', 'answer'], 'Debate Agent', temperature=0.8, role=role) for role in ['Math Professor', 'Grade School Teacher', 'Math Enthusiast']]\n\n    # Instruction for final decision-making based on all debates and solutions\n    final_decision_instruction = \"Given all the above thinking and answers, reason over them carefully and provide a final answer.\"\n    final_decision_agent = LLMAgentBase(['thinking', 'answer'], 'Final Decision Agent', temperature=0.1)\n\n    max_round = 2 # Maximum number of debate rounds\n    all_thinking = [[] for _ in range(max_round)]\n    all_answer = [[] for _ in range(max_round)]\n\n    # Perform debate rounds\n    for r in range(max_round):\n        for i in range(len(debate_agents)):\n            if r == 0:\n                thinking, answer = debate_agents[i]([taskInfo], debate_initial_instruction)\n            else:\n                input_infos = [taskInfo] + [all_thinking[r-1][i]] + all_thinking[r-1][:i] + all_thinking[r-1][i+1:]\n                thinking, answer = debate_agents[i](input_infos, debate_instruction)\n            all_thinking[r].append(thinking)\n            all_answer[r].append(answer)\n    \n    # Make the final decision based on all debate results and solutions\n    thinking, answer = final_decision_agent([taskInfo] + all_thinking[max_round-1] + all_answer[max_round-1], final_decision_instruction)\n    return answer\n",
        "api_calls": 9,
        "structure_label": "Multi-Agent Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (46.1%, 63.3%), Median: 54.7%"
    },
    {
        "thought": "Let LLM first think about the principles involved in solving this task which could be helpful. By understanding the underlying principles, the model can better reason through the problem and provide a more accurate solution.",
        "name": "Step-back Abstraction",
        "code": "def forward(self, taskInfo):\n        # Instruction for understanding the principles involved in the task\n        principle_instruction = \"What are the physics, chemistry or biology principles and concepts involved in solving this task? First think step by step. Then list all involved principles and explain them.\"\n        \n        # Instruction for solving the task based on the principles\n        cot_instruction = \"Given the question and the involved principle behind the question, think step by step and then solve the task.\"\n        \n        # Instantiate LLM agents\n        principle_agent = LLMAgentBase(['thinking', 'principle'], 'Principle Agent')\n        cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n        \n        # Get the principles involved in the task\n        thinking, principle = principle_agent([taskInfo], principle_instruction)\n\n        # Use the principles to solve the task\n        thinking, answer = cot_agent([taskInfo, thinking, principle], cot_instruction)\n        return answer\n",
        "api_calls": 2,
        "structure_label": "Abstraction to Principles Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (17.2%, 32.0%), Median: 24.2%"
    },
    {
        "thought": "Similar to Quality-Diversity methods, let LLM generate multiple diverse interesting solutions could help. By encouraging the model to explore different reasoning paths, we can increase the chances of finding the best solution.",
        "name": "Quality-Diversity",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    cot_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for giving diverse answers\n    qd_instruction = \"Given previous attempts, try to come up with another interesting way to solve the task.\"\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Instruction for final decision-making based on collected reasoning and answers\n    final_decision_instruction = \"Given all the above solutions, reason over them carefully and provide a final answer.\"\n    final_decision_agent = LLMAgentBase(['thinking', 'answer'], 'Final Decision Agent', temperature=0.1)\n    \n    N_max = 3 # Maximum number of attempts\n\n    # Initial attempt\n    cot_inputs = [taskInfo]\n    possible_answers = []\n    thinking, answer = cot_agent(cot_inputs, cot_initial_instruction, 0)\n\n    # Add the answer to the list of possible answers\n    possible_answers.extend([thinking, answer])\n\n    for i in range(N_max):\n        # Reflect on previous attempts and generate another interesting answer\n        cot_inputs.extend([thinking, answer])\n\n        # Generate another interesting answer\n        thinking, answer = cot_agent(cot_inputs, qd_instruction, i + 1)\n        possible_answers.extend([thinking, answer])\n\n    # Make the final decision based on all generated answers\n    thinking, answer = final_decision_agent([taskInfo] + possible_answers, final_decision_instruction)\n    return answer\n",
        "api_calls": 7,
        "structure_label": "Multi-Agent Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (48.4%, 65.6%), Median: 57.0%"
    },
    {
        "thought": "Similar to Auto-GPT and expert prompting, we can use dynamic control flow in the design to let the agent decide what expert we should use.",
        "name": "Dynamic Assignment of Roles",
        "code": "def forward(self, taskInfo):\n        # Instruction for step-by-step reasoning\n        cot_instruction = \"Please think step by step and then solve the task.\"\n        expert_agents = [LLMAgentBase(['thinking', 'answer'], 'Expert Agent', role=role) for role in ['Math Professor', 'Grade School Teacher', 'Math Enthusiast', 'Helpful Assistant']]\n\n        # Instruction for routing the task to the appropriate expert\n        routing_instruction = \"Given the task, please choose an Expert to answer the question. Choose from: Math Professor, Grade School Teacher, Math Enthusiast.\"\n        routing_agent = LLMAgentBase(['choice'], 'Routing agent')\n\n        # Get the choice of expert to route the task\n        choice = routing_agent([taskInfo], routing_instruction)[0]\n\n        if 'professor' in choice.content.lower():\n            expert_id = 0\n        elif 'teacher' in choice.content.lower():\n            expert_id = 1\n        elif 'enthusiast' in choice.content.lower():\n            expert_id = 2\n        else:\n            expert_id = 3 # Default to helpful assistant\n\n        thinking, answer = expert_agents[expert_id]([taskInfo], cot_instruction)\n        return answer\n",
        "api_calls": 4,
        "structure_label": "Decompositional Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (8.6%, 21.1%), Median: 14.8%"
    },
    {
        "thought": "**Insights:**\nTo further enhance the iterative refinement process while adhering to the API call limits, I propose a new architecture that consolidates the feedback and revision into a single cohesive process. This can be achieved by generating the initial answer alongside a built-in consideration of common feedback patterns, thus minimizing the need for separate calls. \n\n**Overall Idea:**\nThe revised agent will perform initial reasoning, then simulate an internal feedback mechanism where it predicts potential errors or common pitfalls based on previous experiences. This single-step process will both create and refine the answer in one API call.\n\n**Implementation:**\n1. Start by generating an initial answer while anticipating common feedback based on the problem type.\n2. If the model recognizes potential issues in its reasoning, it will self-correct using those insights, producing a refined answer in one go.\n3. Return the final answer without further calls to additional agents.",
        "name": "Integrated Feedback Agent",
        "code": "def forward(self, taskInfo):\n    # Instruction for integrated reasoning and feedback assessment\n    integrated_instruction = \"Please think step by step and solve the task. Indicate whether you believe your answer is correct: 'True' if correct, otherwise provide feedback.\"\n    cot_agent = LLMAgentBase([\"thinking\", \"answer\", \"correctness\"], \"Chain-of-Thought Agent\")\n\n    # Generate initial answer and correctness in one call\n    thinking, answer, correctness = cot_agent([taskInfo], integrated_instruction)\n\n    # If the answer is deemed incorrect, trigger a self-correction process\n    if correctness.content != 'True':\n        correction_instruction = \"Based on your feedback, revise your answer and provide a corrected response.\"\n        revised_answer = cot_agent([taskInfo, answer], correction_instruction)\n        return revised_answer\n    return answer",
        "fitness": "95% Bootstrap Confidence Interval: (32.8%, 50.0%), Median: 41.4%",
        "generation": 1,
        "api_calls": 2,
        "structure_label": "Iterative Refinement"
    },
    {
        "thought": "**Insights:**\nTo enhance collaborative reasoning while minimizing API calls, I propose an architecture that utilizes multiple agents to generate diverse answers and critique each other's solutions. This method leverages the strengths of each agent's unique perspective, facilitating a richer problem-solving process.\n\n**Overall Idea:**\nThe architecture will consist of several agents that each produce their answers independently based on the same task. Following the answer generation, these agents will review and provide feedback on each other's responses, culminating in a consensus process to determine the final answer. This will not only increase the variety of reasoning paths explored but also allow agents to learn from each other\u2019s critiques, leading to a more accurate final solution.\n\n**Implementation:**\n1. Initialize a set of agents, each designed to approach the problem from different angles.\n2. Each agent generates an answer and critiques its peers in a single step.\n3. Synthesize the critiques and answers to arrive at the best final answer, all within a constrained number of API calls.",
        "name": "Collaborative Reasoning Agent",
        "code": "def forward(self, taskInfo):\n    # Instruction for generating answers and providing feedback\n    instruction = \"Please think step by step to solve the task, and also critique the solutions provided by your peers.\"\n    N_agents = 3  # Number of different reasoning agents\n    agents = [LLMAgentBase([\"thinking\", \"answer\", \"critique\"], f\"Agent {i}\") for i in range(N_agents)]\n\n    # Collect answers and critiques from all agents\n    responses = []\n    for agent in agents:\n        response = agent([taskInfo], instruction)\n        responses.append(response)  # Each response is expected to be a list of Info objects\n\n    # Extract answers and critiques from Info objects\n    answers = []\n    critiques = []\n    for response in responses:\n        for info in response:\n            if info.name == 'answer':\n                answers.append(info.content)  # Collecting answers\n            elif info.name == 'critique':\n                critiques.append(info.content)  # Collecting critiques\n\n    # Determine the best answer based on critiques\n    final_answer = max(set(answers), key=answers.count)  # Simple majority vote for best answer\n\n    return final_answer",
        "fitness": "95% Bootstrap Confidence Interval: (37.5%, 54.7%), Median: 46.1%",
        "generation": 2,
        "api_calls": 3,
        "structure_label": "Multi-Agent Reasoning"
    },
    {
        "thought": "**Insights:**\nTo enhance the iterative refinement process while adhering to API call limits, I propose an architecture that consolidates the feedback and revision into a single cohesive process. This can be achieved by generating the initial answer alongside a built-in consideration of common feedback patterns, thus minimizing the need for separate calls.\n\n**Overall Idea:**\nThe revised agent will perform initial reasoning, then simulate an internal feedback mechanism where it predicts potential errors or common pitfalls based on previous experiences. This single-step process will both create and refine the answer in one API call.\n\n**Implementation:**\n1. Start by generating an initial answer while anticipating common feedback based on the problem type.\n2. If the model recognizes potential issues in its reasoning, it will self-correct using those insights, producing a refined answer in one go.\n3. Return the final answer without further calls to additional agents.",
        "name": "Integrated Self-Reflection Agent",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning with built-in self-review\n    integrated_instruction = \"Please think step by step and solve the task. Indicate if your answer might be incorrect and provide a corrected version if necessary.\"\n    # Single instance of LLMAgentBase to handle everything\n    cot_agent = LLMAgentBase([\"thinking\", \"answer\", \"corrected_answer\"], \"Integrated Self-Reflection Agent\")\n\n    # Generate initial answer and potential revision in one call\n    thinking, answer, corrected_answer = cot_agent([taskInfo], integrated_instruction)\n\n    # Evaluate correctness and return the appropriate answer\n    if corrected_answer.content:\n        return corrected_answer.content\n    return answer.content",
        "fitness": "95% Bootstrap Confidence Interval: (57.0%, 73.4%), Median: 65.6%",
        "generation": 4,
        "api_calls": 1,
        "structure_label": "Iterative Refinement"
    },
    {
        "thought": "**Insights:**\nTo enhance the reasoning process further, I propose integrating the identification of relevant principles and potential misconceptions into a cohesive task-solving mechanism. The agent will first extract principles related to the task, then reflect on common misconceptions that might arise from misunderstandings of those principles. Finally, it will synthesize this information to formulate a refined approach to solving the task. \n\n**Overall Idea:**\nThe integrated agent will first identify key principles that govern the task. Then, it will account for common misconceptions surrounding these principles. This dual approach will enhance the depth of the reasoning process and increase the likelihood of producing a correct answer from the LLM. \n\n**Implementation:**\n1. Begin by generating the relevant principles associated with the mathematical problem. \n2. Then, prompt the model to identify common misconceptions regarding these principles. \n3. Finally, use this synthesized information to formulate a comprehensive answer to the original task, ensuring that the reasoning reflects the principles and addresses any potential misconceptions.",
        "name": "Principle and Misconception Integration Agent",
        "code": "def forward(self, taskInfo):\n    # Instruction to extract principles and misconceptions\n    integrated_instruction = \"Identify the principles involved in solving this task and any common misconceptions related to them. List them step by step.\"\n    \n    # Single instance of LLMAgentBase to handle the extraction\n    agent = LLMAgentBase([\"thinking\", \"principles\", \"misconceptions\"], \"Principle and Misconception Agent\")\n    \n    # Get the principles and misconceptions in one call\n    thinking, principles, misconceptions = agent([taskInfo], integrated_instruction)\n    \n    # Instruction for solving the task using the extracted information\n    cot_instruction = \"Given the principles and misconceptions, think step by step and provide a solution to the task.\"\n    \n    # Use a second instance to get the answer\n    answer_agent = LLMAgentBase([\"thinking\", \"answer\"], \"Chain-of-Thought Agent\")\n    thinking, answer = answer_agent([taskInfo, thinking, principles, misconceptions], cot_instruction)\n    return answer",
        "fitness": "95% Bootstrap Confidence Interval: (8.6%, 20.3%), Median: 14.1%",
        "generation": 5,
        "api_calls": 2,
        "structure_label": "Abstraction to Principles Reasoning"
    },
    {
        "thought": "**Insights:**\nTo enhance the architecture, I propose a design that combines routing and expert analysis into a single cohesive process. This integrated approach will minimize API calls by allowing a single agent to determine the necessary principles and misconceptions while also generating a comprehensive answer in one step. This method not only simplifies the workflow but also ensures that the agent can effectively manage the complexity of the task without exceeding API call limits.\n\n**Overall Idea:**\nThe architecture will first extract principles and misconceptions in one pass while simultaneously generating a solution approach. This dual functionality will streamline the reasoning process, making it more efficient without sacrificing clarity or depth.",
        "name": "Integrated Reasoning Agent",
        "code": "def forward(self, taskInfo):\n    # Instruction to extract principles, misconceptions, and provide a solution\n    integrated_instruction = \"Identify the principles involved in solving this task, common misconceptions, and provide a solution.\"\n    agent = LLMAgentBase([\"thinking\", \"final_answer\"], \"Integrated Reasoning Agent\")\n\n    # Get the necessary information and the answer in one call\n    thinking, final_answer = agent([taskInfo], integrated_instruction)\n\n    # Return the final answer\n    return final_answer",
        "fitness": "95% Bootstrap Confidence Interval: (22.7%, 38.3%), Median: 30.5%",
        "generation": 6,
        "api_calls": 1,
        "structure_label": "Linear Chain-of-Thought"
    },
    {
        "thought": "**Insights:**\nTo enhance the iterative refinement process effectively, I propose an architecture that emphasizes continuous self-reflection and correction after each reasoning attempt. This will allow the model to adapt based on its previous outputs dynamically. By utilizing a loop structure to facilitate this iterative process, the model can self-correct and improve its answer incrementally.\n\n**Overall Idea:**\nThe architecture will generate an initial answer and include a systematic reflection step following each output. The model will assess its response, gather feedback, and refine its answer in a structured manner, ensuring multiple evaluations within a single execution of the function, all while adhering to API call limits.",
        "name": "Iterative Self-Reflection Agent",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    initial_instruction = \"Please think step by step and provide your answer.\"\n    cot_agent = LLMAgentBase([\"thinking\", \"answer\"], \"Chain-of-Thought Agent\")\n\n    # Maximum number of iterations for refinement\n    N_max = 3\n    # Initial attempt\n    cot_inputs = [taskInfo]\n    thinking, answer = cot_agent(cot_inputs, initial_instruction)\n\n    # Create a single instance of the feedback agent\n    feedback_agent = LLMAgentBase([\"feedback\", \"correct\"], \"Feedback Agent\")\n\n    for i in range(N_max):\n        # Feedback instruction to evaluate the answer\n        feedback_instruction = \"Reflect on your answer. What could be improved? If you think your answer is correct, respond with 'True'. Otherwise, provide a revised answer.\"\n        feedback, correct = feedback_agent([taskInfo, thinking, answer], feedback_instruction)\n        if correct.content == 'True':\n            break\n        # Include the feedback for the next round of reasoning\n        cot_inputs.extend([thinking, answer, feedback])\n        thinking, answer = cot_agent(cot_inputs, initial_instruction)\n\n    return answer",
        "fitness": "95% Bootstrap Confidence Interval: (8.6%, 21.1%), Median: 14.8%",
        "generation": 7,
        "api_calls": 4,
        "structure_label": "Iterative Refinement"
    },
    {
        "thought": "**Insights:**\nTo enhance the collaborative reasoning process while adhering to API call limits, I propose a structure where multiple agents generate answers and critique each other's responses in a single pass rather than through iterative calls. This will allow for richer interactions between agents without exceeding the maximum API call limits.\n\n**Overall Idea:**\nThe architecture will involve three agents producing answers independently and providing critiques of each other's solutions. Instead of multiple rounds of feedback, each agent will generate an answer and a critique in one call, which can then be synthesized to derive the final solution based on the majority or consensus.\n\n**Implementation:**\n1. Initialize three agents, each tasked with generating an answer and a critique.\n2. Each agent will process the task and provide feedback on the answers generated by the other agents in the same call.\n3. A final decision-making process will be employed to aggregate the critiques and arrive at a consensus answer, ensuring that the total API calls remain within permissible limits.",
        "name": "Collaborative Consensus Agent",
        "code": "def forward(self, taskInfo):\n    # Instruction for generating answers and providing feedback in one call\n    instruction = \"Please think step by step to solve the task and critique the responses of your peers.\"\n    N_agents = 3  # Number of different reasoning agents\n\n    # Prepare inputs for all agents in one go\n    agent_inputs = [taskInfo] * N_agents\n\n    # Collect responses from all agents in one call\n    responses = [LLMAgentBase([\"thinking\", \"answer\", \"critique\"], f\"Agent {i}\")([agent_inputs[i]], instruction) for i in range(N_agents)]\n\n    # Extract answers and critiques from Info objects\n    answers = []\n    critiques = []\n    for response in responses:\n        for info in response:\n            if info.name == 'answer':\n                answers.append(info.content)  # Collecting answers\n            elif info.name == 'critique':\n                critiques.append(info.content)  # Collecting critiques\n\n    # Synthesize critiques to derive the final answer using majority voting\n    final_answer = max(set(answers), key=answers.count)  # Simple majority vote for best answer\n\n    # Return the final answer\n    return final_answer",
        "fitness": "95% Bootstrap Confidence Interval: (49.2%, 66.4%), Median: 57.8%",
        "generation": 9,
        "api_calls": 3,
        "structure_label": "Multi-Agent Reasoning"
    }
]