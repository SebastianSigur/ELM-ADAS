[
    {
        "thought": "By encouraging the LLM to think step by step rather than directly outputting an answer, chain-of-thought reasoning enables complex problem-solving through intermediate steps. This practice improves the model's ability to handle tasks that require deeper reasoning and provides insight into its decision-making process.",
        "name": "Chain-of-Thought",
        "code": "def forward(self, taskInfo):\n    # Instruction for the Chain-of-Thought (CoT) approach\n    # It is an important practice that allows the LLM to think step by step before solving the task.\n    cot_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instantiate a new LLM agent specifically for CoT\n    # To allow LLM thinking before answering, we need to set an additional output field 'thinking'.\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Prepare the inputs for the CoT agent\n    # The input should be a list of Info, and the first one is often the taskInfo\n    cot_agent_inputs = [taskInfo]\n\n    # Get the response from the CoT agent\n    thinking, answer = cot_agent(cot_agent_inputs, cot_instruction)\n\n    # Return only the final answer\n    return answer\n",
        "api_calls": 1,
        "structure_label": "Chain-of-Thought Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (10.9%, 24.2%), Median: 17.2%",
        "test_fitness": "95% Bootstrap Confidence Interval: (12.0%, 16.9%), Median: 14.4%"
    },
    {
        "thought": "While an LLM can arrive at the correct answer, its reasoning may vary. By repeatedly asking the same question with high temperature settings, we can generate different reasoning paths. We then combine multiple answers from these Chain-of-Thought (CoT) agents to produce a more accurate final answer through ensembling.",
        "name": "Self-Consistency with Chain-of-Thought",
        "code": "def forward(self, taskInfo):\n    # Instruction for step-by-step reasoning\n    cot_instruction = \"Please think step by step and then solve the task.\"\n    N = 5 # Number of CoT agents\n\n    # Initialize multiple CoT agents with a higher temperature for varied reasoning\n    cot_agents = [LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent', temperature=0.8) for _ in range(N)]\n\n    # Majority voting function to select the most common answer\n    from collections import Counter\n    def majority_voting(answers):\n        return Counter(answers).most_common(1)[0][0]\n    \n    possible_answers = []\n    for i in range(N):\n        thinking, answer = cot_agents[i]([taskInfo], cot_instruction)\n        possible_answers.append(answer.content)\n\n    # Ensembling the answers from multiple CoT agents\n    answer = majority_voting(possible_answers)\n    return answer  \n",
        "api_calls": 5,
        "structure_label": "Multi-Agent Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (7.8%, 19.5%), Median: 13.3%",
        "test_fitness": "95% Bootstrap Confidence Interval: (10.4%, 15.0%), Median: 12.6%"
    },
    {
        "thought": "To enhance its performance, an LLM can iteratively improve its answer based on feedback. By reflecting on its previous attempts and incorporating feedback, the model can refine its reasoning and provide a more accurate solution.",
        "name": "Self-Refine (Reflexion)",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    cot_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for reflecting on previous attempts and feedback to improve\n    cot_reflect_instruction = \"Given previous attempts and feedback, carefully consider where you could go wrong in your latest attempt. Using insights from previous attempts, try to solve the task better.\"\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Instruction for providing feedback and correcting the answer\n    critic_instruction = \"Please review the answer above and criticize on where might be wrong. If you are absolutely sure it is correct, output 'True' in 'correct'.\"\n    critic_agent = LLMAgentBase(['feedback', 'correct'], 'Critic Agent')\n    \n    N_max = 5 # Maximum number of attempts\n\n    # Initial attempt\n    cot_inputs = [taskInfo]\n    thinking, answer = cot_agent(cot_inputs, cot_initial_instruction, 0)\n\n    for i in range(N_max):\n        # Get feedback and correct status from the critic\n        feedback, correct = critic_agent([taskInfo, thinking, answer], critic_instruction, i)\n        if correct.content == 'True':\n            break\n            \n        # Add feedback to the inputs for the next iteration\n        cot_inputs.extend([thinking, answer, feedback])\n\n        # Reflect on previous attempts and refine the answer\n        thinking, answer = cot_agent(cot_inputs, cot_reflect_instruction, i + 1)\n    return answer\n",
        "api_calls": 7,
        "structure_label": "Self-Reflection Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (12.5%, 25.8%), Median: 18.8%",
        "test_fitness": "95% Bootstrap Confidence Interval: (15.8%, 21.1%), Median: 18.4%"
    },
    {
        "thought": "By letting different LLMs debate with each other, we can leverage their diverse perspectives to find better solutions for tasks.",
        "name": "LLM Debate",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    debate_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for debating and updating the solution based on other agents' solutions\n    debate_instruction = \"Given solutions to the problem from other agents, consider their opinions as additional advice. Please think carefully and provide an updated answer.\"\n    \n    # Initialize debate agents with different roles and a moderate temperature for varied reasoning\n    debate_agents = [LLMAgentBase(['thinking', 'answer'], 'Debate Agent', temperature=0.8, role=role) for role in ['Math Professor', 'Grade School Teacher', 'Math Enthusiast']]\n\n    # Instruction for final decision-making based on all debates and solutions\n    final_decision_instruction = \"Given all the above thinking and answers, reason over them carefully and provide a final answer.\"\n    final_decision_agent = LLMAgentBase(['thinking', 'answer'], 'Final Decision Agent', temperature=0.1)\n\n    max_round = 2 # Maximum number of debate rounds\n    all_thinking = [[] for _ in range(max_round)]\n    all_answer = [[] for _ in range(max_round)]\n\n    # Perform debate rounds\n    for r in range(max_round):\n        for i in range(len(debate_agents)):\n            if r == 0:\n                thinking, answer = debate_agents[i]([taskInfo], debate_initial_instruction)\n            else:\n                input_infos = [taskInfo] + [all_thinking[r-1][i]] + all_thinking[r-1][:i] + all_thinking[r-1][i+1:]\n                thinking, answer = debate_agents[i](input_infos, debate_instruction)\n            all_thinking[r].append(thinking)\n            all_answer[r].append(answer)\n    \n    # Make the final decision based on all debate results and solutions\n    thinking, answer = final_decision_agent([taskInfo] + all_thinking[max_round-1] + all_answer[max_round-1], final_decision_instruction)\n    return answer\n",
        "api_calls": 9,
        "structure_label": "Multi-Agent Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (47.7%, 64.8%), Median: 56.2%",
        "test_fitness": "95% Bootstrap Confidence Interval: (42.8%, 49.8%), Median: 46.2%"
    },
    {
        "thought": "Let LLM first think about the principles involved in solving this task which could be helpful. By understanding the underlying principles, the model can better reason through the problem and provide a more accurate solution.",
        "name": "Step-back Abstraction",
        "code": "def forward(self, taskInfo):\n        # Instruction for understanding the principles involved in the task\n        principle_instruction = \"What are the physics, chemistry or biology principles and concepts involved in solving this task? First think step by step. Then list all involved principles and explain them.\"\n        \n        # Instruction for solving the task based on the principles\n        cot_instruction = \"Given the question and the involved principle behind the question, think step by step and then solve the task.\"\n        \n        # Instantiate LLM agents\n        principle_agent = LLMAgentBase(['thinking', 'principle'], 'Principle Agent')\n        cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n        \n        # Get the principles involved in the task\n        thinking, principle = principle_agent([taskInfo], principle_instruction)\n\n        # Use the principles to solve the task\n        thinking, answer = cot_agent([taskInfo, thinking, principle], cot_instruction)\n        return answer\n",
        "api_calls": 2,
        "structure_label": "Abstraction to Principles Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (18.0%, 32.8%), Median: 25.0%",
        "test_fitness": "95% Bootstrap Confidence Interval: (23.8%, 29.9%), Median: 26.8%"
    },
    {
        "thought": "Similar to Quality-Diversity methods, let LLM generate multiple diverse interesting solutions could help. By encouraging the model to explore different reasoning paths, we can increase the chances of finding the best solution.",
        "name": "Quality-Diversity",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    cot_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for giving diverse answers\n    qd_instruction = \"Given previous attempts, try to come up with another interesting way to solve the task.\"\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Instruction for final decision-making based on collected reasoning and answers\n    final_decision_instruction = \"Given all the above solutions, reason over them carefully and provide a final answer.\"\n    final_decision_agent = LLMAgentBase(['thinking', 'answer'], 'Final Decision Agent', temperature=0.1)\n    \n    N_max = 3 # Maximum number of attempts\n\n    # Initial attempt\n    cot_inputs = [taskInfo]\n    possible_answers = []\n    thinking, answer = cot_agent(cot_inputs, cot_initial_instruction, 0)\n\n    # Add the answer to the list of possible answers\n    possible_answers.extend([thinking, answer])\n\n    for i in range(N_max):\n        # Reflect on previous attempts and generate another interesting answer\n        cot_inputs.extend([thinking, answer])\n\n        # Generate another interesting answer\n        thinking, answer = cot_agent(cot_inputs, qd_instruction, i + 1)\n        possible_answers.extend([thinking, answer])\n\n    # Make the final decision based on all generated answers\n    thinking, answer = final_decision_agent([taskInfo] + possible_answers, final_decision_instruction)\n    return answer\n",
        "api_calls": 7,
        "structure_label": "Multi-Agent Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (46.1%, 63.3%), Median: 54.7%",
        "test_fitness": "95% Bootstrap Confidence Interval: (48.6%, 55.6%), Median: 52.1%"
    },
    {
        "thought": "Similar to Auto-GPT and expert prompting, we can use dynamic control flow in the design to let the agent decide what expert we should use.",
        "name": "Dynamic Assignment of Roles",
        "code": "def forward(self, taskInfo):\n        # Instruction for step-by-step reasoning\n        cot_instruction = \"Please think step by step and then solve the task.\"\n        expert_agents = [LLMAgentBase(['thinking', 'answer'], 'Expert Agent', role=role) for role in ['Math Professor', 'Grade School Teacher', 'Math Enthusiast', 'Helpful Assistant']]\n\n        # Instruction for routing the task to the appropriate expert\n        routing_instruction = \"Given the task, please choose an Expert to answer the question. Choose from: Math Professor, Grade School Teacher, Math Enthusiast.\"\n        routing_agent = LLMAgentBase(['choice'], 'Routing agent')\n\n        # Get the choice of expert to route the task\n        choice = routing_agent([taskInfo], routing_instruction)[0]\n\n        if 'professor' in choice.content.lower():\n            expert_id = 0\n        elif 'teacher' in choice.content.lower():\n            expert_id = 1\n        elif 'enthusiast' in choice.content.lower():\n            expert_id = 2\n        else:\n            expert_id = 3 # Default to helpful assistant\n\n        thinking, answer = expert_agents[expert_id]([taskInfo], cot_instruction)\n        return answer\n",
        "api_calls": 4,
        "structure_label": "Multi-Agent Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (8.6%, 20.3%), Median: 14.1%",
        "test_fitness": "95% Bootstrap Confidence Interval: (13.4%, 18.4%), Median: 15.9%"
    },
    {
        "thought": "**Insights:**\nTo enhance the existing architecture, I propose to streamline the solution process further by introducing an iterative refinement mechanism that allows for more precise feedback incorporation. This design will still extract principles but will refine the generated solutions through multiple iterations, ensuring the agent learns from its critiques without exceeding the number of allowed API calls. \n\n**Overall Idea:**\nThe new architecture will involve extracting principles, generating variations, and iteratively refining the answers based on feedback in a more dynamic and adaptive manner. This will allow for a deeper exploration of the principles while ensuring that the solution process is efficient and effective.",
        "name": "Iterative Principle-Based Reasoning",
        "code": "def forward(self, taskInfo):\n    # Instruction for understanding the principles involved in the task\n    principle_instruction = \"Identify the principles involved in solving this mathematical problem.\"\n    # Instruction for generating diverse versions of the problem based on the principles\n    variation_instruction = \"Generate alternative formulations of the problem that maintain the core mathematical concepts.\"\n    # Instruction for solving the variations\n    solution_instruction = \"For each variation of the question, provide a clear step-by-step solution.\"\n    # Instruction for critique\n    critique_instruction = \"Review the provided answers and give detailed feedback on their correctness and areas for improvement.\"\n\n    # Extract principles\n    principle_agent = LLMAgentBase(['thinking', 'principles'], 'Principle Extraction Agent')\n    thinking, principles = principle_agent([taskInfo], principle_instruction)\n\n    # Generate variations based on the extracted principles\n    variation_agent = LLMAgentBase(['thinking', 'variations'], 'Variation Generation Agent')\n    thinking, variations = variation_agent([taskInfo, principles], variation_instruction)\n\n    # Solve the variations to get initial answers\n    solution_agent = LLMAgentBase(['thinking', 'answers'], 'Batch Solution Agent')\n    variations_as_str = [str(variation) for variation in variations]\n    combined_variation_instruction = \", \".join(variations_as_str)\n    initial_answers = solution_agent([combined_variation_instruction], solution_instruction)\n\n    # Critique the answers provided\n    critique_agent = LLMAgentBase(['thinking', 'feedback'], 'Critique Agent')\n    feedback = critique_agent(initial_answers, critique_instruction)\n\n    # Aggregate feedback insights\n    valid_feedback = [fb.content for fb in feedback if hasattr(fb, 'content')]\n    if valid_feedback:\n        combined_feedback = \"Consider these insights: \" + \", \".join(valid_feedback)\n        final_answer_instruction = \"Given the feedback, refine your final answer: \" + combined_feedback\n        final_decision_agent = LLMAgentBase(['thinking', 'final_answer'], 'Final Decision Agent')\n        thinking, final_answer = final_decision_agent([taskInfo, combined_feedback], final_answer_instruction)\n        return final_answer\n    return 'No valid insights found.'",
        "fitness": "95% Bootstrap Confidence Interval: (43.0%, 60.2%), Median: 51.6%",
        "generation": 17,
        "api_calls": 5,
        "structure_label": "Self-Reflection Reasoning",
        "test_fitness": "95% Bootstrap Confidence Interval: (42.1%, 49.1%), Median: 45.6%"
    },
    {
        "thought": "**Insights:**\nWhile the previous architecture leverages multiple agents with dynamic roles, a more effective approach might be to streamline the feedback process into a single cohesive phase. This architecture will utilize principle extraction followed by a collaborative batch solution and feedback loop to refine answers. By consolidating the critique process into a collective discussion among agents, we can reduce API calls and enhance the robustness of the final answer.\n\n**Overall Idea:**\nThe new design will extract principles, generate variations, and then have all agents collaborate to critique and refine their answers in a single pass, leading to a more efficient use of API calls while maintaining diverse reasoning.\n\n**Implementation:**\n1. Extract principles relevant to the task.\n2. Generate diverse formulations based on the principles.\n3. All agents will participate in a collective critique and refinement of the generated answers.\n4. Finalize the answer based on the refined insights from all agents.",
        "name": "Collaborative Reflection Agent",
        "code": "def forward(self, taskInfo):\n    # Instruction for understanding the principles involved in the task\n    principle_instruction = \"Identify the principles involved in solving this mathematical problem.\"\n    # Instruction for generating diverse versions of the problem based on the principles\n    variation_instruction = \"Generate alternative formulations of the problem that maintain the core mathematical concepts.\"\n    # Instruction for solving the variations\n    solution_instruction = \"For each variation of the question, provide a clear step-by-step solution.\"\n    # Instruction for critique\n    critique_instruction = \"Review the provided answers and give detailed feedback on their correctness and areas for improvement.\"\n\n    # First, extract principles\n    principle_agent = LLMAgentBase(['thinking', 'principles'], 'Principle Extraction Agent')\n    thinking, principles = principle_agent([taskInfo], principle_instruction)\n\n    # Next, generate variations based on the extracted principles\n    variation_agent = LLMAgentBase(['thinking', 'variations'], 'Variation Generation Agent')\n    thinking, variations = variation_agent([taskInfo, principles], variation_instruction)\n\n    # Solve the variations to get initial answers\n    solution_agent = LLMAgentBase(['thinking', 'answers'], 'Batch Solution Agent')\n    variations_as_str = [str(variation) for variation in variations]\n    combined_variation_instruction = \", \".join(variations_as_str)\n    initial_answers = solution_agent([combined_variation_instruction], solution_instruction)\n\n    # Critique the answers provided\n    critique_agent = LLMAgentBase(['thinking', 'feedback'], 'Critique Agent')\n    feedback = critique_agent(initial_answers, critique_instruction)\n\n    # Aggregate feedback and derive the final answer\n    valid_feedback = [fb.content for fb in feedback if hasattr(fb, 'content')]\n    if valid_feedback:\n        refined_insights = \"Consider these insights: \" + \", \".join(valid_feedback)\n        final_answer_instruction = \"Given the insights, provide your final answer to the task.\"\n        final_decision_agent = LLMAgentBase(['thinking', 'final_answer'], 'Final Decision Agent')\n        thinking, final_answer = final_decision_agent([taskInfo, refined_insights], final_answer_instruction)\n        return final_answer\n    return 'No valid insights found.'",
        "fitness": "95% Bootstrap Confidence Interval: (39.8%, 57.0%), Median: 48.4%",
        "generation": 13,
        "api_calls": 5,
        "structure_label": "Multi-Agent Reasoning",
        "test_fitness": "95% Bootstrap Confidence Interval: (44.8%, 51.7%), Median: 48.2%"
    },
    {
        "thought": "**Insights:**\nTo create a more innovative architecture while staying within the few API calls limit, I propose a design that integrates the reasoning and final answer generation into a single LLMAgentBase call. This approach allows for a step-by-step explanation along with the answer, thereby simplifying the process and reducing API usage. By providing clear instructions to the LLM to think through the problem comprehensively, we can achieve a robust solution without the complexity of multiple iterations and feedback loops.\n\n**Overall Idea:**\nThe architecture will include a single prompt that instructs the LLM to reason through the problem step-by-step and provide the final answer within the same call. This eliminates the need for multiple agent calls while ensuring that the reasoning is transparent and easy to follow.",
        "name": "Integrated Reasoning and Answer Generation",
        "code": "def forward(self, taskInfo):\n    # Instruction to reason step by step and provide the final answer\n    integrated_instruction = \"Please think through each step of this mathematical problem, providing detailed reasoning, and then give your final answer.\"\n\n    # Instantiate a new LLM agent for integrated reasoning and answer generation\n    integrated_agent = LLMAgentBase([\"thinking\", \"answer\"], \"Integrated Reasoning Agent\")\n\n    # Prepare the inputs for the integrated agent\n    integrated_inputs = [taskInfo]\n\n    # Get the response from the integrated agent\n    response = integrated_agent(integrated_inputs, integrated_instruction)\n\n    # Return the final answer\n    return response[1]  # Assuming the answer is the second element in the response",
        "fitness": "95% Bootstrap Confidence Interval: (15.6%, 30.5%), Median: 22.7%",
        "generation": 19,
        "api_calls": 1,
        "structure_label": "Chain-of-Thought Reasoning",
        "test_fitness": "95% Bootstrap Confidence Interval: (16.6%, 22.1%), Median: 19.4%"
    }
]