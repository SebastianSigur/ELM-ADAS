[
    {
        "thought": "By encouraging the LLM to think step by step rather than directly outputting an answer, chain-of-thought reasoning enables complex problem-solving through intermediate steps. This practice improves the model's ability to handle tasks that require deeper reasoning and provides insight into its decision-making process.",
        "name": "Chain-of-Thought",
        "code": "def forward(self, taskInfo):\n    # Instruction for the Chain-of-Thought (CoT) approach\n    # It is an important practice that allows the LLM to think step by step before solving the task.\n    cot_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instantiate a new LLM agent specifically for CoT\n    # To allow LLM thinking before answering, we need to set an additional output field 'thinking'.\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Prepare the inputs for the CoT agent\n    # The input should be a list of Info, and the first one is often the taskInfo\n    cot_agent_inputs = [taskInfo]\n\n    # Get the response from the CoT agent\n    thinking, answer = cot_agent(cot_agent_inputs, cot_instruction)\n\n    # Return only the final answer\n    return answer\n",
        "api_calls": 1,
        "structure_label": "Chain-of-Thought Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (10.9%, 24.2%), Median: 17.2%",
        "test_fitness": "95% Bootstrap Confidence Interval: (12.2%, 17.1%), Median: 14.6%"
    },
    {
        "thought": "While an LLM can arrive at the correct answer, its reasoning may vary. By repeatedly asking the same question with high temperature settings, we can generate different reasoning paths. We then combine multiple answers from these Chain-of-Thought (CoT) agents to produce a more accurate final answer through ensembling.",
        "name": "Self-Consistency with Chain-of-Thought",
        "code": "def forward(self, taskInfo):\n    # Instruction for step-by-step reasoning\n    cot_instruction = \"Please think step by step and then solve the task.\"\n    N = 5 # Number of CoT agents\n\n    # Initialize multiple CoT agents with a higher temperature for varied reasoning\n    cot_agents = [LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent', temperature=0.8) for _ in range(N)]\n\n    # Majority voting function to select the most common answer\n    from collections import Counter\n    def majority_voting(answers):\n        return Counter(answers).most_common(1)[0][0]\n    \n    possible_answers = []\n    for i in range(N):\n        thinking, answer = cot_agents[i]([taskInfo], cot_instruction)\n        possible_answers.append(answer.content)\n\n    # Ensembling the answers from multiple CoT agents\n    answer = majority_voting(possible_answers)\n    return answer  \n",
        "api_calls": 5,
        "structure_label": "Multi-Agent Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (9.4%, 21.9%), Median: 15.6%",
        "test_fitness": "95% Bootstrap Confidence Interval: (10.5%, 15.1%), Median: 12.8%"
    },
    {
        "thought": "To enhance its performance, an LLM can iteratively improve its answer based on feedback. By reflecting on its previous attempts and incorporating feedback, the model can refine its reasoning and provide a more accurate solution.",
        "name": "Self-Refine (Reflexion)",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    cot_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for reflecting on previous attempts and feedback to improve\n    cot_reflect_instruction = \"Given previous attempts and feedback, carefully consider where you could go wrong in your latest attempt. Using insights from previous attempts, try to solve the task better.\"\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Instruction for providing feedback and correcting the answer\n    critic_instruction = \"Please review the answer above and criticize on where might be wrong. If you are absolutely sure it is correct, output 'True' in 'correct'.\"\n    critic_agent = LLMAgentBase(['feedback', 'correct'], 'Critic Agent')\n    \n    N_max = 5 # Maximum number of attempts\n\n    # Initial attempt\n    cot_inputs = [taskInfo]\n    thinking, answer = cot_agent(cot_inputs, cot_initial_instruction, 0)\n\n    for i in range(N_max):\n        # Get feedback and correct status from the critic\n        feedback, correct = critic_agent([taskInfo, thinking, answer], critic_instruction, i)\n        if correct.content == 'True':\n            break\n            \n        # Add feedback to the inputs for the next iteration\n        cot_inputs.extend([thinking, answer, feedback])\n\n        # Reflect on previous attempts and refine the answer\n        thinking, answer = cot_agent(cot_inputs, cot_reflect_instruction, i + 1)\n    return answer\n",
        "api_calls": 7,
        "structure_label": "Self-Reflection Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (8.6%, 21.1%), Median: 14.8%",
        "test_fitness": "95% Bootstrap Confidence Interval: (14.8%, 20.0%), Median: 17.4%"
    },
    {
        "thought": "By letting different LLMs debate with each other, we can leverage their diverse perspectives to find better solutions for tasks.",
        "name": "LLM Debate",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    debate_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for debating and updating the solution based on other agents' solutions\n    debate_instruction = \"Given solutions to the problem from other agents, consider their opinions as additional advice. Please think carefully and provide an updated answer.\"\n    \n    # Initialize debate agents with different roles and a moderate temperature for varied reasoning\n    debate_agents = [LLMAgentBase(['thinking', 'answer'], 'Debate Agent', temperature=0.8, role=role) for role in ['Math Professor', 'Grade School Teacher', 'Math Enthusiast']]\n\n    # Instruction for final decision-making based on all debates and solutions\n    final_decision_instruction = \"Given all the above thinking and answers, reason over them carefully and provide a final answer.\"\n    final_decision_agent = LLMAgentBase(['thinking', 'answer'], 'Final Decision Agent', temperature=0.1)\n\n    max_round = 2 # Maximum number of debate rounds\n    all_thinking = [[] for _ in range(max_round)]\n    all_answer = [[] for _ in range(max_round)]\n\n    # Perform debate rounds\n    for r in range(max_round):\n        for i in range(len(debate_agents)):\n            if r == 0:\n                thinking, answer = debate_agents[i]([taskInfo], debate_initial_instruction)\n            else:\n                input_infos = [taskInfo] + [all_thinking[r-1][i]] + all_thinking[r-1][:i] + all_thinking[r-1][i+1:]\n                thinking, answer = debate_agents[i](input_infos, debate_instruction)\n            all_thinking[r].append(thinking)\n            all_answer[r].append(answer)\n    \n    # Make the final decision based on all debate results and solutions\n    thinking, answer = final_decision_agent([taskInfo] + all_thinking[max_round-1] + all_answer[max_round-1], final_decision_instruction)\n    return answer\n",
        "api_calls": 9,
        "structure_label": "Multi-Agent Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (39.1%, 56.2%), Median: 47.7%",
        "test_fitness": "95% Bootstrap Confidence Interval: (44.5%, 51.5%), Median: 48.0%"
    },
    {
        "thought": "Let LLM first think about the principles involved in solving this task which could be helpful. By understanding the underlying principles, the model can better reason through the problem and provide a more accurate solution.",
        "name": "Step-back Abstraction",
        "code": "def forward(self, taskInfo):\n        # Instruction for understanding the principles involved in the task\n        principle_instruction = \"What are the physics, chemistry or biology principles and concepts involved in solving this task? First think step by step. Then list all involved principles and explain them.\"\n        \n        # Instruction for solving the task based on the principles\n        cot_instruction = \"Given the question and the involved principle behind the question, think step by step and then solve the task.\"\n        \n        # Instantiate LLM agents\n        principle_agent = LLMAgentBase(['thinking', 'principle'], 'Principle Agent')\n        cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n        \n        # Get the principles involved in the task\n        thinking, principle = principle_agent([taskInfo], principle_instruction)\n\n        # Use the principles to solve the task\n        thinking, answer = cot_agent([taskInfo, thinking, principle], cot_instruction)\n        return answer\n",
        "api_calls": 2,
        "structure_label": "Abstraction to Principles Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (21.9%, 37.5%), Median: 29.7%",
        "test_fitness": "95% Bootstrap Confidence Interval: (25.6%, 31.9%), Median: 28.7%"
    },
    {
        "thought": "Similar to Quality-Diversity methods, let LLM generate multiple diverse interesting solutions could help. By encouraging the model to explore different reasoning paths, we can increase the chances of finding the best solution.",
        "name": "Quality-Diversity",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    cot_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for giving diverse answers\n    qd_instruction = \"Given previous attempts, try to come up with another interesting way to solve the task.\"\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Instruction for final decision-making based on collected reasoning and answers\n    final_decision_instruction = \"Given all the above solutions, reason over them carefully and provide a final answer.\"\n    final_decision_agent = LLMAgentBase(['thinking', 'answer'], 'Final Decision Agent', temperature=0.1)\n    \n    N_max = 3 # Maximum number of attempts\n\n    # Initial attempt\n    cot_inputs = [taskInfo]\n    possible_answers = []\n    thinking, answer = cot_agent(cot_inputs, cot_initial_instruction, 0)\n\n    # Add the answer to the list of possible answers\n    possible_answers.extend([thinking, answer])\n\n    for i in range(N_max):\n        # Reflect on previous attempts and generate another interesting answer\n        cot_inputs.extend([thinking, answer])\n\n        # Generate another interesting answer\n        thinking, answer = cot_agent(cot_inputs, qd_instruction, i + 1)\n        possible_answers.extend([thinking, answer])\n\n    # Make the final decision based on all generated answers\n    thinking, answer = final_decision_agent([taskInfo] + possible_answers, final_decision_instruction)\n    return answer\n",
        "api_calls": 7,
        "structure_label": "Multi-Agent Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (45.3%, 62.5%), Median: 53.9%",
        "test_fitness": "95% Bootstrap Confidence Interval: (53.1%, 60.1%), Median: 56.6%"
    },
    {
        "thought": "Similar to Auto-GPT and expert prompting, we can use dynamic control flow in the design to let the agent decide what expert we should use.",
        "name": "Dynamic Assignment of Roles",
        "code": "def forward(self, taskInfo):\n        # Instruction for step-by-step reasoning\n        cot_instruction = \"Please think step by step and then solve the task.\"\n        expert_agents = [LLMAgentBase(['thinking', 'answer'], 'Expert Agent', role=role) for role in ['Math Professor', 'Grade School Teacher', 'Math Enthusiast', 'Helpful Assistant']]\n\n        # Instruction for routing the task to the appropriate expert\n        routing_instruction = \"Given the task, please choose an Expert to answer the question. Choose from: Math Professor, Grade School Teacher, Math Enthusiast.\"\n        routing_agent = LLMAgentBase(['choice'], 'Routing agent')\n\n        # Get the choice of expert to route the task\n        choice = routing_agent([taskInfo], routing_instruction)[0]\n\n        if 'professor' in choice.content.lower():\n            expert_id = 0\n        elif 'teacher' in choice.content.lower():\n            expert_id = 1\n        elif 'enthusiast' in choice.content.lower():\n            expert_id = 2\n        else:\n            expert_id = 3 # Default to helpful assistant\n\n        thinking, answer = expert_agents[expert_id]([taskInfo], cot_instruction)\n        return answer\n",
        "api_calls": 4,
        "structure_label": "Multi-Agent Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (8.6%, 20.3%), Median: 14.1%",
        "test_fitness": "95% Bootstrap Confidence Interval: (13.8%, 18.9%), Median: 16.2%"
    },
    {
        "thought": "**Insights:**\nTo enhance the existing architecture, I will refocus on collaborative reasoning while minimizing API calls. The new architecture will have a smaller set of agents that engage in simultaneous dialogue to generate diverse answers and critique each other's input. This strategy will reduce API calls while allowing for effective aggregation of outputs. The agents will share their reasoning and then synthesize a final answer together, which will enhance the quality of the solution. \n\n**Overall Idea:**\nThis architecture encourages agents to both generate answers and critique them in a structured manner, focusing not just on individual outputs but also on collective reasoning. By utilizing a single decision agent to finalize the output based on the gathered insights, I can ensure compliance with the API call limits while enhancing the overall performance of the model.\n\n**Implementation:**\n1. Define a clear instruction for the agents to collaboratively think through the task and generate answers.\n2. Utilize fewer instances of LLMAgentBase to generate answers while allowing for critique and reflection.\n3. Implement a final synthesis phase where the best answer is chosen based on the collaborative insights from the agents, keeping the overall call count below the limit.",
        "name": "Collaborative Insight Reasoning",
        "code": "def forward(self, taskInfo):\n    # Instruction for collaborative reasoning and answer generation\n    instruction = \"Engage in a discussion about the problem. Each agent should contribute their thoughts and solutions to the task, then critique the solutions provided by others. Finally, synthesize your insights into a final answer.\"\n\n    # Initialize a single agent to generate diverse perspectives\n    reasoning_agent = LLMAgentBase([\"thinking\", \"answer\"], \"Collaborative Insight Agent\")\n\n    # Collect all agents' inputs and generate answers with a single call\n    thinking, answers = reasoning_agent([taskInfo], instruction)\n\n    # Final decision-making instruction\n    final_decision_instruction = \"Based on the generated answers, synthesize a final response that incorporates the best elements of each answer.\"\n    final_decision_agent = LLMAgentBase([\"thinking\", \"final_answer\"], \"Final Decision Agent\")\n\n    # Aggregate the final answer\n    thinking, final_answer = final_decision_agent([taskInfo, answers], final_decision_instruction)\n    return final_answer",
        "fitness": "95% Bootstrap Confidence Interval: (60.9%, 76.6%), Median: 68.8%",
        "generation": 13,
        "api_calls": 2,
        "structure_label": "Multi-Agent Reasoning",
        "test_fitness": "95% Bootstrap Confidence Interval: (62.0%, 68.6%), Median: 65.4%"
    },
    {
        "thought": "**Insights:**\nI propose an architecture that involves a group of agents engaging in a structured debate over their answers, allowing them to critique and refine solutions collaboratively. This will maximize the diversity of reasoning while adhering to API call limits by limiting the number of agents used and enhancing the synthesis process. \n\n**Overall Idea:**\nThe architecture will consist of several reasoning agents that generate solutions independently, followed by a debate phase where agents critique each other\u2019s answers. This debate will allow them to refine their thoughts and arrive at a consensus solution, thus improving the final output quality. The aggregation of diverse reasoning paths through critique will also foster deeper understanding, and the use of a single final decision agent will minimize API calls.\n\n**Implementation:**\n1. Define an instruction for each reasoning agent to generate initial solutions.\n2. Implement a debate phase where agents critique each other's solutions.\n3. Use a single final decision agent to synthesize the critiques and reach a consensus solution, ensuring the total API calls remain low.",
        "name": "Collaborative Debate Reasoning",
        "code": "def forward(self, taskInfo):\n    # Instruction for agents to generate initial answers\n    generate_instruction = \"Please think step by step and solve the task.\"\n\n    # Create a single agent for diverse reasoning, reusing it for critiques\n    reasoning_agent = LLMAgentBase([\"thinking\", \"answer\"], \"Reasoning Agent\")\n\n    # Collect initial solutions\n    initial_solutions = []\n    for _ in range(3):  # Number of agents\n        thinking, answer = reasoning_agent([taskInfo], generate_instruction)\n        initial_solutions.append((thinking, answer))\n\n    # Instruction for debate phase\n    debate_instruction = \"Critique the provided solutions and suggest improvements.\"\n    critiques = []\n\n    # Debate phase: critique each other's solutions, using one agent for debate\n    debate_agent = LLMAgentBase([\"thinking\", \"critique\"], \"Debate Agent\")\n    for i in range(len(initial_solutions)):\n        inputs_for_debate = [ans for j, (thinking, ans) in enumerate(initial_solutions) if j != i]\n        debate_thinking, critique = debate_agent([taskInfo] + inputs_for_debate, debate_instruction)\n        critiques.append((debate_thinking, critique))\n\n    # Final decision-making: synthesize critiques and initial solutions\n    final_decision_instruction = \"Based on the critiques, synthesize a final answer that addresses the critiques.\"\n    final_decision_agent = LLMAgentBase([\"thinking\", \"final_answer\"], \"Final Decision Agent\")\n    final_thinking, final_answer = final_decision_agent([taskInfo] + initial_solutions + critiques, final_decision_instruction)\n\n    return final_answer",
        "fitness": "95% Bootstrap Confidence Interval: (53.1%, 70.3%), Median: 61.7%",
        "generation": 17,
        "api_calls": 11,
        "structure_label": "Multi-Agent Reasoning",
        "test_fitness": "95% Bootstrap Confidence Interval: (58.6%, 65.4%), Median: 62.0%"
    },
    {
        "thought": "**Insights:**\nTo create a more efficient architecture, I will design a single agent that integrates collaborative reasoning and problem-solving in one go. This agent will be instructed to generate solutions while critically reflecting on them, thus eliminating the need for a secondary decision-making agent. By consolidating these processes, we can maintain high-quality outputs while minimizing API calls, ultimately improving performance.\n\n**Overall Idea:**\nThe architecture will involve a single LLM agent that facilitates a discussion on the problem, encourages critique of the generated answers, and synthesizes these insights into a final answer. This approach leverages the benefits of collective reasoning in a streamlined manner while adhering to API call limitations.\n\n**Implementation:**\n1. Define a comprehensive instruction for the agent to engage in collaborative reasoning and to critique its own and others' proposed solutions, explaining the reasoning behind each.\n2. Utilize a single instance of LLMAgentBase to execute this integrated task effectively.\n3. Return the final answer derived from the agent's synthesis of reasoning and critique.",
        "name": "Collaborative Reflection Reasoning",
        "code": "def forward(self, taskInfo):\n    # Instruction for collaborative reasoning and critique\n    instruction = \"Engage in a discussion about the problem, generate your solution, and critically assess it. Identify any issues in your reasoning and how they influence the solution before finalizing your answer.\"\n    \n    # Initialize a single agent to handle reasoning, critique, and final answer synthesis\n    reasoning_agent = LLMAgentBase([\"thinking\", \"critique\", \"answer\"], \"Collaborative Reflection Agent\")\n    \n    # Get the response from the agent, including reasoning and final answer\n    response = reasoning_agent([taskInfo], instruction)\n\n    # Directly return the final answer from the response without additional checks\n    return next((info for info in response if info.name == 'answer'), Info('answer', 'Collaborative Reflection Reasoning', 'No answer generated.', 0))",
        "fitness": "95% Bootstrap Confidence Interval: (41.4%, 58.6%), Median: 50.0%",
        "generation": 14,
        "api_calls": 1,
        "structure_label": "Self-Reflection Reasoning",
        "test_fitness": "95% Bootstrap Confidence Interval: (50.0%, 57.0%), Median: 53.5%"
    }
]