[
    {
        "thought": "By encouraging the LLM to think step by step rather than directly outputting an answer, chain-of-thought reasoning enables complex problem-solving through intermediate steps. This practice improves the model's ability to handle tasks that require deeper reasoning and provides insight into its decision-making process.",
        "name": "Chain-of-Thought",
        "code": "def forward(self, taskInfo):\n    # Instruction for the Chain-of-Thought (CoT) approach\n    # It is an important practice that allows the LLM to think step by step before solving the task.\n    cot_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instantiate a new LLM agent specifically for CoT\n    # To allow LLM thinking before answering, we need to set an additional output field 'thinking'.\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Prepare the inputs for the CoT agent\n    # The input should be a list of Info, and the first one is often the taskInfo\n    cot_agent_inputs = [taskInfo]\n\n    # Get the response from the CoT agent\n    thinking, answer = cot_agent(cot_agent_inputs, cot_instruction)\n\n    # Return only the final answer\n    return answer\n",
        "api_calls": 1,
        "structure_label": "Chain-of-Thought Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (7.8%, 19.5%), Median: 13.3%",
        "test_fitness": "95% Bootstrap Confidence Interval: (12.1%, 17.0%), Median: 14.5%"
    },
    {
        "thought": "While an LLM can arrive at the correct answer, its reasoning may vary. By repeatedly asking the same question with high temperature settings, we can generate different reasoning paths. We then combine multiple answers from these Chain-of-Thought (CoT) agents to produce a more accurate final answer through ensembling.",
        "name": "Self-Consistency with Chain-of-Thought",
        "code": "def forward(self, taskInfo):\n    # Instruction for step-by-step reasoning\n    cot_instruction = \"Please think step by step and then solve the task.\"\n    N = 5 # Number of CoT agents\n\n    # Initialize multiple CoT agents with a higher temperature for varied reasoning\n    cot_agents = [LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent', temperature=0.8) for _ in range(N)]\n\n    # Majority voting function to select the most common answer\n    from collections import Counter\n    def majority_voting(answers):\n        return Counter(answers).most_common(1)[0][0]\n    \n    possible_answers = []\n    for i in range(N):\n        thinking, answer = cot_agents[i]([taskInfo], cot_instruction)\n        possible_answers.append(answer.content)\n\n    # Ensembling the answers from multiple CoT agents\n    answer = majority_voting(possible_answers)\n    return answer  \n",
        "api_calls": 5,
        "structure_label": "Multi-Agent Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (7.0%, 18.8%), Median: 12.5%",
        "test_fitness": "95% Bootstrap Confidence Interval: (11.9%, 16.8%), Median: 14.2%"
    },
    {
        "thought": "To enhance its performance, an LLM can iteratively improve its answer based on feedback. By reflecting on its previous attempts and incorporating feedback, the model can refine its reasoning and provide a more accurate solution.",
        "name": "Self-Refine (Reflexion)",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    cot_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for reflecting on previous attempts and feedback to improve\n    cot_reflect_instruction = \"Given previous attempts and feedback, carefully consider where you could go wrong in your latest attempt. Using insights from previous attempts, try to solve the task better.\"\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Instruction for providing feedback and correcting the answer\n    critic_instruction = \"Please review the answer above and criticize on where might be wrong. If you are absolutely sure it is correct, output 'True' in 'correct'.\"\n    critic_agent = LLMAgentBase(['feedback', 'correct'], 'Critic Agent')\n    \n    N_max = 5 # Maximum number of attempts\n\n    # Initial attempt\n    cot_inputs = [taskInfo]\n    thinking, answer = cot_agent(cot_inputs, cot_initial_instruction, 0)\n\n    for i in range(N_max):\n        # Get feedback and correct status from the critic\n        feedback, correct = critic_agent([taskInfo, thinking, answer], critic_instruction, i)\n        if correct.content == 'True':\n            break\n            \n        # Add feedback to the inputs for the next iteration\n        cot_inputs.extend([thinking, answer, feedback])\n\n        # Reflect on previous attempts and refine the answer\n        thinking, answer = cot_agent(cot_inputs, cot_reflect_instruction, i + 1)\n    return answer\n",
        "api_calls": 7,
        "structure_label": "Self-Reflection Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (14.1%, 28.1%), Median: 21.1%",
        "test_fitness": "95% Bootstrap Confidence Interval: (14.0%, 19.1%), Median: 16.5%"
    },
    {
        "thought": "By letting different LLMs debate with each other, we can leverage their diverse perspectives to find better solutions for tasks.",
        "name": "LLM Debate",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    debate_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for debating and updating the solution based on other agents' solutions\n    debate_instruction = \"Given solutions to the problem from other agents, consider their opinions as additional advice. Please think carefully and provide an updated answer.\"\n    \n    # Initialize debate agents with different roles and a moderate temperature for varied reasoning\n    debate_agents = [LLMAgentBase(['thinking', 'answer'], 'Debate Agent', temperature=0.8, role=role) for role in ['Math Professor', 'Grade School Teacher', 'Math Enthusiast']]\n\n    # Instruction for final decision-making based on all debates and solutions\n    final_decision_instruction = \"Given all the above thinking and answers, reason over them carefully and provide a final answer.\"\n    final_decision_agent = LLMAgentBase(['thinking', 'answer'], 'Final Decision Agent', temperature=0.1)\n\n    max_round = 2 # Maximum number of debate rounds\n    all_thinking = [[] for _ in range(max_round)]\n    all_answer = [[] for _ in range(max_round)]\n\n    # Perform debate rounds\n    for r in range(max_round):\n        for i in range(len(debate_agents)):\n            if r == 0:\n                thinking, answer = debate_agents[i]([taskInfo], debate_initial_instruction)\n            else:\n                input_infos = [taskInfo] + [all_thinking[r-1][i]] + all_thinking[r-1][:i] + all_thinking[r-1][i+1:]\n                thinking, answer = debate_agents[i](input_infos, debate_instruction)\n            all_thinking[r].append(thinking)\n            all_answer[r].append(answer)\n    \n    # Make the final decision based on all debate results and solutions\n    thinking, answer = final_decision_agent([taskInfo] + all_thinking[max_round-1] + all_answer[max_round-1], final_decision_instruction)\n    return answer\n",
        "api_calls": 9,
        "structure_label": "Multi-Agent Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (43.8%, 60.9%), Median: 52.3%",
        "test_fitness": "95% Bootstrap Confidence Interval: (41.8%, 48.8%), Median: 45.2%"
    },
    {
        "thought": "Let LLM first think about the principles involved in solving this task which could be helpful. By understanding the underlying principles, the model can better reason through the problem and provide a more accurate solution.",
        "name": "Step-back Abstraction",
        "code": "def forward(self, taskInfo):\n        # Instruction for understanding the principles involved in the task\n        principle_instruction = \"What are the physics, chemistry or biology principles and concepts involved in solving this task? First think step by step. Then list all involved principles and explain them.\"\n        \n        # Instruction for solving the task based on the principles\n        cot_instruction = \"Given the question and the involved principle behind the question, think step by step and then solve the task.\"\n        \n        # Instantiate LLM agents\n        principle_agent = LLMAgentBase(['thinking', 'principle'], 'Principle Agent')\n        cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n        \n        # Get the principles involved in the task\n        thinking, principle = principle_agent([taskInfo], principle_instruction)\n\n        # Use the principles to solve the task\n        thinking, answer = cot_agent([taskInfo, thinking, principle], cot_instruction)\n        return answer\n",
        "api_calls": 2,
        "structure_label": "Abstraction to Principles Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (18.8%, 33.6%), Median: 25.8%",
        "test_fitness": "95% Bootstrap Confidence Interval: (21.0%, 26.9%), Median: 23.9%"
    },
    {
        "thought": "Similar to Quality-Diversity methods, let LLM generate multiple diverse interesting solutions could help. By encouraging the model to explore different reasoning paths, we can increase the chances of finding the best solution.",
        "name": "Quality-Diversity",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    cot_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for giving diverse answers\n    qd_instruction = \"Given previous attempts, try to come up with another interesting way to solve the task.\"\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Instruction for final decision-making based on collected reasoning and answers\n    final_decision_instruction = \"Given all the above solutions, reason over them carefully and provide a final answer.\"\n    final_decision_agent = LLMAgentBase(['thinking', 'answer'], 'Final Decision Agent', temperature=0.1)\n    \n    N_max = 3 # Maximum number of attempts\n\n    # Initial attempt\n    cot_inputs = [taskInfo]\n    possible_answers = []\n    thinking, answer = cot_agent(cot_inputs, cot_initial_instruction, 0)\n\n    # Add the answer to the list of possible answers\n    possible_answers.extend([thinking, answer])\n\n    for i in range(N_max):\n        # Reflect on previous attempts and generate another interesting answer\n        cot_inputs.extend([thinking, answer])\n\n        # Generate another interesting answer\n        thinking, answer = cot_agent(cot_inputs, qd_instruction, i + 1)\n        possible_answers.extend([thinking, answer])\n\n    # Make the final decision based on all generated answers\n    thinking, answer = final_decision_agent([taskInfo] + possible_answers, final_decision_instruction)\n    return answer\n",
        "api_calls": 7,
        "structure_label": "Multi-Agent Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (52.3%, 69.5%), Median: 60.9%",
        "test_fitness": "95% Bootstrap Confidence Interval: (50.6%, 57.4%), Median: 54.0%"
    },
    {
        "thought": "Similar to Auto-GPT and expert prompting, we can use dynamic control flow in the design to let the agent decide what expert we should use.",
        "name": "Dynamic Assignment of Roles",
        "code": "def forward(self, taskInfo):\n        # Instruction for step-by-step reasoning\n        cot_instruction = \"Please think step by step and then solve the task.\"\n        expert_agents = [LLMAgentBase(['thinking', 'answer'], 'Expert Agent', role=role) for role in ['Math Professor', 'Grade School Teacher', 'Math Enthusiast', 'Helpful Assistant']]\n\n        # Instruction for routing the task to the appropriate expert\n        routing_instruction = \"Given the task, please choose an Expert to answer the question. Choose from: Math Professor, Grade School Teacher, Math Enthusiast.\"\n        routing_agent = LLMAgentBase(['choice'], 'Routing agent')\n\n        # Get the choice of expert to route the task\n        choice = routing_agent([taskInfo], routing_instruction)[0]\n\n        if 'professor' in choice.content.lower():\n            expert_id = 0\n        elif 'teacher' in choice.content.lower():\n            expert_id = 1\n        elif 'enthusiast' in choice.content.lower():\n            expert_id = 2\n        else:\n            expert_id = 3 # Default to helpful assistant\n\n        thinking, answer = expert_agents[expert_id]([taskInfo], cot_instruction)\n        return answer\n",
        "api_calls": 4,
        "structure_label": "Multi-Agent Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (3.9%, 14.1%), Median: 8.6%",
        "test_fitness": "95% Bootstrap Confidence Interval: (12.1%, 17.0%), Median: 14.5%"
    },
    {
        "thought": "**Insights:**\nTo enhance the architecture, I propose a more efficient approach that combines principle extraction and collaborative reasoning into a single call, thereby minimizing API usage. This method will allow multiple perspectives to be gathered simultaneously while maintaining the focus on understanding important principles relevant to the task.\n\n**Overall Idea:**\nThe design will first identify the principles related to the mathematical problem, then utilize a single Chain-of-Thought agent to reason through the task with input from multiple perspectives at once. This will not only reduce API calls but also leverage insights from diverse reasoning paths.\n\n**Implementation:**\n1. Extract principles using a single agent.\n2. Use a single Chain-of-Thought agent for reasoning with combined inputs from multiple roles instead of separate calls.\n3. Aggregate the results intelligently to produce the final answer.",
        "name": "Principle-Driven Collaborative Reasoning",
        "code": "def forward(self, taskInfo):\n    # Instruction for understanding the principles involved in the task\n    principle_instruction = \"What are the principles and concepts involved in solving this task? Please think step by step and list all involved principles.\"\n\n    # Use a single agent to extract principles\n    principle_agent = LLMAgentBase(['thinking', 'principle'], 'Principle Agent')\n    thinking, principles = principle_agent([taskInfo], principle_instruction)\n\n    # Prepare a single instruction for Chain-of-Thought reasoning, incorporating multiple perspectives\n    cot_instruction = \"Given the question and principles: {principles}, think step by step and solve the task.\"\n    \n    # Use a single Chain-of-Thought agent for reasoning\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n    thinking, answer = cot_agent([taskInfo], cot_instruction.format(principles=principles))\n\n    return answer",
        "fitness": "95% Bootstrap Confidence Interval: (15.6%, 30.5%), Median: 22.7%",
        "generation": 5,
        "api_calls": 2,
        "structure_label": "Abstraction to Principles Reasoning",
        "test_fitness": "95% Bootstrap Confidence Interval: (17.0%, 22.5%), Median: 19.8%"
    },
    {
        "thought": "**Insights:**\nTo maximize the potential of the agent, we should implement a design that not only selects experts dynamically but also allows for parallel reasoning from multiple experts. This would enable us to gather diverse insights that can be aggregated for a more robust final answer. \n\n**Overall Idea:**\nThe architecture will involve selecting multiple experts based on the task requirements and aggregating their answers. This will leverage the strengths of various agents while ensuring a comprehensive approach to answering questions.\n\n**Implementation:**\n1. **Expert Selection:** Dynamically select multiple experts based on task complexity.\n2. **Parallel Reasoning:** Use a single agent instance to call for each selected expert's reasoning.\n3. **Aggregation:** Implement a majority voting mechanism for aggregating the answers from the multiple agents, ensuring accuracy and robustness.",
        "name": "Multi-Expert Ensemble Reasoning",
        "code": "def forward(self, taskInfo):\n    # Instruction for selecting the appropriate experts\n    routing_instruction = \"Given the task, please choose multiple Experts to answer the question. Choose from: Math Professor, Grade School Teacher, Math Enthusiast.\"\n    routing_agent = LLMAgentBase(['choice'], 'Routing agent')\n\n    # Get the choice of experts to route the task\n    choice = routing_agent([taskInfo], routing_instruction)[0]\n\n    # Map the chosen expert roles to indices\n    expert_roles = ['Math Professor', 'Grade School Teacher', 'Math Enthusiast']\n    selected_roles = [role for role in expert_roles if role.lower() in choice.content.lower()]\n\n    # Check if any experts were selected\n    if not selected_roles:\n        return Info('answer', 'Multi-Expert Ensemble Reasoning', 'No experts selected for the task.', 0)\n\n    # Prepare to use a single agent for processing the answers\n    expert_agent = LLMAgentBase(['thinking', 'answer'], 'Expert Agent')\n\n    possible_answers = []\n    for role in selected_roles:\n        thinking, answer = expert_agent([taskInfo], f\"Please think step by step and solve the task as a {role}.\")\n        possible_answers.append(answer)\n\n    # Majority voting function to select the most common answer\n    from collections import Counter\n    def majority_voting(answers):\n        return Counter(answers).most_common(1)[0][0]\n\n    # Aggregate answers and return the final answer\n    final_answer = majority_voting([ans.content for ans in possible_answers])\n    return final_answer",
        "fitness": "95% Bootstrap Confidence Interval: (8.6%, 20.3%), Median: 14.1%",
        "generation": 1,
        "api_calls": 2,
        "structure_label": "Multi-Agent Reasoning",
        "test_fitness": "95% Bootstrap Confidence Interval: (12.2%, 17.1%), Median: 14.6%"
    },
    {
        "thought": "**Insights:**\nTo maximize efficiency while maintaining diverse reasoning perspectives, I propose a more streamlined architecture that combines expert selection and reflection into fewer steps. This design will allow the agents to reason and refine their answers in a more integrated manner.\n\n**Overall Idea:**\nThe new architecture will involve selecting experts dynamically based on task complexity, allowing them to reason together and provide insights through a single feedback loop. This will minimize the number of API calls while ensuring a robust final answer through collaborative reflection.\n\n**Implementation:**\n1. **Expert Selection:** Dynamically select a small number of experts based on the task requirements.\n2. **Collaborative Reasoning:** All selected experts will reason simultaneously, and their answers will be used for a collective feedback session, reducing the number of API calls.\n3. **Feedback and Aggregation:** Use a single feedback loop to refine their answers based on peer insights before aggregating the final result.",
        "name": "Collaborative Reflection Reasoning",
        "code": "def forward(self, taskInfo):\n    # Instruction for selecting experts based on task complexity\n    routing_instruction = \"Given the task, please choose 2 Experts to answer the question. Choose from: Math Professor, Grade School Teacher.\"\n    routing_agent = LLMAgentBase(['choice'], 'Routing agent')\n\n    # Get the chosen experts to route the task\n    choice = routing_agent([taskInfo], routing_instruction)[0]\n\n    # Map the chosen expert roles to indices\n    expert_roles = ['Math Professor', 'Grade School Teacher']\n    selected_roles = [role for role in expert_roles if role.lower() in choice.content.lower()]\n\n    # Check if any experts were selected\n    if not selected_roles:\n        return Info('answer', 'Collaborative Reflection Reasoning', 'No experts selected for the task.', 0)\n\n    # Prepare to use a single agent for processing the answers\n    expert_agent = LLMAgentBase(['thinking', 'answer'], 'Expert Agent')\n\n    # Each expert provides an initial answer\n    expert_answers = []\n    for role in selected_roles:\n        thinking, answer = expert_agent([taskInfo], f\"Please think step by step as a {role} and solve the task.\")\n        expert_answers.append(answer)\n\n    # Collect answers for feedback\n    combined_answers = [ans.content for ans in expert_answers]\n    feedback_instruction = \"Given the initial answers from other experts, please think step by step and refine your answer.\"\n\n    # Use the same agent to refine the answers\n    refined_answers = []\n    for role in selected_roles:\n        thinking, refined_answer = expert_agent([taskInfo] + combined_answers, feedback_instruction)\n        refined_answers.append(refined_answer)\n\n    # Aggregate answers using majority voting\n    from collections import Counter\n    final_answer = Counter([ans.content for ans in refined_answers]).most_common(1)[0][0]\n    return Info('answer', 'Collaborative Reflection Reasoning', final_answer, 0)",
        "fitness": "95% Bootstrap Confidence Interval: (7.0%, 18.8%), Median: 12.5%",
        "generation": 2,
        "api_calls": 7,
        "structure_label": "Multi-Agent Reasoning",
        "test_fitness": "95% Bootstrap Confidence Interval: (16.8%, 22.1%), Median: 19.4%"
    }
]