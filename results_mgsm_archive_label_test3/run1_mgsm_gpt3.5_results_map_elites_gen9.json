{
    "Linear Chain-of-Thought,0": {
        "thought": "By encouraging the LLM to think step by step rather than directly outputting an answer, chain-of-thought reasoning enables complex problem-solving through intermediate steps. This practice improves the model's ability to handle tasks that require deeper reasoning and provides insight into its decision-making process.",
        "name": "Chain-of-Thought",
        "code": "def forward(self, taskInfo):\n    # Instruction for the Chain-of-Thought (CoT) approach\n    # It is an important practice that allows the LLM to think step by step before solving the task.\n    cot_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instantiate a new LLM agent specifically for CoT\n    # To allow LLM thinking before answering, we need to set an additional output field 'thinking'.\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Prepare the inputs for the CoT agent\n    # The input should be a list of Info, and the first one is often the taskInfo\n    cot_agent_inputs = [taskInfo]\n\n    # Get the response from the CoT agent\n    thinking, answer = cot_agent(cot_agent_inputs, cot_instruction)\n\n    # Return only the final answer\n    return answer\n",
        "api_calls": 1,
        "structure_label": "Linear Chain-of-Thought",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (13.3%, 26.6%), Median: 19.5%"
    },
    "Linear Chain-of-Thought,1": null,
    "Iterative Refinement,0": {
        "thought": "**Insights:**\nTo enhance the collaborative reasoning process while adhering to the API call limits, I propose revising the architecture to utilize a single LLMAgentBase instance that can generate potential answers and critique them in tandem. This method will minimize API calls and streamline the feedback loop.\n\n**Overall Idea:**\nThe revised architecture will consist of a single agent tasked with generating an initial answer followed by an internal critique process that assesses its own response. By integrating these phases into one coherent flow, we can achieve efficient reasoning and reflection in a single API call.\n\n**Implementation:**\n1. Create a single instruction that prompts the agent to generate an answer and then self-reflect on the response.\n2. Use this instruction to guide the agent through both its reasoning and critique phases in one call.\n3. Ensure that the implementation maintains clarity and cohesiveness in both the reasoning and feedback stages.",
        "name": "Self-Reflective Reasoning",
        "code": "def forward(self, taskInfo):\n    # Instruction for reasoning and self-reflection\n    instruction = \"Please think step by step to solve the task. After providing your answer, reflect on it and indicate any potential improvements or corrections based on your reasoning process.\"\n    \n    # Instantiate a single LLM agent to handle reasoning and reflection\n    agent = LLMAgentBase([\"thinking\", \"answer\", \"improvements\"], \"Self-Reflective Agent\")\n    \n    # Get the response from the agent\n    response = agent([taskInfo], instruction)\n    return response[1]  # Return the answer directly from the response",
        "fitness": "95% Bootstrap Confidence Interval: (28.1%, 44.5%), Median: 35.9%",
        "generation": 5,
        "api_calls": 1,
        "structure_label": "Iterative Refinement"
    },
    "Iterative Refinement,1": {
        "thought": "**Insights:**\nTo enhance the performance of iterative refinement while maintaining clarity in reasoning, I propose an architecture that explicitly captures diverse improvement suggestions in a structured manner. This will allow for more thorough self-assessment and refinement in one API call. \n\n**Overall Idea:**\nThe architecture will utilize a single LLMAgentBase instance to generate an initial answer, request multiple specific improvement points, and iteratively refine the answer based on those points. This approach will streamline the reflection process and capture diverse feedback in a coherent flow without exceeding API call limits.\n\n**Implementation:**\n1. Create a unified instruction that prompts the agent to generate an answer, followed by a request for multiple specific suggestions for improvements.\n2. Use a single LLMAgentBase instance to handle the entire process, ensuring that the number of API calls remains low while allowing for clear exploration of the problem.\n3. Implement a structured feedback loop where the agent revises its answer based on specific improvement suggestions to converge on the best solution.",
        "name": "Reflective Iterative Refinement",
        "code": "def forward(self, taskInfo):\n    # Unified instruction for reasoning and feedback\n    instruction = \"Please think step by step to solve the task. Provide your answer and also suggest potential improvements based on your reasoning process, focusing on aspects such as logic, calculations, and presentation.\"\n    \n    # Instantiate a single LLMAgentBase to handle all tasks\n    agent = LLMAgentBase([\"thinking\", \"answer\", \"improvements\"], \"Reflective Iterative Refinement Agent\")\n    \n    # Get response from the agent\n    response = agent([taskInfo], instruction)\n    answer = response[1]  # The answer is at index 1\n    improvements = response[2]  # Collect potential improvements\n\n    # Maximum number of iterations for refining the answer\n    N_max = 5\n    refined_answer = answer\n\n    for i in range(N_max):\n        # If improvements indicate satisfaction, break\n        if improvements.content.strip().lower() == 'no improvements needed':\n            break\n        # Update instruction to include improvements for the next iteration\n        instruction = f'Using the previous improvements: {improvements.content}, provide a revised answer.'\n        response = agent([taskInfo], instruction)\n        refined_answer = response[1]  # Update the refined answer\n        improvements = response[2]  # Update the improvements\n\n    return refined_answer",
        "fitness": "95% Bootstrap Confidence Interval: (37.5%, 54.7%), Median: 46.1%",
        "generation": 8,
        "api_calls": 6,
        "structure_label": "Iterative Refinement"
    },
    "Abstraction to Principles Reasoning,0": {
        "thought": "Let LLM first think about the principles involved in solving this task which could be helpful. By understanding the underlying principles, the model can better reason through the problem and provide a more accurate solution.",
        "name": "Step-back Abstraction",
        "code": "def forward(self, taskInfo):\n        # Instruction for understanding the principles involved in the task\n        principle_instruction = \"What are the physics, chemistry or biology principles and concepts involved in solving this task? First think step by step. Then list all involved principles and explain them.\"\n        \n        # Instruction for solving the task based on the principles\n        cot_instruction = \"Given the question and the involved principle behind the question, think step by step and then solve the task.\"\n        \n        # Instantiate LLM agents\n        principle_agent = LLMAgentBase(['thinking', 'principle'], 'Principle Agent')\n        cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n        \n        # Get the principles involved in the task\n        thinking, principle = principle_agent([taskInfo], principle_instruction)\n\n        # Use the principles to solve the task\n        thinking, answer = cot_agent([taskInfo, thinking, principle], cot_instruction)\n        return answer\n",
        "api_calls": 2,
        "structure_label": "Abstraction to Principles Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (14.8%, 28.9%), Median: 21.9%"
    },
    "Abstraction to Principles Reasoning,1": null,
    "Decompositional Reasoning,0": {
        "thought": "Similar to Auto-GPT and expert prompting, we can use dynamic control flow in the design to let the agent decide what expert we should use.",
        "name": "Dynamic Assignment of Roles",
        "code": "def forward(self, taskInfo):\n        # Instruction for step-by-step reasoning\n        cot_instruction = \"Please think step by step and then solve the task.\"\n        expert_agents = [LLMAgentBase(['thinking', 'answer'], 'Expert Agent', role=role) for role in ['Math Professor', 'Grade School Teacher', 'Math Enthusiast', 'Helpful Assistant']]\n\n        # Instruction for routing the task to the appropriate expert\n        routing_instruction = \"Given the task, please choose an Expert to answer the question. Choose from: Math Professor, Grade School Teacher, Math Enthusiast.\"\n        routing_agent = LLMAgentBase(['choice'], 'Routing agent')\n\n        # Get the choice of expert to route the task\n        choice = routing_agent([taskInfo], routing_instruction)[0]\n\n        if 'professor' in choice.content.lower():\n            expert_id = 0\n        elif 'teacher' in choice.content.lower():\n            expert_id = 1\n        elif 'enthusiast' in choice.content.lower():\n            expert_id = 2\n        else:\n            expert_id = 3 # Default to helpful assistant\n\n        thinking, answer = expert_agents[expert_id]([taskInfo], cot_instruction)\n        return answer\n",
        "api_calls": 4,
        "structure_label": "Decompositional Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (12.5%, 26.6%), Median: 19.5%"
    },
    "Decompositional Reasoning,1": null,
    "Multi-Agent Reasoning,0": null,
    "Multi-Agent Reasoning,1": {
        "thought": "Similar to Quality-Diversity methods, let LLM generate multiple diverse interesting solutions could help. By encouraging the model to explore different reasoning paths, we can increase the chances of finding the best solution.",
        "name": "Quality-Diversity",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    cot_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for giving diverse answers\n    qd_instruction = \"Given previous attempts, try to come up with another interesting way to solve the task.\"\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Instruction for final decision-making based on collected reasoning and answers\n    final_decision_instruction = \"Given all the above solutions, reason over them carefully and provide a final answer.\"\n    final_decision_agent = LLMAgentBase(['thinking', 'answer'], 'Final Decision Agent', temperature=0.1)\n    \n    N_max = 3 # Maximum number of attempts\n\n    # Initial attempt\n    cot_inputs = [taskInfo]\n    possible_answers = []\n    thinking, answer = cot_agent(cot_inputs, cot_initial_instruction, 0)\n\n    # Add the answer to the list of possible answers\n    possible_answers.extend([thinking, answer])\n\n    for i in range(N_max):\n        # Reflect on previous attempts and generate another interesting answer\n        cot_inputs.extend([thinking, answer])\n\n        # Generate another interesting answer\n        thinking, answer = cot_agent(cot_inputs, qd_instruction, i + 1)\n        possible_answers.extend([thinking, answer])\n\n    # Make the final decision based on all generated answers\n    thinking, answer = final_decision_agent([taskInfo] + possible_answers, final_decision_instruction)\n    return answer\n",
        "api_calls": 7,
        "structure_label": "Multi-Agent Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (46.9%, 64.1%), Median: 55.5%"
    }
}