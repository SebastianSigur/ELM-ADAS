[
    {
        "thought": "By encouraging the LLM to think step by step rather than directly outputting an answer, chain-of-thought reasoning enables complex problem-solving through intermediate steps. This practice improves the model's ability to handle tasks that require deeper reasoning and provides insight into its decision-making process.",
        "name": "Chain-of-Thought",
        "code": "def forward(self, taskInfo):\n    # Instruction for the Chain-of-Thought (CoT) approach\n    # It is an important practice that allows the LLM to think step by step before solving the task.\n    cot_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instantiate a new LLM agent specifically for CoT\n    # To allow LLM thinking before answering, we need to set an additional output field 'thinking'.\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Prepare the inputs for the CoT agent\n    # The input should be a list of Info, and the first one is often the taskInfo\n    cot_agent_inputs = [taskInfo]\n\n    # Get the response from the CoT agent\n    thinking, answer = cot_agent(cot_agent_inputs, cot_instruction)\n\n    # Return only the final answer\n    return answer\n",
        "api_calls": 1,
        "structure_label": "Linear Chain-of-Thought",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (8.6%, 20.3%), Median: 14.1%",
        "test_fitness": "95% Bootstrap Confidence Interval: (11.0%, 15.6%), Median: 13.2%"
    },
    {
        "thought": "While an LLM can arrive at the correct answer, its reasoning may vary. By repeatedly asking the same question with high temperature settings, we can generate different reasoning paths. We then combine multiple answers from these Chain-of-Thought (CoT) agents to produce a more accurate final answer through ensembling.",
        "name": "Self-Consistency with Chain-of-Thought",
        "code": "def forward(self, taskInfo):\n    # Instruction for step-by-step reasoning\n    cot_instruction = \"Please think step by step and then solve the task.\"\n    N = 5 # Number of CoT agents\n\n    # Initialize multiple CoT agents with a higher temperature for varied reasoning\n    cot_agents = [LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent', temperature=0.8) for _ in range(N)]\n\n    # Majority voting function to select the most common answer\n    from collections import Counter\n    def majority_voting(answers):\n        return Counter(answers).most_common(1)[0][0]\n    \n    possible_answers = []\n    for i in range(N):\n        thinking, answer = cot_agents[i]([taskInfo], cot_instruction)\n        possible_answers.append(answer.content)\n\n    # Ensembling the answers from multiple CoT agents\n    answer = majority_voting(possible_answers)\n    return answer  \n",
        "api_calls": 5,
        "structure_label": "Multi-Agent Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (7.0%, 18.8%), Median: 12.5%",
        "test_fitness": "95% Bootstrap Confidence Interval: (11.8%, 16.6%), Median: 14.1%"
    },
    {
        "thought": "To enhance its performance, an LLM can iteratively improve its answer based on feedback. By reflecting on its previous attempts and incorporating feedback, the model can refine its reasoning and provide a more accurate solution.",
        "name": "Self-Refine (Reflexion)",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    cot_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for reflecting on previous attempts and feedback to improve\n    cot_reflect_instruction = \"Given previous attempts and feedback, carefully consider where you could go wrong in your latest attempt. Using insights from previous attempts, try to solve the task better.\"\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Instruction for providing feedback and correcting the answer\n    critic_instruction = \"Please review the answer above and criticize on where might be wrong. If you are absolutely sure it is correct, output 'True' in 'correct'.\"\n    critic_agent = LLMAgentBase(['feedback', 'correct'], 'Critic Agent')\n    \n    N_max = 5 # Maximum number of attempts\n\n    # Initial attempt\n    cot_inputs = [taskInfo]\n    thinking, answer = cot_agent(cot_inputs, cot_initial_instruction, 0)\n\n    for i in range(N_max):\n        # Get feedback and correct status from the critic\n        feedback, correct = critic_agent([taskInfo, thinking, answer], critic_instruction, i)\n        if correct.content == 'True':\n            break\n            \n        # Add feedback to the inputs for the next iteration\n        cot_inputs.extend([thinking, answer, feedback])\n\n        # Reflect on previous attempts and refine the answer\n        thinking, answer = cot_agent(cot_inputs, cot_reflect_instruction, i + 1)\n    return answer\n",
        "api_calls": 10,
        "structure_label": "Iterative Refinement",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (8.6%, 21.1%), Median: 14.8%",
        "test_fitness": "95% Bootstrap Confidence Interval: (15.9%, 21.2%), Median: 18.5%"
    },
    {
        "thought": "By letting different LLMs debate with each other, we can leverage their diverse perspectives to find better solutions for tasks.",
        "name": "LLM Debate",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    debate_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for debating and updating the solution based on other agents' solutions\n    debate_instruction = \"Given solutions to the problem from other agents, consider their opinions as additional advice. Please think carefully and provide an updated answer.\"\n    \n    # Initialize debate agents with different roles and a moderate temperature for varied reasoning\n    debate_agents = [LLMAgentBase(['thinking', 'answer'], 'Debate Agent', temperature=0.8, role=role) for role in ['Math Professor', 'Grade School Teacher', 'Math Enthusiast']]\n\n    # Instruction for final decision-making based on all debates and solutions\n    final_decision_instruction = \"Given all the above thinking and answers, reason over them carefully and provide a final answer.\"\n    final_decision_agent = LLMAgentBase(['thinking', 'answer'], 'Final Decision Agent', temperature=0.1)\n\n    max_round = 2 # Maximum number of debate rounds\n    all_thinking = [[] for _ in range(max_round)]\n    all_answer = [[] for _ in range(max_round)]\n\n    # Perform debate rounds\n    for r in range(max_round):\n        for i in range(len(debate_agents)):\n            if r == 0:\n                thinking, answer = debate_agents[i]([taskInfo], debate_initial_instruction)\n            else:\n                input_infos = [taskInfo] + [all_thinking[r-1][i]] + all_thinking[r-1][:i] + all_thinking[r-1][i+1:]\n                thinking, answer = debate_agents[i](input_infos, debate_instruction)\n            all_thinking[r].append(thinking)\n            all_answer[r].append(answer)\n    \n    # Make the final decision based on all debate results and solutions\n    thinking, answer = final_decision_agent([taskInfo] + all_thinking[max_round-1] + all_answer[max_round-1], final_decision_instruction)\n    return answer\n",
        "api_calls": 12,
        "structure_label": "Multi-Agent Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (43.0%, 60.2%), Median: 51.6%",
        "test_fitness": "95% Bootstrap Confidence Interval: (42.9%, 49.9%), Median: 46.4%"
    },
    {
        "thought": "Let LLM first think about the principles involved in solving this task which could be helpful. By understanding the underlying principles, the model can better reason through the problem and provide a more accurate solution.",
        "name": "Step-back Abstraction",
        "code": "def forward(self, taskInfo):\n        # Instruction for understanding the principles involved in the task\n        principle_instruction = \"What are the physics, chemistry or biology principles and concepts involved in solving this task? First think step by step. Then list all involved principles and explain them.\"\n        \n        # Instruction for solving the task based on the principles\n        cot_instruction = \"Given the question and the involved principle behind the question, think step by step and then solve the task.\"\n        \n        # Instantiate LLM agents\n        principle_agent = LLMAgentBase(['thinking', 'principle'], 'Principle Agent')\n        cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n        \n        # Get the principles involved in the task\n        thinking, principle = principle_agent([taskInfo], principle_instruction)\n\n        # Use the principles to solve the task\n        thinking, answer = cot_agent([taskInfo, thinking, principle], cot_instruction)\n        return answer\n",
        "api_calls": 4,
        "structure_label": "Abstraction to Principles Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (14.1%, 28.1%), Median: 21.1%",
        "test_fitness": "95% Bootstrap Confidence Interval: (20.9%, 26.8%), Median: 23.8%"
    },
    {
        "thought": "Similar to Quality-Diversity methods, let LLM generate multiple diverse interesting solutions could help. By encouraging the model to explore different reasoning paths, we can increase the chances of finding the best solution.",
        "name": "Quality-Diversity",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    cot_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for giving diverse answers\n    qd_instruction = \"Given previous attempts, try to come up with another interesting way to solve the task.\"\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Instruction for final decision-making based on collected reasoning and answers\n    final_decision_instruction = \"Given all the above solutions, reason over them carefully and provide a final answer.\"\n    final_decision_agent = LLMAgentBase(['thinking', 'answer'], 'Final Decision Agent', temperature=0.1)\n    \n    N_max = 3 # Maximum number of attempts\n\n    # Initial attempt\n    cot_inputs = [taskInfo]\n    possible_answers = []\n    thinking, answer = cot_agent(cot_inputs, cot_initial_instruction, 0)\n\n    # Add the answer to the list of possible answers\n    possible_answers.extend([thinking, answer])\n\n    for i in range(N_max):\n        # Reflect on previous attempts and generate another interesting answer\n        cot_inputs.extend([thinking, answer])\n\n        # Generate another interesting answer\n        thinking, answer = cot_agent(cot_inputs, qd_instruction, i + 1)\n        possible_answers.extend([thinking, answer])\n\n    # Make the final decision based on all generated answers\n    thinking, answer = final_decision_agent([taskInfo] + possible_answers, final_decision_instruction)\n    return answer\n",
        "api_calls": 8,
        "structure_label": "Multi-Agent Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (43.0%, 60.2%), Median: 51.6%",
        "test_fitness": "95% Bootstrap Confidence Interval: (51.7%, 58.8%), Median: 55.2%"
    },
    {
        "thought": "Similar to Auto-GPT and expert prompting, we can use dynamic control flow in the design to let the agent decide what expert we should use.",
        "name": "Dynamic Assignment of Roles",
        "code": "def forward(self, taskInfo):\n        # Instruction for step-by-step reasoning\n        cot_instruction = \"Please think step by step and then solve the task.\"\n        expert_agents = [LLMAgentBase(['thinking', 'answer'], 'Expert Agent', role=role) for role in ['Math Professor', 'Grade School Teacher', 'Math Enthusiast', 'Helpful Assistant']]\n\n        # Instruction for routing the task to the appropriate expert\n        routing_instruction = \"Given the task, please choose an Expert to answer the question. Choose from: Math Professor, Grade School Teacher, Math Enthusiast.\"\n        routing_agent = LLMAgentBase(['choice'], 'Routing agent')\n\n        # Get the choice of expert to route the task\n        choice = routing_agent([taskInfo], routing_instruction)[0]\n\n        if 'professor' in choice.content.lower():\n            expert_id = 0\n        elif 'teacher' in choice.content.lower():\n            expert_id = 1\n        elif 'enthusiast' in choice.content.lower():\n            expert_id = 2\n        else:\n            expert_id = 3 # Default to helpful assistant\n\n        thinking, answer = expert_agents[expert_id]([taskInfo], cot_instruction)\n        return answer\n",
        "api_calls": 6,
        "structure_label": "Decompositional Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (8.6%, 20.3%), Median: 14.1%",
        "test_fitness": "95% Bootstrap Confidence Interval: (12.2%, 17.1%), Median: 14.6%"
    },
    {
        "thought": "**Insights:**\nTo enhance the architectural design, I propose creating a multi-agent framework that emphasizes cross-agent communication and validation rather than simply passing outputs sequentially. This will allow for deeper evaluation and refinement of answers across multiple steps. \n**Overall Idea:**\nThe architecture will consist of a series of agents, where each agent receives input not only from the previous agent but also incorporates feedback from a validation agent that assesses the correctness of answers at each stage. \n**Implementation:**\n1. Initialize multiple LLMAgentBase instances that sequentially reason through the task.\n2. Each agent will produce its output, which then feeds into a validation agent.\n3. The validation process will check the output and provide insights for the subsequent agent to refine its answer if necessary.\n4. This ensures a more rigorous reasoning process and enhances the performance of the overall architecture.",
        "name": "Cross-Validation Reasoning Agent",
        "code": "def forward(self, taskInfo):\n    # Instruction for reasoning through the task\n    instruction1 = \"Analyze the problem and provide a preliminary answer.\"\n    instruction2 = \"Refine the preliminary answer based on further analysis.\"\n    instruction3 = \"Validate the refined answer and provide feedback.\"\n    instruction4 = \"Produce the final answer based on the validation feedback.\"\n\n    # Initialize three distinct reasoning agents\n    agent1 = LLMAgentBase([\"thinking\", \"preliminary_answer\"], \"Reasoning Agent 1\", temperature=0.7)\n    agent2 = LLMAgentBase([\"thinking\", \"refined_answer\"], \"Reasoning Agent 2\", temperature=0.7)\n    validation_agent = LLMAgentBase([\"thinking\", \"validation_feedback\"], \"Validation Agent\", temperature=0.7)\n\n    # First call: Analyze the problem\n    thinking1, preliminary_answer = agent1([taskInfo], instruction1)  # 1 call\n    \n    # Second call: Validate the preliminary answer\n    thinking3, validation_feedback = validation_agent([taskInfo, preliminary_answer], instruction3)  # 1 call\n    \n    # Third call: Refine the answer based on validation feedback\n    final_instruction = f\"{instruction4} Feedback: {validation_feedback}\"\n    thinking2, refined_answer = agent2([taskInfo, preliminary_answer], final_instruction)  # 1 call\n\n    return refined_answer",
        "fitness": "95% Bootstrap Confidence Interval: (71.1%, 85.2%), Median: 78.1%",
        "generation": 16,
        "api_calls": 3,
        "structure_label": "Multi-Agent Reasoning",
        "test_fitness": "95% Bootstrap Confidence Interval: (76.2%, 81.9%), Median: 79.1%"
    },
    {
        "thought": "**Insights:**\nTo enhance the architecture further, I propose a Decompositional Reasoning framework that emphasizes not only the extraction of principles but also their validation and refinement through distinct agents. Each agent will focus on a specific aspect of the problem, and their outputs will be rigorously examined to ensure the final result is accurate and reliable. This architecture will encourage thorough exploration of alternative reasoning paths while also providing a mechanism for cross-checking outputs to improve accuracy.\n**Overall Idea:**\nThe proposed architecture will consist of multiple agents, each responsible for interpreting different aspects of the problem. Following their computations, a validation agent will assess the outputs for consistency and correctness, ensuring a robust final answer.\n**Implementation:**\n1. Initialize an abstraction agent to extract mathematical principles from the problem statement.\n2. Create multiple application agents that will tackle different aspects of the problem using the extracted principles, including built-in validation mechanisms.\n3. Synthesize the final result based on the validated outputs from the application agents.",
        "name": "Decompositional Reasoning Framework",
        "code": "def forward(self, taskInfo):\n    # Instructions to extract principles\n    instruction_extract = \"Analyze the problem and extract key mathematical principles.\"\n    # Instructions for application agents\n    instruction_apply = \"Apply the principles to solve the problem aspectively and validate the result.\"\n\n    # Initialize the abstraction agent\n    abstraction_agent = LLMAgentBase([\"thinking\", \"key_principles\"], \"Abstraction Agent\", temperature=0.7)\n    \n    # Step 1: Extract principles\n    output_abstraction = abstraction_agent([taskInfo], instruction_extract)  # 1 call\n    key_principles = output_abstraction[1].content\n\n    # Initialize application agents\n    application_agents = [LLMAgentBase([\"thinking\", \"validated_partial_answer\"], f\"Application Agent {i}\", temperature=0.7) for i in range(3)]\n    application_outputs = []  # Store application outputs\n\n    # Step 2: Call each application agent and validate their outputs\n    for agent in application_agents:\n        output_application = agent([taskInfo, key_principles], instruction_apply)  # 1 call per agent\n        application_outputs.append(output_application[1].content)\n\n    # Final synthesis of validated outputs\n    final_answer = max(set(application_outputs), key=application_outputs.count)  # Simple voting mechanism to consolidate answers\n\n    return final_answer",
        "fitness": "95% Bootstrap Confidence Interval: (56.2%, 72.7%), Median: 64.8%",
        "generation": 29,
        "api_calls": 4,
        "structure_label": "Decompositional Reasoning",
        "test_fitness": "95% Bootstrap Confidence Interval: (64.6%, 71.1%), Median: 67.9%"
    },
    {
        "thought": "**Insights:**\nTo simplify the architecture while retaining the benefits of collaborative reasoning, I propose an iterative refinement model where a single agent generates an answer and then critiques itself based on predefined criteria. This reduces the number of agents and API calls while still allowing for a correction mechanism. \n**Overall Idea:**\nThe architecture consists of one agent that first solves the problem, then self-evaluates its solution based on established criteria, making adjustments as necessary. This ensures that the process remains efficient while still being robust. \n**Implementation:**\n1. Initialize a single LLMAgentBase to reason through the task. \n2. Generate an initial answer based on the task information and evaluate it in a single step. \n3. Return the final output.",
        "name": "Self-Critique Agent",
        "code": "def forward(self, taskInfo):\n    # Combined instruction for generating and evaluating the solution\n    instruction = \"Please analyze the task step by step, provide your reasoning, and evaluate your own answer for correctness.\"\n    \n    # Initialize the agent for reasoning\n    reasoning_agent = LLMAgentBase([\"thinking\", \"final_answer\"], \"Self-Critique Agent\", temperature=0.7)\n    \n    # Generate the initial answer and evaluate it in one call\n    thinking, final_answer = reasoning_agent([taskInfo], instruction)  # 1 call for both generation and evaluation\n\n    return final_answer",
        "fitness": "95% Bootstrap Confidence Interval: (45.3%, 62.5%), Median: 53.9%",
        "generation": 14,
        "api_calls": 1,
        "structure_label": "Iterative Refinement",
        "test_fitness": "95% Bootstrap Confidence Interval: (50.1%, 57.1%), Median: 53.6%"
    },
    {
        "thought": "**Insights:**\nTo refine the architecture and enhance its effectiveness, I propose a Tree-of-Thought approach where multiple reasoning paths are explored after extracting principles. This would involve instantiating multiple agents that each apply the principles in unique ways, thereby increasing the robustness and depth of the analysis.\n**Overall Idea:**\nThis new architecture will consist of one abstraction agent followed by multiple application agents, each tasked with applying the extracted principles differently. The final answer will be determined based on a consensus from these diverse outputs, thus encouraging a broader exploration of the problem.\n**Implementation:**\n1. Initialize one abstraction agent to extract principles from the problem.\n2. Create several application agents, each implementing a distinct interpretation of the principles.\n3. Gather outputs from all application agents and validate them through a consensus mechanism to derive the final answer.",
        "name": "Diverse Application Reasoning Agent",
        "code": "def forward(self, taskInfo):\n    # Instructions for high-level abstraction of the problem\n    instruction_abstraction = \"Analyze the problem and extract key mathematical principles.\"\n    # Instructions for applying principles to the task\n    instruction_application = \"Use the extracted principles to solve the problem from different perspectives.\"\n\n    # Initialize the abstraction agent\n    abstraction_agent = LLMAgentBase([\"thinking\", \"key_principles\"], \"Abstraction Agent\", temperature=0.7)\n    \n    # Step 1: Extract key principles from the problem\n    output_abstraction = abstraction_agent([taskInfo], instruction_abstraction)  # 1 call\n    key_principles = output_abstraction[1].content  # Extracting the principles directly from the output Info\n\n    # Initialize application agents and gather their outputs\n    application_agents = [LLMAgentBase([\"thinking\", \"final_answer\"], f\"Application Agent {i}\", temperature=0.7) for i in range(3)]\n    outputs = []  # Store all outputs from application agents\n\n    # Step 2: Collect answers from all application agents in a single operation\n    for agent in application_agents:\n        output_application = agent([taskInfo, key_principles], instruction_application)  # 1 call per agent\n        outputs.append(output_application[1].content)  # Store extracted answers\n\n    # Final decision based on consensus of answers\n    final_answer = max(set(outputs), key=outputs.count)  # Simple voting mechanism\n\n    return final_answer  # Returns the most frequent answer based on agent outputs",
        "fitness": "95% Bootstrap Confidence Interval: (39.1%, 56.2%), Median: 47.7%",
        "generation": 26,
        "api_calls": 4,
        "structure_label": "Multi-Agent Reasoning",
        "test_fitness": "95% Bootstrap Confidence Interval: (50.4%, 57.4%), Median: 53.9%"
    },
    {
        "thought": "**Insights:**\nTo create a more effective architecture, I propose a combination of abstraction and principles reasoning in a single-cycle architecture. By focusing on extracting key principles first and then applying them to generate the answer, this approach minimizes redundant iterations. **Overall Idea:**\nThis new architecture consists of two dedicated agents: one for abstracting principles from the problem and the second for applying these principles to solve the problem. This structure reduces the number of calls while maximizing clarity in the reasoning process. **Implementation:**\n1. Initialize two LLMAgentBase instances: one for abstraction of the problem and another for applying the principles to provide a final solution.\n2. The first agent analyzes the task, extracts principles, and returns them to the second agent.\n3. The second agent then uses these principles in conjunction with the original task to provide the final answer.",
        "name": "Principles Abstraction Agent",
        "code": "def forward(self, taskInfo):\n    # Instructions for high-level abstraction of the problem\n    instruction_abstraction = \"Analyze the problem and extract key mathematical principles.\"\n    # Instructions for applying principles to the task\n    instruction_application = \"Use the extracted principles to solve the problem and provide the final answer.\"\n\n    # Initialize two LLMAgentBase instances\n    abstraction_agent = LLMAgentBase([\"thinking\", \"key_principles\"], \"Abstraction Agent\", temperature=0.7)\n    application_agent = LLMAgentBase([\"thinking\", \"final_answer\"], \"Application Agent\", temperature=0.7)\n\n    # Step 1: Extract key principles from the problem\n    output_abstraction = abstraction_agent([taskInfo], instruction_abstraction)  # 1 call\n    key_principles = output_abstraction[1].content  # Extracting the principles directly from the output Info\n    \n    # Step 2: Apply the extracted principles to solve the problem\n    output_application = application_agent([taskInfo, key_principles], instruction_application)  # 1 call\n    final_answer = output_application[1].content  # Extracting the final answer directly from the output Info\n\n    return final_answer",
        "fitness": "95% Bootstrap Confidence Interval: (32.8%, 50.0%), Median: 41.4%",
        "generation": 25,
        "api_calls": 2,
        "structure_label": "Abstraction to Principles Reasoning",
        "test_fitness": "95% Bootstrap Confidence Interval: (36.4%, 43.1%), Median: 39.8%"
    }
]