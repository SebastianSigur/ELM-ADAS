[
    {
        "thought": "By encouraging the LLM to think step by step rather than directly outputting an answer, chain-of-thought reasoning enables complex problem-solving through intermediate steps. This practice improves the model's ability to handle tasks that require deeper reasoning and provides insight into its decision-making process.",
        "name": "Chain-of-Thought",
        "code": "def forward(self, taskInfo):\n    # Instruction for the Chain-of-Thought (CoT) approach\n    # It is an important practice that allows the LLM to think step by step before solving the task.\n    cot_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instantiate a new LLM agent specifically for CoT\n    # To allow LLM thinking before answering, we need to set an additional output field 'thinking'.\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Prepare the inputs for the CoT agent\n    # The input should be a list of Info, and the first one is often the taskInfo\n    cot_agent_inputs = [taskInfo]\n\n    # Get the response from the CoT agent\n    thinking, answer = cot_agent(cot_agent_inputs, cot_instruction)\n\n    # Return only the final answer\n    return answer\n",
        "api_calls": 1,
        "structure_label": "Linear Chain-of-Thought",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (7.8%, 19.5%), Median: 13.3%",
        "test_fitness": "95% Bootstrap Confidence Interval: (12.2%, 17.1%), Median: 14.6%"
    },
    {
        "thought": "While an LLM can arrive at the correct answer, its reasoning may vary. By repeatedly asking the same question with high temperature settings, we can generate different reasoning paths. We then combine multiple answers from these Chain-of-Thought (CoT) agents to produce a more accurate final answer through ensembling.",
        "name": "Self-Consistency with Chain-of-Thought",
        "code": "def forward(self, taskInfo):\n    # Instruction for step-by-step reasoning\n    cot_instruction = \"Please think step by step and then solve the task.\"\n    N = 5 # Number of CoT agents\n\n    # Initialize multiple CoT agents with a higher temperature for varied reasoning\n    cot_agents = [LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent', temperature=0.8) for _ in range(N)]\n\n    # Majority voting function to select the most common answer\n    from collections import Counter\n    def majority_voting(answers):\n        return Counter(answers).most_common(1)[0][0]\n    \n    possible_answers = []\n    for i in range(N):\n        thinking, answer = cot_agents[i]([taskInfo], cot_instruction)\n        possible_answers.append(answer.content)\n\n    # Ensembling the answers from multiple CoT agents\n    answer = majority_voting(possible_answers)\n    return answer  \n",
        "api_calls": 5,
        "structure_label": "Multi-Agent Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (4.7%, 14.8%), Median: 9.4%",
        "test_fitness": "95% Bootstrap Confidence Interval: (9.6%, 14.0%), Median: 11.8%"
    },
    {
        "thought": "To enhance its performance, an LLM can iteratively improve its answer based on feedback. By reflecting on its previous attempts and incorporating feedback, the model can refine its reasoning and provide a more accurate solution.",
        "name": "Self-Refine (Reflexion)",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    cot_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for reflecting on previous attempts and feedback to improve\n    cot_reflect_instruction = \"Given previous attempts and feedback, carefully consider where you could go wrong in your latest attempt. Using insights from previous attempts, try to solve the task better.\"\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Instruction for providing feedback and correcting the answer\n    critic_instruction = \"Please review the answer above and criticize on where might be wrong. If you are absolutely sure it is correct, output 'True' in 'correct'.\"\n    critic_agent = LLMAgentBase(['feedback', 'correct'], 'Critic Agent')\n    \n    N_max = 5 # Maximum number of attempts\n\n    # Initial attempt\n    cot_inputs = [taskInfo]\n    thinking, answer = cot_agent(cot_inputs, cot_initial_instruction, 0)\n\n    for i in range(N_max):\n        # Get feedback and correct status from the critic\n        feedback, correct = critic_agent([taskInfo, thinking, answer], critic_instruction, i)\n        if correct.content == 'True':\n            break\n            \n        # Add feedback to the inputs for the next iteration\n        cot_inputs.extend([thinking, answer, feedback])\n\n        # Reflect on previous attempts and refine the answer\n        thinking, answer = cot_agent(cot_inputs, cot_reflect_instruction, i + 1)\n    return answer\n",
        "api_calls": 10,
        "structure_label": "Iterative Refinement",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (11.7%, 25.0%), Median: 18.0%",
        "test_fitness": "95% Bootstrap Confidence Interval: (16.5%, 21.9%), Median: 19.1%"
    },
    {
        "thought": "By letting different LLMs debate with each other, we can leverage their diverse perspectives to find better solutions for tasks.",
        "name": "LLM Debate",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    debate_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for debating and updating the solution based on other agents' solutions\n    debate_instruction = \"Given solutions to the problem from other agents, consider their opinions as additional advice. Please think carefully and provide an updated answer.\"\n    \n    # Initialize debate agents with different roles and a moderate temperature for varied reasoning\n    debate_agents = [LLMAgentBase(['thinking', 'answer'], 'Debate Agent', temperature=0.8, role=role) for role in ['Math Professor', 'Grade School Teacher', 'Math Enthusiast']]\n\n    # Instruction for final decision-making based on all debates and solutions\n    final_decision_instruction = \"Given all the above thinking and answers, reason over them carefully and provide a final answer.\"\n    final_decision_agent = LLMAgentBase(['thinking', 'answer'], 'Final Decision Agent', temperature=0.1)\n\n    max_round = 2 # Maximum number of debate rounds\n    all_thinking = [[] for _ in range(max_round)]\n    all_answer = [[] for _ in range(max_round)]\n\n    # Perform debate rounds\n    for r in range(max_round):\n        for i in range(len(debate_agents)):\n            if r == 0:\n                thinking, answer = debate_agents[i]([taskInfo], debate_initial_instruction)\n            else:\n                input_infos = [taskInfo] + [all_thinking[r-1][i]] + all_thinking[r-1][:i] + all_thinking[r-1][i+1:]\n                thinking, answer = debate_agents[i](input_infos, debate_instruction)\n            all_thinking[r].append(thinking)\n            all_answer[r].append(answer)\n    \n    # Make the final decision based on all debate results and solutions\n    thinking, answer = final_decision_agent([taskInfo] + all_thinking[max_round-1] + all_answer[max_round-1], final_decision_instruction)\n    return answer\n",
        "api_calls": 12,
        "structure_label": "Multi-Agent Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (43.8%, 60.9%), Median: 52.3%",
        "test_fitness": "95% Bootstrap Confidence Interval: (42.8%, 49.8%), Median: 46.2%"
    },
    {
        "thought": "Let LLM first think about the principles involved in solving this task which could be helpful. By understanding the underlying principles, the model can better reason through the problem and provide a more accurate solution.",
        "name": "Step-back Abstraction",
        "code": "def forward(self, taskInfo):\n        # Instruction for understanding the principles involved in the task\n        principle_instruction = \"What are the physics, chemistry or biology principles and concepts involved in solving this task? First think step by step. Then list all involved principles and explain them.\"\n        \n        # Instruction for solving the task based on the principles\n        cot_instruction = \"Given the question and the involved principle behind the question, think step by step and then solve the task.\"\n        \n        # Instantiate LLM agents\n        principle_agent = LLMAgentBase(['thinking', 'principle'], 'Principle Agent')\n        cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n        \n        # Get the principles involved in the task\n        thinking, principle = principle_agent([taskInfo], principle_instruction)\n\n        # Use the principles to solve the task\n        thinking, answer = cot_agent([taskInfo, thinking, principle], cot_instruction)\n        return answer\n",
        "api_calls": 4,
        "structure_label": "Abstraction to Principles Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (20.3%, 35.9%), Median: 28.1%",
        "test_fitness": "95% Bootstrap Confidence Interval: (22.1%, 28.1%), Median: 25.1%"
    },
    {
        "thought": "Similar to Quality-Diversity methods, let LLM generate multiple diverse interesting solutions could help. By encouraging the model to explore different reasoning paths, we can increase the chances of finding the best solution.",
        "name": "Quality-Diversity",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    cot_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for giving diverse answers\n    qd_instruction = \"Given previous attempts, try to come up with another interesting way to solve the task.\"\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Instruction for final decision-making based on collected reasoning and answers\n    final_decision_instruction = \"Given all the above solutions, reason over them carefully and provide a final answer.\"\n    final_decision_agent = LLMAgentBase(['thinking', 'answer'], 'Final Decision Agent', temperature=0.1)\n    \n    N_max = 3 # Maximum number of attempts\n\n    # Initial attempt\n    cot_inputs = [taskInfo]\n    possible_answers = []\n    thinking, answer = cot_agent(cot_inputs, cot_initial_instruction, 0)\n\n    # Add the answer to the list of possible answers\n    possible_answers.extend([thinking, answer])\n\n    for i in range(N_max):\n        # Reflect on previous attempts and generate another interesting answer\n        cot_inputs.extend([thinking, answer])\n\n        # Generate another interesting answer\n        thinking, answer = cot_agent(cot_inputs, qd_instruction, i + 1)\n        possible_answers.extend([thinking, answer])\n\n    # Make the final decision based on all generated answers\n    thinking, answer = final_decision_agent([taskInfo] + possible_answers, final_decision_instruction)\n    return answer\n",
        "api_calls": 8,
        "structure_label": "Multi-Agent Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (47.7%, 64.8%), Median: 56.2%",
        "test_fitness": "95% Bootstrap Confidence Interval: (50.9%, 57.9%), Median: 54.4%"
    },
    {
        "thought": "Similar to Auto-GPT and expert prompting, we can use dynamic control flow in the design to let the agent decide what expert we should use.",
        "name": "Dynamic Assignment of Roles",
        "code": "def forward(self, taskInfo):\n        # Instruction for step-by-step reasoning\n        cot_instruction = \"Please think step by step and then solve the task.\"\n        expert_agents = [LLMAgentBase(['thinking', 'answer'], 'Expert Agent', role=role) for role in ['Math Professor', 'Grade School Teacher', 'Math Enthusiast', 'Helpful Assistant']]\n\n        # Instruction for routing the task to the appropriate expert\n        routing_instruction = \"Given the task, please choose an Expert to answer the question. Choose from: Math Professor, Grade School Teacher, Math Enthusiast.\"\n        routing_agent = LLMAgentBase(['choice'], 'Routing agent')\n\n        # Get the choice of expert to route the task\n        choice = routing_agent([taskInfo], routing_instruction)[0]\n\n        if 'professor' in choice.content.lower():\n            expert_id = 0\n        elif 'teacher' in choice.content.lower():\n            expert_id = 1\n        elif 'enthusiast' in choice.content.lower():\n            expert_id = 2\n        else:\n            expert_id = 3 # Default to helpful assistant\n\n        thinking, answer = expert_agents[expert_id]([taskInfo], cot_instruction)\n        return answer\n",
        "api_calls": 6,
        "structure_label": "Decompositional Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (5.5%, 15.6%), Median: 10.2%",
        "test_fitness": "95% Bootstrap Confidence Interval: (11.4%, 16.2%), Median: 13.8%"
    },
    {
        "thought": "**Insights:**\nTo enhance the reasoning process while maintaining a high level of iterative refinement, I propose an architecture that employs multiple concurrent agent calls to analyze, validate, and synthesize answers from diverse perspectives. This will not only increase the number of API calls but also facilitate a more comprehensive approach to solving the mathematical problems presented. \n**Overall Idea:**\nThe architecture will consist of a concurrent multi-agent setup where each agent focuses on a specific aspect of problem-solving, leading to a rich aggregation of insights that will inform the final answer. This will ensure broad reasoning and a higher likelihood of achieving accurate solutions. \n**Implementation:**\n1. Initiate multiple agents that each analyze the task from different angles, extracting principles and potential solutions.\n2. Gather feedback from these agents to refine their outputs.\n3. Synthesize the insights from all agents to produce a comprehensive final answer while ensuring it addresses all facets of the problem.",
        "name": "Concurrent Multi-Agent Reasoning",
        "code": "def forward(self, taskInfo):\n    # Phase 1: Concurrent Analysis\n    instructions = 'Analyze the mathematical problem and identify possible solutions and principles.'\n    # Using 3 concurrent agents to keep the API calls lower\n    agents = [LLMAgentBase(['thinking', 'solution'], f'Analysis Agent {i}') for i in range(3)]  # 3 concurrent agents\n    outputs = [agent([taskInfo], instructions) for agent in agents]  # 3 API calls\n\n    # Gather insights from all agents\n    principles = [output[1] for output in outputs]  # Extracting all insights\n\n    # Phase 2: Synthesize Insights\n    synthesis_instruction = f'Using these insights: {principles}, provide a consolidated answer to solve the problem.'\n    synthesis_agent = LLMAgentBase(['thinking', 'consolidated_answer'], 'Synthesis Agent')\n    final_output = synthesis_agent([taskInfo, principles], synthesis_instruction)  # 1 API call\n\n    # Return the final answer\n    return final_output[1]",
        "fitness": "95% Bootstrap Confidence Interval: (73.4%, 86.7%), Median: 80.5%",
        "generation": 46,
        "api_calls": 4,
        "structure_label": "Multi-Agent Reasoning",
        "test_fitness": "95% Bootstrap Confidence Interval: (72.6%, 78.6%), Median: 75.6%"
    },
    {
        "thought": "**Insights:**\nTo optimize the architecture, I propose a more streamlined approach where a single agent is responsible for analyzing the task, generating an answer, and validating that answer in a linear sequence. This will preserve the depth of reasoning while minimizing the complexity of having multiple agents. \n**Overall Idea:**\nThe new architecture will have a single agent perform the analysis, generate an answer, and then validate that answer in sequence, adhering to the 'Linear Chain-of-Thought' structure. This simplifies the workflow and reduces the number of API calls while maintaining comprehensive reasoning.\n**Implementation:**\n1. Define the instruction for the agent to analyze the task and generate a detailed answer. \n2. After generating the answer, the same agent will validate it based on the initial task provided. \n3. This approach will ensure that we only make two API calls, one for generating the answer and one for validating it.",
        "name": "Linear Reasoning and Validation Agent",
        "code": "def forward(self, taskInfo):\n    # Step 1: Analyze the task and generate the answer\n    instruction = 'Analyze the task and provide a detailed answer with reasoning.'\n    answer_agent = LLMAgentBase(['thinking', 'initial_answer'], 'Answer Agent', temperature=0.5)\n    output_info = answer_agent([taskInfo], instruction)  # 1 API call\n    \n    # Step 2: Validate the generated answer\n    validation_agent = LLMAgentBase(['validated_thinking', 'validated_answer'], 'Validation Agent', temperature=0.5)\n    validation_output_info = validation_agent([taskInfo, output_info[1]], 'Confirm the correctness of the initial answer and provide reasoning.')  # 1 API call\n    \n    # Return the validated answer\n    return validation_output_info[1]",
        "fitness": "95% Bootstrap Confidence Interval: (72.7%, 86.7%), Median: 79.7%",
        "generation": 89,
        "api_calls": 2,
        "structure_label": "Linear Chain-of-Thought",
        "test_fitness": "95% Bootstrap Confidence Interval: (77.8%, 83.2%), Median: 80.5%"
    },
    {
        "thought": "**Insights:**\nTo enhance the number of API calls while maintaining a decompositional approach, I propose an architecture that utilizes multiple agents for separate components of the task, followed by an iterative refinement step. This allows for a higher number of API calls and an opportunity for more detailed reasoning from each agent.\n**Overall Idea:**\nThe design will involve breaking the problem into several components that can be solved independently by different agents, and then refining those solutions iteratively, leading to better fitness scores. The agents will be called multiple times to ensure that the reasoning is robust and comprehensive.\n**Implementation:**\n1. Define sub-tasks clearly from the original problem.\n2. Create multiple instances of LLMAgentBase for each sub-task, ensuring that there are at least three agents across multiple calls.\n3. Include an iterative refinement loop where each agent's output is further improved in subsequent calls.",
        "name": "Decompositional Reasoning with Iterative Refinement",
        "code": "def forward(self, taskInfo):\n    # Define sub-tasks based on the original problem\n    sub_tasks = [\n        'Calculate the total number of pets', \n        'Determine the relationship between dogs and cats',\n        'Calculate the number of rabbits'\n    ]\n    agents = [LLMAgentBase(['thinking', 'answer'], 'Sub-task Agent', temperature=0.7) for _ in range(len(sub_tasks))]  # 0 calls (instantiation)\n\n    results = []\n    for i, sub_task in enumerate(sub_tasks):\n        instruction = f'{sub_task}. Use the provided task info: {taskInfo}'\n        thinking, answer = agents[i]([taskInfo], instruction)  # 1 call for each agent\n        results.append(str(answer.content))  # Append only the content of the Info object as a string\n\n    # Iterate over the results for refinement\n    refined_results = []\n    for result in results:\n        refine_instruction = f'Refine this answer: {result}'  # Use string directly\n        refine_agent = LLMAgentBase(['thinking', 'refined_answer'], 'Refinement Agent', temperature=0.6)  # New agent for refinement\n        thinking, refined_answer = refine_agent([taskInfo], refine_instruction)  # 1 call for refinement\n        refined_results.append(str(refined_answer.content))  # Append refined answer content as string\n\n    # Final aggregation of refined answers\n    aggregate_instruction = 'Combine these refined results: ' + ', '.join(refined_results)  # Join will work now since they are all strings\n    final_agent = LLMAgentBase(['thinking', 'final_answer'], 'Final Aggregator Agent', temperature=0.5)\n    final_thinking, final_answer = final_agent([taskInfo], aggregate_instruction)  # 1 call for final aggregation\n\n    return str(final_answer.content)  # Total API calls = len(sub_tasks) + len(refined_results) + 1 = 3 + 3 + 1 = 7 calls.",
        "fitness": "95% Bootstrap Confidence Interval: (71.9%, 85.9%), Median: 78.9%",
        "generation": 1,
        "api_calls": 7,
        "structure_label": "Decompositional Reasoning",
        "test_fitness": "95% Bootstrap Confidence Interval: (74.8%, 80.5%), Median: 77.6%"
    },
    {
        "thought": "**Insights:**\nTo enhance the efficiency while maintaining the few API calls requirement, I propose a structure where a single reasoning agent performs both the task analysis and the validation of the generated answer. This approach will reduce API calls and maintain clarity in the implementation.\n**Overall Idea:**\nThe new architecture consists of a single agent that analyzes the task, generates an answer, and validates its correctness in one cohesive step. This simplifies the workflow and adheres to API call constraints while ensuring comprehensive reasoning and validation.",
        "name": "Unified Reasoning and Validation Agent",
        "code": "def forward(self, taskInfo):\n    # Step 1: Initial Analysis, Answer Generation, and Validation\n    instruction = 'Analyze the task, provide a detailed answer with reasoning, and confirm the correctness of that answer.'\n    agent = LLMAgentBase(['thinking', 'validated_answer'], 'Unified Agent', temperature=0.5)\n    output_info = agent([taskInfo], instruction)  # 1 API call\n    \n    # Return the validated answer\n    return output_info[1]  # Return the final validated answer",
        "fitness": "95% Bootstrap Confidence Interval: (71.1%, 85.2%), Median: 78.1%",
        "generation": 32,
        "api_calls": 1,
        "structure_label": "Linear Chain-of-Thought",
        "test_fitness": "95% Bootstrap Confidence Interval: (70.5%, 76.6%), Median: 73.6%"
    },
    {
        "thought": "**Insights:**\nTo enhance the architecture, I propose a design that further simplifies answer generation by consolidating the answer generation into a single agent that utilizes the extracted principles. This will reduce complexity and API calls while still ensuring diverse outputs.\n**Overall Idea:**\nThe revised architecture features a single principle extraction phase, followed by a specialized answer generation phase that integrates the principles directly into the reasoning process. This minimizes redundancy and optimizes API calls for efficiency.\n**Implementation:**\n1. Use a dedicated agent for principle extraction with clear instructions.\n2. Leverage a single agent for answer generation that can access the previously extracted principles directly in its reasoning, allowing for a more coherent solution strategy.\n3. Finally, aggregate the outputs and ensure validation occurs through a simple voting mechanism to select the best answer.",
        "name": "Optimized Principle-Based Answer Generation",
        "code": "def forward(self, taskInfo):\n    # Phase 1: Principle Extraction\n    instructions = 'Analyze the mathematical problem and extract key principles to solve it.'\n    principle_agent = LLMAgentBase(['thinking', 'extracted_principles'], 'Principle Extraction Agent', temperature=0.5)\n    principle_output = principle_agent([taskInfo], instructions)  # 1 API call\n    principles = principle_output[1].content.split(';')  # Extract principles from output\n\n    # Phase 2: Generate Potential Answers with a Single Agent\n    answer_instruction = f'Using the principles: {principles}, solve the problem step by step.'\n    answer_agent = LLMAgentBase(['thinking', 'potential_answers'], 'Answer Generation Agent', temperature=0.5)\n    answer_output = answer_agent([taskInfo], answer_instruction)  # 1 API call\n\n    # Check if the answer output is a string before splitting\n    if isinstance(answer_output[1].content, str):\n        generated_answers = answer_output[1].content.split(';')  # Assuming multiple answers are separated by ';'\n    else:\n        generated_answers = [str(answer_output[1].content)]  # Fallback to handle non-string outputs\n\n    # Phase 3: Validate Answers\n    voting_instruction = 'Vote on the following answers: ' + ', '.join(generated_answers) + '. Select the best one.'\n    validation_agent = LLMAgentBase(['thinking', 'validated_answer'], 'Validation Agent', temperature=0.5)\n    validated_output = validation_agent([taskInfo], voting_instruction)  # 1 API call\n\n    return validated_output[1]  # Total API calls = 3 (1 for principle extraction, 1 for answer generation, and 1 for validation)",
        "fitness": "95% Bootstrap Confidence Interval: (70.3%, 84.4%), Median: 77.3%",
        "generation": 52,
        "api_calls": 3,
        "structure_label": "Abstraction to Principles Reasoning",
        "test_fitness": "95% Bootstrap Confidence Interval: (72.0%, 78.0%), Median: 75.0%"
    }
]