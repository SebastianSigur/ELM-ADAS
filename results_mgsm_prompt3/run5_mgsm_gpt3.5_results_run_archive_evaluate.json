[
    {
        "thought": "By encouraging the LLM to think step by step rather than directly outputting an answer, chain-of-thought reasoning enables complex problem-solving through intermediate steps. This practice improves the model's ability to handle tasks that require deeper reasoning and provides insight into its decision-making process.",
        "name": "Chain-of-Thought",
        "code": "def forward(self, taskInfo):\n    # Instruction for the Chain-of-Thought (CoT) approach\n    # It is an important practice that allows the LLM to think step by step before solving the task.\n    cot_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instantiate a new LLM agent specifically for CoT\n    # To allow LLM thinking before answering, we need to set an additional output field 'thinking'.\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Prepare the inputs for the CoT agent\n    # The input should be a list of Info, and the first one is often the taskInfo\n    cot_agent_inputs = [taskInfo]\n\n    # Get the response from the CoT agent\n    thinking, answer = cot_agent(cot_agent_inputs, cot_instruction)\n\n    # Return only the final answer\n    return answer\n",
        "api_calls": 1,
        "structure_label": "Chain-of-Thought Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (7.8%, 19.5%), Median: 13.3%",
        "test_fitness": "95% Bootstrap Confidence Interval: (13.5%, 18.6%), Median: 16.0%"
    },
    {
        "thought": "While an LLM can arrive at the correct answer, its reasoning may vary. By repeatedly asking the same question with high temperature settings, we can generate different reasoning paths. We then combine multiple answers from these Chain-of-Thought (CoT) agents to produce a more accurate final answer through ensembling.",
        "name": "Self-Consistency with Chain-of-Thought",
        "code": "def forward(self, taskInfo):\n    # Instruction for step-by-step reasoning\n    cot_instruction = \"Please think step by step and then solve the task.\"\n    N = 5 # Number of CoT agents\n\n    # Initialize multiple CoT agents with a higher temperature for varied reasoning\n    cot_agents = [LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent', temperature=0.8) for _ in range(N)]\n\n    # Majority voting function to select the most common answer\n    from collections import Counter\n    def majority_voting(answers):\n        return Counter(answers).most_common(1)[0][0]\n    \n    possible_answers = []\n    for i in range(N):\n        thinking, answer = cot_agents[i]([taskInfo], cot_instruction)\n        possible_answers.append(answer.content)\n\n    # Ensembling the answers from multiple CoT agents\n    answer = majority_voting(possible_answers)\n    return answer  \n",
        "api_calls": 5,
        "structure_label": "Multi-Agent Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (7.0%, 18.8%), Median: 12.5%",
        "test_fitness": "95% Bootstrap Confidence Interval: (11.5%, 16.2%), Median: 13.9%"
    },
    {
        "thought": "To enhance its performance, an LLM can iteratively improve its answer based on feedback. By reflecting on its previous attempts and incorporating feedback, the model can refine its reasoning and provide a more accurate solution.",
        "name": "Self-Refine (Reflexion)",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    cot_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for reflecting on previous attempts and feedback to improve\n    cot_reflect_instruction = \"Given previous attempts and feedback, carefully consider where you could go wrong in your latest attempt. Using insights from previous attempts, try to solve the task better.\"\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Instruction for providing feedback and correcting the answer\n    critic_instruction = \"Please review the answer above and criticize on where might be wrong. If you are absolutely sure it is correct, output 'True' in 'correct'.\"\n    critic_agent = LLMAgentBase(['feedback', 'correct'], 'Critic Agent')\n    \n    N_max = 5 # Maximum number of attempts\n\n    # Initial attempt\n    cot_inputs = [taskInfo]\n    thinking, answer = cot_agent(cot_inputs, cot_initial_instruction, 0)\n\n    for i in range(N_max):\n        # Get feedback and correct status from the critic\n        feedback, correct = critic_agent([taskInfo, thinking, answer], critic_instruction, i)\n        if correct.content == 'True':\n            break\n            \n        # Add feedback to the inputs for the next iteration\n        cot_inputs.extend([thinking, answer, feedback])\n\n        # Reflect on previous attempts and refine the answer\n        thinking, answer = cot_agent(cot_inputs, cot_reflect_instruction, i + 1)\n    return answer\n",
        "api_calls": 7,
        "structure_label": "Self-Reflection Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (10.9%, 24.2%), Median: 17.2%",
        "test_fitness": "95% Bootstrap Confidence Interval: (16.6%, 22.1%), Median: 19.4%"
    },
    {
        "thought": "By letting different LLMs debate with each other, we can leverage their diverse perspectives to find better solutions for tasks.",
        "name": "LLM Debate",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    debate_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for debating and updating the solution based on other agents' solutions\n    debate_instruction = \"Given solutions to the problem from other agents, consider their opinions as additional advice. Please think carefully and provide an updated answer.\"\n    \n    # Initialize debate agents with different roles and a moderate temperature for varied reasoning\n    debate_agents = [LLMAgentBase(['thinking', 'answer'], 'Debate Agent', temperature=0.8, role=role) for role in ['Math Professor', 'Grade School Teacher', 'Math Enthusiast']]\n\n    # Instruction for final decision-making based on all debates and solutions\n    final_decision_instruction = \"Given all the above thinking and answers, reason over them carefully and provide a final answer.\"\n    final_decision_agent = LLMAgentBase(['thinking', 'answer'], 'Final Decision Agent', temperature=0.1)\n\n    max_round = 2 # Maximum number of debate rounds\n    all_thinking = [[] for _ in range(max_round)]\n    all_answer = [[] for _ in range(max_round)]\n\n    # Perform debate rounds\n    for r in range(max_round):\n        for i in range(len(debate_agents)):\n            if r == 0:\n                thinking, answer = debate_agents[i]([taskInfo], debate_initial_instruction)\n            else:\n                input_infos = [taskInfo] + [all_thinking[r-1][i]] + all_thinking[r-1][:i] + all_thinking[r-1][i+1:]\n                thinking, answer = debate_agents[i](input_infos, debate_instruction)\n            all_thinking[r].append(thinking)\n            all_answer[r].append(answer)\n    \n    # Make the final decision based on all debate results and solutions\n    thinking, answer = final_decision_agent([taskInfo] + all_thinking[max_round-1] + all_answer[max_round-1], final_decision_instruction)\n    return answer\n",
        "api_calls": 9,
        "structure_label": "Multi-Agent Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (37.5%, 54.7%), Median: 46.1%",
        "test_fitness": "95% Bootstrap Confidence Interval: (43.2%, 50.2%), Median: 46.8%"
    },
    {
        "thought": "Let LLM first think about the principles involved in solving this task which could be helpful. By understanding the underlying principles, the model can better reason through the problem and provide a more accurate solution.",
        "name": "Step-back Abstraction",
        "code": "def forward(self, taskInfo):\n        # Instruction for understanding the principles involved in the task\n        principle_instruction = \"What are the physics, chemistry or biology principles and concepts involved in solving this task? First think step by step. Then list all involved principles and explain them.\"\n        \n        # Instruction for solving the task based on the principles\n        cot_instruction = \"Given the question and the involved principle behind the question, think step by step and then solve the task.\"\n        \n        # Instantiate LLM agents\n        principle_agent = LLMAgentBase(['thinking', 'principle'], 'Principle Agent')\n        cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n        \n        # Get the principles involved in the task\n        thinking, principle = principle_agent([taskInfo], principle_instruction)\n\n        # Use the principles to solve the task\n        thinking, answer = cot_agent([taskInfo, thinking, principle], cot_instruction)\n        return answer\n",
        "api_calls": 2,
        "structure_label": "Abstraction to Principles Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (13.3%, 27.3%), Median: 20.3%",
        "test_fitness": "95% Bootstrap Confidence Interval: (21.9%, 27.9%), Median: 24.9%"
    },
    {
        "thought": "Similar to Quality-Diversity methods, let LLM generate multiple diverse interesting solutions could help. By encouraging the model to explore different reasoning paths, we can increase the chances of finding the best solution.",
        "name": "Quality-Diversity",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    cot_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for giving diverse answers\n    qd_instruction = \"Given previous attempts, try to come up with another interesting way to solve the task.\"\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Instruction for final decision-making based on collected reasoning and answers\n    final_decision_instruction = \"Given all the above solutions, reason over them carefully and provide a final answer.\"\n    final_decision_agent = LLMAgentBase(['thinking', 'answer'], 'Final Decision Agent', temperature=0.1)\n    \n    N_max = 3 # Maximum number of attempts\n\n    # Initial attempt\n    cot_inputs = [taskInfo]\n    possible_answers = []\n    thinking, answer = cot_agent(cot_inputs, cot_initial_instruction, 0)\n\n    # Add the answer to the list of possible answers\n    possible_answers.extend([thinking, answer])\n\n    for i in range(N_max):\n        # Reflect on previous attempts and generate another interesting answer\n        cot_inputs.extend([thinking, answer])\n\n        # Generate another interesting answer\n        thinking, answer = cot_agent(cot_inputs, qd_instruction, i + 1)\n        possible_answers.extend([thinking, answer])\n\n    # Make the final decision based on all generated answers\n    thinking, answer = final_decision_agent([taskInfo] + possible_answers, final_decision_instruction)\n    return answer\n",
        "api_calls": 7,
        "structure_label": "Multi-Agent Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (45.3%, 62.5%), Median: 53.9%",
        "test_fitness": "95% Bootstrap Confidence Interval: (50.2%, 57.1%), Median: 53.6%"
    },
    {
        "thought": "Similar to Auto-GPT and expert prompting, we can use dynamic control flow in the design to let the agent decide what expert we should use.",
        "name": "Dynamic Assignment of Roles",
        "code": "def forward(self, taskInfo):\n        # Instruction for step-by-step reasoning\n        cot_instruction = \"Please think step by step and then solve the task.\"\n        expert_agents = [LLMAgentBase(['thinking', 'answer'], 'Expert Agent', role=role) for role in ['Math Professor', 'Grade School Teacher', 'Math Enthusiast', 'Helpful Assistant']]\n\n        # Instruction for routing the task to the appropriate expert\n        routing_instruction = \"Given the task, please choose an Expert to answer the question. Choose from: Math Professor, Grade School Teacher, Math Enthusiast.\"\n        routing_agent = LLMAgentBase(['choice'], 'Routing agent')\n\n        # Get the choice of expert to route the task\n        choice = routing_agent([taskInfo], routing_instruction)[0]\n\n        if 'professor' in choice.content.lower():\n            expert_id = 0\n        elif 'teacher' in choice.content.lower():\n            expert_id = 1\n        elif 'enthusiast' in choice.content.lower():\n            expert_id = 2\n        else:\n            expert_id = 3 # Default to helpful assistant\n\n        thinking, answer = expert_agents[expert_id]([taskInfo], cot_instruction)\n        return answer\n",
        "api_calls": 4,
        "structure_label": "Multi-Agent Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (6.2%, 17.2%), Median: 11.7%",
        "test_fitness": "95% Bootstrap Confidence Interval: (13.1%, 18.1%), Median: 15.6%"
    },
    {
        "thought": "**Insights:**\nTo enhance the effectiveness of the reasoning and reflection process, I will design an architecture that not only reflects on previous attempts but also incorporates a mechanism for strategy evaluation and decision-making on which paths to explore further. This approach will improve clarity and adaptability while keeping API usage in check.\n**Overall Idea:**\nThe architecture will focus on allowing the agent to evaluate its reasoning strategies dynamically after each attempt. Instead of simply reflecting on previous answers, the agent will decide on the most effective reasoning approach for its next iteration, leading to a more informed and efficient refinement process. This means integrating a structured decision-making step that will consider various paths based on past attempts and feedback.\n**Implementation:**\n1. **Unified Reasoning and Reflection:** Use a single call to handle both initial reasoning and reflections.\n2. **Dynamic Strategy Evaluation:** Introduce a structured decision-making step that selects the best reasoning strategy for the next iteration based on previous attempts and feedback.\n3. **Single Instance Usage:** Ensure only one LLMAgentBase instance is utilized to minimize API calls without sacrificing the reflection process.\n4. **Final Output:** Maintain clarity in the output, ensuring the reasoning process is well-articulated and leads to a comprehensive solution.",
        "name": "Dynamic Strategy Reflection Agent",
        "code": "def forward(self, taskInfo):\n    # Unified instruction for reasoning and reflection\n    instruction = \"Think step by step through the problem, reflect on your answer, and evaluate different strategies for improvement. Provide the best solution based on this reflection.\"\n\n    # Instantiate a single agent for the task\n    agent = LLMAgentBase(['thinking', 'answer'], 'Dynamic Strategy Reflection Agent')\n\n    # Prepare the input to include the task information\n    inputs = [taskInfo]\n\n    # Initial reasoning attempt\n    thinking, answer = agent(inputs, instruction)\n\n    # Set maximum number of iterations for refinement\n    max_refinements = 5\n    for i in range(max_refinements):\n        # Combine reflection and strategy evaluation into a single call\n        combined_instruction = \"Reflect on your previous answer and identify potential improvements. Then decide on the best reasoning strategy to apply next.\"\n        reflection_and_strategy = agent([taskInfo, thinking, answer], combined_instruction)\n\n        # Update inputs for the next iteration based on the reflection and strategy\n        inputs.extend([thinking, answer, reflection_and_strategy])\n        thinking, answer = agent(inputs, instruction)\n\n    return answer",
        "fitness": "95% Bootstrap Confidence Interval: (61.7%, 77.3%), Median: 69.5%",
        "generation": 6,
        "api_calls": 6,
        "structure_label": "Self-Reflection Reasoning",
        "test_fitness": "95% Bootstrap Confidence Interval: (61.4%, 68.0%), Median: 64.8%"
    },
    {
        "thought": "**Insights:**\nTo increase the effectiveness of self-reflection and adaptability, I propose an architecture that allows the agent to evaluate and select different reflection strategies based on its initial reasoning. This will enable the agent to analyze the task step-by-step, iteratively refining its reasoning through strategically varied reflections. This design will enhance clarity and adaptability while minimizing API calls.\n**Overall Idea:**\nThe aim is to create a structured approach that incorporates both reasoning and strategic reflection within a single call, enhancing the quality of the output while adhering to API call limits. The agent will dynamically choose reflection strategies based on the prior reasoning performed, thus fostering a more versatile and insightful problem-solving process.",
        "name": "Strategic Reflection Agent",
        "code": "def forward(self, taskInfo):\n    # Unified instruction for reasoning and dynamic reflection\n    instruction = \"Analyze the task step by step. Provide an initial solution, evaluate your reasoning, and identify areas for improvement. Reflect on these areas and suggest a refined answer.\"\n\n    # Instantiate a single agent for the task\n    agent = LLMAgentBase(['thinking', 'answer'], 'Strategic Reflection Agent')\n\n    # Prepare the input to include the task information\n    inputs = [taskInfo]\n\n    # Get the initial response from the agent\n    thinking, answer = agent(inputs, instruction)\n\n    # Set maximum number of refinements based on answer evaluation\n    max_refinements = 3\n    for _ in range(max_refinements):\n        # Combine reflection and possible adjustments into a single call\n        combined_instruction = \"Reflect on your previous answer and reasoning. Assess the effectiveness of your reasoning and propose refinements.\"\n        inputs.append(thinking)\n        inputs.append(answer)\n\n        # Get the refined response after reflection\n        thinking, answer = agent(inputs, combined_instruction)\n\n    return answer",
        "fitness": "95% Bootstrap Confidence Interval: (54.7%, 71.1%), Median: 63.3%",
        "generation": 19,
        "api_calls": 4,
        "structure_label": "Self-Reflection Reasoning",
        "test_fitness": "95% Bootstrap Confidence Interval: (55.2%, 62.0%), Median: 58.6%"
    },
    {
        "thought": "**Insights:**\nTo enhance the reasoning and reflection process while closely adhering to API call limits, I propose a structure that combines both reasoning and immediate self-evaluation into one cohesive process without iterative calls. This design focuses on creating a single instance that processes the task and evaluates its reasoning simultaneously, thus avoiding redundancy and improving efficiency.\n**Overall Idea:**\nThe aim is to have a single LLMAgentBase instance that encompasses both structured reasoning and its evaluation within a unified instruction, allowing the agent to directly provide a solution and its corresponding critique, all in one call. This simplifies the reasoning process and maximizes the use of API resources effectively.\n**Implementation:**\n1. Create a unified instruction that prompts the agent to analyze the task step-by-step and then evaluate the quality of its solution within the same call.\n2. Use a single LLMAgentBase instance to encapsulate this reasoning and evaluation process.\n3. Ensure the output provides both the reasoning and the final answer clearly.",
        "name": "Integrated Reasoning and Evaluation Agent",
        "code": "def forward(self, taskInfo):\n    # Unified instruction for integrated reasoning and evaluation\n    instruction = \"Analyze the task step by step, provide a solution, and critically evaluate your reasoning in one response.\"\n    \n    # Instantiate a single agent for the task\n    agent = LLMAgentBase([\"thinking\", \"answer\"], \"Integrated Reasoning and Evaluation Agent\")\n    \n    # Prepare the input to include the task information\n    inputs = [taskInfo]\n    \n    # Get the response from the agent in a single call\n    response = agent(inputs, instruction)\n    \n    # Return the final answer directly from the response\n    return response[1]  # Assuming response[1] contains the answer based on the Info structure.",
        "fitness": "95% Bootstrap Confidence Interval: (19.5%, 35.2%), Median: 27.3%",
        "generation": 20,
        "api_calls": 1,
        "structure_label": "Self-Reflection Reasoning",
        "test_fitness": "95% Bootstrap Confidence Interval: (24.4%, 30.5%), Median: 27.4%"
    }
]