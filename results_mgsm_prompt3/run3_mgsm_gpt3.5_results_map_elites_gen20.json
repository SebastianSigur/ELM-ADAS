{
    "Chain-of-Thought Reasoning,0": {
        "thought": "By encouraging the LLM to think step by step rather than directly outputting an answer, chain-of-thought reasoning enables complex problem-solving through intermediate steps. This practice improves the model's ability to handle tasks that require deeper reasoning and provides insight into its decision-making process.",
        "name": "Chain-of-Thought",
        "code": "def forward(self, taskInfo):\n    # Instruction for the Chain-of-Thought (CoT) approach\n    # It is an important practice that allows the LLM to think step by step before solving the task.\n    cot_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instantiate a new LLM agent specifically for CoT\n    # To allow LLM thinking before answering, we need to set an additional output field 'thinking'.\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Prepare the inputs for the CoT agent\n    # The input should be a list of Info, and the first one is often the taskInfo\n    cot_agent_inputs = [taskInfo]\n\n    # Get the response from the CoT agent\n    thinking, answer = cot_agent(cot_agent_inputs, cot_instruction)\n\n    # Return only the final answer\n    return answer\n",
        "api_calls": 1,
        "structure_label": "Chain-of-Thought Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (8.6%, 20.3%), Median: 14.1%"
    },
    "Chain-of-Thought Reasoning,1": null,
    "Abstraction to Principles Reasoning,0": {
        "thought": "Let LLM first think about the principles involved in solving this task which could be helpful. By understanding the underlying principles, the model can better reason through the problem and provide a more accurate solution.",
        "name": "Step-back Abstraction",
        "code": "def forward(self, taskInfo):\n        # Instruction for understanding the principles involved in the task\n        principle_instruction = \"What are the physics, chemistry or biology principles and concepts involved in solving this task? First think step by step. Then list all involved principles and explain them.\"\n        \n        # Instruction for solving the task based on the principles\n        cot_instruction = \"Given the question and the involved principle behind the question, think step by step and then solve the task.\"\n        \n        # Instantiate LLM agents\n        principle_agent = LLMAgentBase(['thinking', 'principle'], 'Principle Agent')\n        cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n        \n        # Get the principles involved in the task\n        thinking, principle = principle_agent([taskInfo], principle_instruction)\n\n        # Use the principles to solve the task\n        thinking, answer = cot_agent([taskInfo, thinking, principle], cot_instruction)\n        return answer\n",
        "api_calls": 2,
        "structure_label": "Abstraction to Principles Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (18.0%, 32.8%), Median: 25.0%"
    },
    "Abstraction to Principles Reasoning,1": null,
    "Multi-Agent Reasoning,0": {
        "thought": "**Insights:**\nTo further enhance the architecture, I propose an approach that utilizes collaborative multi-perspective reasoning within a single LLMAgentBase instance. The new instruction will generate answers from multiple mathematical principles simultaneously and reflect critically on these answers before synthesizing the final response. This method not only keeps the implementation efficient with a single API call but also broadens the reasoning spectrum.\n\n**Overall Idea:**\nThis architecture will employ a single instance of LLMAgentBase that will generate multiple responses based on different mathematical principles, allowing for a more thorough exploration of the task. The instruction will request that the agent generate diverse perspectives and critique them collectively before producing a final answer.\n\n**Implementation:**\n1. Use a single LLMAgentBase instance to generate answers based on various mathematical principles in one call.\n2. Formulate a clear instruction that prompts the agent to provide diverse answers from multiple perspectives and to evaluate those answers for clarity, correctness, and applicability.\n3. Ensure that the final answer is synthesized from the evaluations to reflect the best reasoning.",
        "name": "Collaborative Principle Evaluation",
        "code": "def forward(self, taskInfo):\n    # Unified instruction for generating and evaluating multiple answers from different mathematical principles\n    instruction = \"Generate answers to the task based on various mathematical principles. Assess each answer for clarity, correctness, and relevance, then synthesize the best answer from these evaluations.\"\n    agent = LLMAgentBase([\"thinking\", \"final_answer\"], \"Collaborative Principle Evaluation Agent\")\n\n    # Get the response that includes answers and evaluations in one go\n    response = agent([taskInfo], instruction)\n    return response[1]  # Return only the final answer part of the response.",
        "fitness": "95% Bootstrap Confidence Interval: (51.6%, 68.8%), Median: 60.2%",
        "generation": 20,
        "api_calls": 1,
        "structure_label": "Multi-Agent Reasoning"
    },
    "Multi-Agent Reasoning,1": {
        "thought": "**Insights:**\nTo elevate the architecture's effectiveness, I propose incorporating a mechanism for agents to influence each other's outputs dynamically. This would allow the agents to not only generate diverse solutions but also learn from each other's critiques, leading to a more collaborative and refined decision-making process.\n\n**Overall Idea:**\nThe architecture will maintain multiple independent Chain-of-Thought (CoT) agents, but now they will share insights during the critique phase, allowing each subsequent agent to refine its response based on the critiques of others. This feedback loop will increase the overall accuracy and quality of the final answer.\n\n**Implementation:**\n1. Initialize multiple CoT agents to generate initial answers.\n2. After generating answers, implement a critique phase where each agent evaluates its answer and shares insights with other agents.\n3. Allow agents to incorporate feedback from previous critiques into their subsequent responses.\n4. Finalize the answer by aggregating the refined outputs from all agents.",
        "name": "Collaborative Reflection",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    cot_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for self-critique of the answers generated\n    critique_instruction = \"Reflect on your previous answer and suggest any improvements or corrections needed.\"\n    cot_agent = LLMAgentBase([\"thinking\", \"answer\"], \"Chain-of-Thought Agent\")\n\n    N_max = 3  # Number of CoT agents\n\n    # List to collect the responses\n    possible_answers = []\n    all_thinking = []\n\n    # Generate answers from multiple CoT agents\n    for i in range(N_max):\n        thinking, answer = cot_agent([taskInfo], cot_initial_instruction)\n        possible_answers.append(answer)\n        all_thinking.append(thinking)\n\n    # List to collect critiques\n    critiques = []\n\n    # Each agent reflects on its own answer\n    for i in range(N_max):\n        thinking, critique = cot_agent([taskInfo, all_thinking[i], possible_answers[i]], critique_instruction)\n        critiques.append(critique)\n\n    # Final decision-making based on collected answers and critiques\n    final_decision_instruction = \"Given all the above solutions and critiques, reason over them carefully and provide a final answer.\"\n    final_decision_agent = LLMAgentBase([\"thinking\", \"answer\"], \"Final Decision Agent\", temperature=0.1)\n\n    # Aggregate answers and critiques for the final decision\n    final_thinking, final_answer = final_decision_agent([taskInfo] + all_thinking + possible_answers + critiques, final_decision_instruction)\n    return final_answer",
        "fitness": "95% Bootstrap Confidence Interval: (48.4%, 65.6%), Median: 57.0%",
        "generation": 7,
        "api_calls": 7,
        "structure_label": "Multi-Agent Reasoning"
    },
    "Self-Reflection Reasoning,0": {
        "thought": "**Insights:**\nTo enhance the agent's ability to self-reflect and improve its answers within a single API call, I propose a refined architecture that implements a self-evaluation mechanism during the answer generation process. This will allow the agent to identify potential flaws as it constructs its response, ultimately leading to a more accurate and well-reasoned answer without exceeding the API call limit. \n\n**Overall Idea:**\nThe new design will involve a single instance of LLMAgentBase tasked with generating an answer while incorporating a self-critique component that evaluates clarity, correctness, and relevance in real-time. By embedding this critique process directly into the answer generation, we can effectively reduce the number of API calls while enhancing the depth of reflection and improvement in the response. \n\n**Implementation:**\n1. Create a unified instruction that prompts the agent to think through the problem, generate the answer, and simultaneously critique its reasoning.\n2. Utilize a single LLMAgentBase instance to handle this dual-task process, ensuring that all operations are completed within one API call. \n3. Return the final answer after the self-evaluation process is complete.",
        "name": "Integrated Self-Critique Agent",
        "code": "def forward(self, taskInfo):\n    # Unified instruction for generating and critiquing an answer\n    instruction = \"Solve the task step by step. As you generate your answer, evaluate it for clarity, correctness, and completeness, and refine your answer based on this evaluation.\"\n    \n    # Create a single instance of LLMAgentBase\n    expert_agent = LLMAgentBase([\"thinking\", \"final_answer\"], \"Integrated Self-Critique Agent\")\n    \n    # Generate the response that includes both the answer and self-critique in one go\n    response = expert_agent([taskInfo], instruction)\n    return response[1]  # Return only the final answer part from the response.",
        "fitness": "95% Bootstrap Confidence Interval: (48.4%, 65.6%), Median: 57.0%",
        "generation": 10,
        "api_calls": 1,
        "structure_label": "Self-Reflection Reasoning"
    },
    "Self-Reflection Reasoning,1": {
        "thought": "To enhance its performance, an LLM can iteratively improve its answer based on feedback. By reflecting on its previous attempts and incorporating feedback, the model can refine its reasoning and provide a more accurate solution.",
        "name": "Self-Refine (Reflexion)",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    cot_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for reflecting on previous attempts and feedback to improve\n    cot_reflect_instruction = \"Given previous attempts and feedback, carefully consider where you could go wrong in your latest attempt. Using insights from previous attempts, try to solve the task better.\"\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Instruction for providing feedback and correcting the answer\n    critic_instruction = \"Please review the answer above and criticize on where might be wrong. If you are absolutely sure it is correct, output 'True' in 'correct'.\"\n    critic_agent = LLMAgentBase(['feedback', 'correct'], 'Critic Agent')\n    \n    N_max = 5 # Maximum number of attempts\n\n    # Initial attempt\n    cot_inputs = [taskInfo]\n    thinking, answer = cot_agent(cot_inputs, cot_initial_instruction, 0)\n\n    for i in range(N_max):\n        # Get feedback and correct status from the critic\n        feedback, correct = critic_agent([taskInfo, thinking, answer], critic_instruction, i)\n        if correct.content == 'True':\n            break\n            \n        # Add feedback to the inputs for the next iteration\n        cot_inputs.extend([thinking, answer, feedback])\n\n        # Reflect on previous attempts and refine the answer\n        thinking, answer = cot_agent(cot_inputs, cot_reflect_instruction, i + 1)\n    return answer\n",
        "api_calls": 7,
        "structure_label": "Self-Reflection Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (11.7%, 25.0%), Median: 18.0%"
    }
}