[
    {
        "thought": "By encouraging the LLM to think step by step rather than directly outputting an answer, chain-of-thought reasoning enables complex problem-solving through intermediate steps. This practice improves the model's ability to handle tasks that require deeper reasoning and provides insight into its decision-making process.",
        "name": "Chain-of-Thought",
        "code": "def forward(self, taskInfo):\n    # Instruction for the Chain-of-Thought (CoT) approach\n    # It is an important practice that allows the LLM to think step by step before solving the task.\n    cot_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instantiate a new LLM agent specifically for CoT\n    # To allow LLM thinking before answering, we need to set an additional output field 'thinking'.\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Prepare the inputs for the CoT agent\n    # The input should be a list of Info, and the first one is often the taskInfo\n    cot_agent_inputs = [taskInfo]\n\n    # Get the response from the CoT agent\n    thinking, answer = cot_agent(cot_agent_inputs, cot_instruction)\n\n    # Return only the final answer\n    return answer\n",
        "api_calls": 1,
        "structure_label": "Chain-of-Thought Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (8.6%, 20.3%), Median: 14.1%",
        "test_fitness": "95% Bootstrap Confidence Interval: (12.5%, 17.5%), Median: 15.0%"
    },
    {
        "thought": "While an LLM can arrive at the correct answer, its reasoning may vary. By repeatedly asking the same question with high temperature settings, we can generate different reasoning paths. We then combine multiple answers from these Chain-of-Thought (CoT) agents to produce a more accurate final answer through ensembling.",
        "name": "Self-Consistency with Chain-of-Thought",
        "code": "def forward(self, taskInfo):\n    # Instruction for step-by-step reasoning\n    cot_instruction = \"Please think step by step and then solve the task.\"\n    N = 5 # Number of CoT agents\n\n    # Initialize multiple CoT agents with a higher temperature for varied reasoning\n    cot_agents = [LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent', temperature=0.8) for _ in range(N)]\n\n    # Majority voting function to select the most common answer\n    from collections import Counter\n    def majority_voting(answers):\n        return Counter(answers).most_common(1)[0][0]\n    \n    possible_answers = []\n    for i in range(N):\n        thinking, answer = cot_agents[i]([taskInfo], cot_instruction)\n        possible_answers.append(answer.content)\n\n    # Ensembling the answers from multiple CoT agents\n    answer = majority_voting(possible_answers)\n    return answer  \n",
        "api_calls": 5,
        "structure_label": "Multi-Agent Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (8.6%, 20.3%), Median: 14.1%",
        "test_fitness": "95% Bootstrap Confidence Interval: (11.1%, 15.9%), Median: 13.5%"
    },
    {
        "thought": "To enhance its performance, an LLM can iteratively improve its answer based on feedback. By reflecting on its previous attempts and incorporating feedback, the model can refine its reasoning and provide a more accurate solution.",
        "name": "Self-Refine (Reflexion)",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    cot_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for reflecting on previous attempts and feedback to improve\n    cot_reflect_instruction = \"Given previous attempts and feedback, carefully consider where you could go wrong in your latest attempt. Using insights from previous attempts, try to solve the task better.\"\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Instruction for providing feedback and correcting the answer\n    critic_instruction = \"Please review the answer above and criticize on where might be wrong. If you are absolutely sure it is correct, output 'True' in 'correct'.\"\n    critic_agent = LLMAgentBase(['feedback', 'correct'], 'Critic Agent')\n    \n    N_max = 5 # Maximum number of attempts\n\n    # Initial attempt\n    cot_inputs = [taskInfo]\n    thinking, answer = cot_agent(cot_inputs, cot_initial_instruction, 0)\n\n    for i in range(N_max):\n        # Get feedback and correct status from the critic\n        feedback, correct = critic_agent([taskInfo, thinking, answer], critic_instruction, i)\n        if correct.content == 'True':\n            break\n            \n        # Add feedback to the inputs for the next iteration\n        cot_inputs.extend([thinking, answer, feedback])\n\n        # Reflect on previous attempts and refine the answer\n        thinking, answer = cot_agent(cot_inputs, cot_reflect_instruction, i + 1)\n    return answer\n",
        "api_calls": 7,
        "structure_label": "Self-Reflection Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (7.8%, 19.5%), Median: 13.3%",
        "test_fitness": "95% Bootstrap Confidence Interval: (15.5%, 20.9%), Median: 18.1%"
    },
    {
        "thought": "By letting different LLMs debate with each other, we can leverage their diverse perspectives to find better solutions for tasks.",
        "name": "LLM Debate",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    debate_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for debating and updating the solution based on other agents' solutions\n    debate_instruction = \"Given solutions to the problem from other agents, consider their opinions as additional advice. Please think carefully and provide an updated answer.\"\n    \n    # Initialize debate agents with different roles and a moderate temperature for varied reasoning\n    debate_agents = [LLMAgentBase(['thinking', 'answer'], 'Debate Agent', temperature=0.8, role=role) for role in ['Math Professor', 'Grade School Teacher', 'Math Enthusiast']]\n\n    # Instruction for final decision-making based on all debates and solutions\n    final_decision_instruction = \"Given all the above thinking and answers, reason over them carefully and provide a final answer.\"\n    final_decision_agent = LLMAgentBase(['thinking', 'answer'], 'Final Decision Agent', temperature=0.1)\n\n    max_round = 2 # Maximum number of debate rounds\n    all_thinking = [[] for _ in range(max_round)]\n    all_answer = [[] for _ in range(max_round)]\n\n    # Perform debate rounds\n    for r in range(max_round):\n        for i in range(len(debate_agents)):\n            if r == 0:\n                thinking, answer = debate_agents[i]([taskInfo], debate_initial_instruction)\n            else:\n                input_infos = [taskInfo] + [all_thinking[r-1][i]] + all_thinking[r-1][:i] + all_thinking[r-1][i+1:]\n                thinking, answer = debate_agents[i](input_infos, debate_instruction)\n            all_thinking[r].append(thinking)\n            all_answer[r].append(answer)\n    \n    # Make the final decision based on all debate results and solutions\n    thinking, answer = final_decision_agent([taskInfo] + all_thinking[max_round-1] + all_answer[max_round-1], final_decision_instruction)\n    return answer\n",
        "api_calls": 9,
        "structure_label": "Multi-Agent Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (40.6%, 57.8%), Median: 49.2%",
        "test_fitness": "95% Bootstrap Confidence Interval: (45.9%, 52.9%), Median: 49.4%"
    },
    {
        "thought": "Let LLM first think about the principles involved in solving this task which could be helpful. By understanding the underlying principles, the model can better reason through the problem and provide a more accurate solution.",
        "name": "Step-back Abstraction",
        "code": "def forward(self, taskInfo):\n        # Instruction for understanding the principles involved in the task\n        principle_instruction = \"What are the physics, chemistry or biology principles and concepts involved in solving this task? First think step by step. Then list all involved principles and explain them.\"\n        \n        # Instruction for solving the task based on the principles\n        cot_instruction = \"Given the question and the involved principle behind the question, think step by step and then solve the task.\"\n        \n        # Instantiate LLM agents\n        principle_agent = LLMAgentBase(['thinking', 'principle'], 'Principle Agent')\n        cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n        \n        # Get the principles involved in the task\n        thinking, principle = principle_agent([taskInfo], principle_instruction)\n\n        # Use the principles to solve the task\n        thinking, answer = cot_agent([taskInfo, thinking, principle], cot_instruction)\n        return answer\n",
        "api_calls": 2,
        "structure_label": "Abstraction to Principles Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (18.0%, 32.8%), Median: 25.0%",
        "test_fitness": "95% Bootstrap Confidence Interval: (22.0%, 28.0%), Median: 25.0%"
    },
    {
        "thought": "Similar to Quality-Diversity methods, let LLM generate multiple diverse interesting solutions could help. By encouraging the model to explore different reasoning paths, we can increase the chances of finding the best solution.",
        "name": "Quality-Diversity",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    cot_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for giving diverse answers\n    qd_instruction = \"Given previous attempts, try to come up with another interesting way to solve the task.\"\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Instruction for final decision-making based on collected reasoning and answers\n    final_decision_instruction = \"Given all the above solutions, reason over them carefully and provide a final answer.\"\n    final_decision_agent = LLMAgentBase(['thinking', 'answer'], 'Final Decision Agent', temperature=0.1)\n    \n    N_max = 3 # Maximum number of attempts\n\n    # Initial attempt\n    cot_inputs = [taskInfo]\n    possible_answers = []\n    thinking, answer = cot_agent(cot_inputs, cot_initial_instruction, 0)\n\n    # Add the answer to the list of possible answers\n    possible_answers.extend([thinking, answer])\n\n    for i in range(N_max):\n        # Reflect on previous attempts and generate another interesting answer\n        cot_inputs.extend([thinking, answer])\n\n        # Generate another interesting answer\n        thinking, answer = cot_agent(cot_inputs, qd_instruction, i + 1)\n        possible_answers.extend([thinking, answer])\n\n    # Make the final decision based on all generated answers\n    thinking, answer = final_decision_agent([taskInfo] + possible_answers, final_decision_instruction)\n    return answer\n",
        "api_calls": 7,
        "structure_label": "Multi-Agent Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (49.2%, 66.4%), Median: 57.8%",
        "test_fitness": "95% Bootstrap Confidence Interval: (50.0%, 57.0%), Median: 53.5%"
    },
    {
        "thought": "Similar to Auto-GPT and expert prompting, we can use dynamic control flow in the design to let the agent decide what expert we should use.",
        "name": "Dynamic Assignment of Roles",
        "code": "def forward(self, taskInfo):\n        # Instruction for step-by-step reasoning\n        cot_instruction = \"Please think step by step and then solve the task.\"\n        expert_agents = [LLMAgentBase(['thinking', 'answer'], 'Expert Agent', role=role) for role in ['Math Professor', 'Grade School Teacher', 'Math Enthusiast', 'Helpful Assistant']]\n\n        # Instruction for routing the task to the appropriate expert\n        routing_instruction = \"Given the task, please choose an Expert to answer the question. Choose from: Math Professor, Grade School Teacher, Math Enthusiast.\"\n        routing_agent = LLMAgentBase(['choice'], 'Routing agent')\n\n        # Get the choice of expert to route the task\n        choice = routing_agent([taskInfo], routing_instruction)[0]\n\n        if 'professor' in choice.content.lower():\n            expert_id = 0\n        elif 'teacher' in choice.content.lower():\n            expert_id = 1\n        elif 'enthusiast' in choice.content.lower():\n            expert_id = 2\n        else:\n            expert_id = 3 # Default to helpful assistant\n\n        thinking, answer = expert_agents[expert_id]([taskInfo], cot_instruction)\n        return answer\n",
        "api_calls": 4,
        "structure_label": "Multi-Agent Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (4.7%, 14.8%), Median: 9.4%",
        "test_fitness": "95% Bootstrap Confidence Interval: (11.8%, 16.6%), Median: 14.1%"
    },
    {
        "thought": "**Insights:**\nThe goal is to create an architecture that effectively integrates the critique and revision phases while still allowing for structured reasoning. By refining the prompt to focus on clear output formats and direct reflections on critiques, we can yield a more insightful final answer. The architecture will include a robust instruction set that emphasizes clarity and relevance, ensuring that the agent\u2019s reasoning process remains targeted and efficient. This iteration aims to maximize the effectiveness of both critique and solution processes, streamlining the workflow in a single call.\n\n**Overall Idea:**\nThe new architecture will guide the agent through a structured path where it identifies principles, generates an answer, critiques its reasoning, and revises the answer all within the same instruction. This will help the agent to not only learn from its critiques but also to actively apply those insights to refine its outputs immediately, thereby increasing the overall effectiveness of the reasoning process without exceeding API limits.",
        "name": "Integrated Reflective Reasoning",
        "code": "def forward(self, taskInfo):\n    # Instruction for structured reasoning and integrated critique\n    instruction = (\"1. Identify the mathematical principles involved in solving this problem.\\n\"\n                   \"2. Provide a detailed answer based on those principles.\\n\"\n                   \"3. Critique your answer, identifying strengths and weaknesses in your reasoning.\\n\"\n                   \"4. Revise your answer based on the critique, specifying changes made and why.\\n\"\n                   \"Format your response strictly as JSON with the fields: 'principles', 'answer', 'critique', and 'final_answer'.\")\n    \n    # Instantiate a single LLM agent for the integrated reasoning process\n    agent = LLMAgentBase(['principles', 'answer', 'critique', 'final_answer'], 'Integrated Reflective Reasoning')\n    \n    # Call the agent with the task information to perform reasoning and critique in one go\n    response = agent([taskInfo], instruction)\n    \n    # Prepare result dictionary from the response using dictionary comprehension\n    result = {info.name: info.content for info in response}\n\n    # Return the final answer from the structured results\n    return result['final_answer']",
        "fitness": "95% Bootstrap Confidence Interval: (20.3%, 35.9%), Median: 28.1%",
        "generation": 19,
        "api_calls": 1,
        "structure_label": "Self-Reflection Reasoning",
        "test_fitness": "95% Bootstrap Confidence Interval: (20.8%, 26.8%), Median: 23.8%"
    },
    {
        "thought": "**Insights:**\nThe goal is to enhance both the reasoning and critique phases by integrating explicit principles that guide the solution. By making the reasoning process more transparent, the model can better reflect on its steps. This architecture will encourage the model to identify relevant mathematical principles before generating answers, leading to stronger and more informed critiques. \n**Overall Idea:**\nThe architecture will involve an initial identification of principles, followed by generating an answer based on these principles, critiquing the answer, and finally revising it based on both the critique and the principles identified. This structured approach should lead to a more comprehensive understanding and effective problem-solving. \n**Implementation:**\n1. Enhance the instruction to include a step for principle identification before solving the task. \n2. Use a single LLMAgentBase instance to optimize API usage, ensuring all steps are executed smoothly. \n3. Format the response to provide clarity on each phase, ensuring that the principles, answer, critique, and final revised answer are clearly articulated.",
        "name": "Principle-Based Reflective Reasoning",
        "code": "def forward(self, taskInfo):\n    # Instruction for identifying principles, generating an answer, critiquing it, and revising it\n    instruction = (\"Please follow these steps carefully:\\n\"\n                   \"1. Identify the mathematical principles involved in solving this problem.\\n\"\n                   \"2. Think step by step to provide your answer based on those principles.\\n\"\n                   \"3. Review your answer, highlighting strengths and weaknesses in your reasoning.\\n\"\n                   \"4. Based on the critique, revise your original answer, detailing the changes made and why.\\n\"\n                   \"Format your responses in JSON with the fields: 'principles', 'initial_answer', 'critique', and 'final_answer'.\")\n\n    # Instantiate a single LLM agent for the entire reasoning process\n    agent = LLMAgentBase(['principles', 'initial_answer', 'critique', 'final_answer'], 'Principle-Based Reflective Agent')\n\n    # Call the agent with the task information to perform reasoning and critique in one go\n    response = agent([taskInfo], instruction)\n\n    # Initialize result structure\n    result = {'principles': '', 'initial_answer': '', 'critique': '', 'final_answer': ''}\n\n    # Populate the results based on the response\n    for info in response:\n        if info.name == 'principles':\n            result['principles'] = info.content\n        elif info.name == 'initial_answer':\n            result['initial_answer'] = info.content\n        elif info.name == 'critique':\n            result['critique'] = info.content\n        elif info.name == 'final_answer':\n            result['final_answer'] = info.content\n\n    # Return only the final answer, ensuring clarity and completeness\n    return result['final_answer']",
        "fitness": "95% Bootstrap Confidence Interval: (18.8%, 34.4%), Median: 26.6%",
        "generation": 13,
        "api_calls": 1,
        "structure_label": "Self-Reflection Reasoning",
        "test_fitness": "95% Bootstrap Confidence Interval: (18.5%, 24.1%), Median: 21.2%"
    },
    {
        "thought": "**Insights:**\nThe architecture can be enhanced by allowing the agent to engage in a two-step process where it not only critiques but also reflects on the critiques to generate a final answer iteratively. By doing this, we can introduce a more dynamic and adaptive reasoning process. The new architecture will first generate answers, critique them, and then use insights from the critiques to refine the answers iteratively in a single API call.\n\n**Overall Idea:**\nThis architecture will utilize a single agent to generate diverse responses, followed by a structured critique phase. After the critique, the agent will synthesize insights from critiques and produce a final refined answer. This allows for improved performance based on the critiques while adhering to the rule of few API calls.",
        "name": "Iterative Reflective Reasoning Agent",
        "code": "def forward(self, taskInfo):\n    # Instruction for generating diverse answers and critiquing them\n    instruction = (\"Please think step by step and provide three varied answers to the task. \"\n                   \"For each answer, evaluate its strengths and weaknesses in your reasoning, and provide suggestions for improvement. \"\n                   \"Finally, based on these evaluations, provide a refined final answer that incorporates insights from your critiques.\")\n\n    # Instantiate a single LLM agent for generating and critiquing answers\n    agent = LLMAgentBase(['answers', 'critiques', 'final_answer'], 'Iterative Reflective Reasoning Agent')\n\n    # Call the agent with the task information to perform reasoning and critique in one go\n    response = agent([taskInfo], instruction)\n\n    # Structure to hold outputs\n    result = { 'answers': [], 'critiques': [], 'final_answer': '' }\n\n    # Populate the results based on the response\n    for info in response:\n        if info.name == 'answers':\n            result['answers'] = info.content\n        elif info.name == 'critiques':\n            result['critiques'] = info.content\n        elif info.name == 'final_answer':\n            result['final_answer'] = info.content\n\n    # Directly return the final answer if available\n    return result['final_answer'] if result['final_answer'] else 'No final answer could be generated.'",
        "fitness": "95% Bootstrap Confidence Interval: (18.8%, 33.6%), Median: 25.8%",
        "generation": 15,
        "api_calls": 1,
        "structure_label": "Self-Reflection Reasoning",
        "test_fitness": "95% Bootstrap Confidence Interval: (21.1%, 27.1%), Median: 24.1%"
    }
]