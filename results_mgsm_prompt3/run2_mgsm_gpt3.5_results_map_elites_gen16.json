{
    "Chain-of-Thought Reasoning,0": {
        "thought": "By encouraging the LLM to think step by step rather than directly outputting an answer, chain-of-thought reasoning enables complex problem-solving through intermediate steps. This practice improves the model's ability to handle tasks that require deeper reasoning and provides insight into its decision-making process.",
        "name": "Chain-of-Thought",
        "code": "def forward(self, taskInfo):\n    # Instruction for the Chain-of-Thought (CoT) approach\n    # It is an important practice that allows the LLM to think step by step before solving the task.\n    cot_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instantiate a new LLM agent specifically for CoT\n    # To allow LLM thinking before answering, we need to set an additional output field 'thinking'.\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Prepare the inputs for the CoT agent\n    # The input should be a list of Info, and the first one is often the taskInfo\n    cot_agent_inputs = [taskInfo]\n\n    # Get the response from the CoT agent\n    thinking, answer = cot_agent(cot_agent_inputs, cot_instruction)\n\n    # Return only the final answer\n    return answer\n",
        "api_calls": 1,
        "structure_label": "Chain-of-Thought Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (8.6%, 20.3%), Median: 14.1%"
    },
    "Chain-of-Thought Reasoning,1": null,
    "Abstraction to Principles Reasoning,0": {
        "thought": "Let LLM first think about the principles involved in solving this task which could be helpful. By understanding the underlying principles, the model can better reason through the problem and provide a more accurate solution.",
        "name": "Step-back Abstraction",
        "code": "def forward(self, taskInfo):\n        # Instruction for understanding the principles involved in the task\n        principle_instruction = \"What are the physics, chemistry or biology principles and concepts involved in solving this task? First think step by step. Then list all involved principles and explain them.\"\n        \n        # Instruction for solving the task based on the principles\n        cot_instruction = \"Given the question and the involved principle behind the question, think step by step and then solve the task.\"\n        \n        # Instantiate LLM agents\n        principle_agent = LLMAgentBase(['thinking', 'principle'], 'Principle Agent')\n        cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n        \n        # Get the principles involved in the task\n        thinking, principle = principle_agent([taskInfo], principle_instruction)\n\n        # Use the principles to solve the task\n        thinking, answer = cot_agent([taskInfo, thinking, principle], cot_instruction)\n        return answer\n",
        "api_calls": 2,
        "structure_label": "Abstraction to Principles Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (18.0%, 32.8%), Median: 25.0%"
    },
    "Abstraction to Principles Reasoning,1": null,
    "Multi-Agent Reasoning,0": {
        "thought": "**Insights:**\nThe architecture can benefit from a more explicit critique process between generated answers. By structuring the critique phase to ensure that the agents not only discuss but also refine their answers based on clear insights, we can enhance the final output significantly. This approach maintains the collaborative spirit while ensuring that critiques effectively contribute to improving the final consensus. \n\n**Overall Idea:**\nThis architecture will utilize a single LLM agent to generate answers and then initiate a structured critique phase, allowing agents to discuss strengths and weaknesses of each answer. This will not only engage them in a meaningful way but also enrich the final output based on diverse perspectives while adhering to the rule of few API calls.\n\n**Implementation:**\n1. Generate three varied answers from the task using a single LLMAgentBase instance.\n2. In the same instance, facilitate a structured discussion phase where each answer is critiqued and refined.\n3. Structure the output to clearly present the final answer based on insights gained from the critique process.",
        "name": "Collaborative Structured Reasoning Agent",
        "code": "def forward(self, taskInfo):\n    # Instruction for generating diverse answers and facilitating a critique phase\n    instruction = (\"Please think step by step and provide three varied answers to the task. \"\n                   \"After generating the answers, discuss each one collaboratively, identifying strengths and weaknesses. \"\n                   \"Finally, based on the discussions, provide a refined consensus answer that incorporates insights from the critiques.\")\n    \n    # Instantiate a single LLM agent to handle both generating and discussing answers\n    agent = LLMAgentBase(['final_answer'], 'Collaborative Structured Reasoning Agent')\n    \n    # Call the agent with the task information to generate diverse answers and facilitate critique\n    response = agent([taskInfo], instruction)\n    \n    # Initialize final_answer variable\n    final_answer = ''\n    \n    # Check if the response is valid before attempting to access content\n    if response:\n        final_answer = response[0].content if response[0].name == 'final_answer' else 'No answer provided.'\n    else:\n        final_answer = 'No answer provided.'\n    \n    # Return the final answer\n    return final_answer",
        "fitness": "95% Bootstrap Confidence Interval: (8.6%, 21.1%), Median: 14.8%",
        "generation": 11,
        "api_calls": 1,
        "structure_label": "Multi-Agent Reasoning"
    },
    "Multi-Agent Reasoning,1": {
        "thought": "Similar to Quality-Diversity methods, let LLM generate multiple diverse interesting solutions could help. By encouraging the model to explore different reasoning paths, we can increase the chances of finding the best solution.",
        "name": "Quality-Diversity",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    cot_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for giving diverse answers\n    qd_instruction = \"Given previous attempts, try to come up with another interesting way to solve the task.\"\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Instruction for final decision-making based on collected reasoning and answers\n    final_decision_instruction = \"Given all the above solutions, reason over them carefully and provide a final answer.\"\n    final_decision_agent = LLMAgentBase(['thinking', 'answer'], 'Final Decision Agent', temperature=0.1)\n    \n    N_max = 3 # Maximum number of attempts\n\n    # Initial attempt\n    cot_inputs = [taskInfo]\n    possible_answers = []\n    thinking, answer = cot_agent(cot_inputs, cot_initial_instruction, 0)\n\n    # Add the answer to the list of possible answers\n    possible_answers.extend([thinking, answer])\n\n    for i in range(N_max):\n        # Reflect on previous attempts and generate another interesting answer\n        cot_inputs.extend([thinking, answer])\n\n        # Generate another interesting answer\n        thinking, answer = cot_agent(cot_inputs, qd_instruction, i + 1)\n        possible_answers.extend([thinking, answer])\n\n    # Make the final decision based on all generated answers\n    thinking, answer = final_decision_agent([taskInfo] + possible_answers, final_decision_instruction)\n    return answer\n",
        "api_calls": 7,
        "structure_label": "Multi-Agent Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (49.2%, 66.4%), Median: 57.8%"
    },
    "Self-Reflection Reasoning,0": {
        "thought": "**Insights:**\nThe goal is to enhance both the reasoning and critique phases by integrating explicit principles that guide the solution. By making the reasoning process more transparent, the model can better reflect on its steps. This architecture will encourage the model to identify relevant mathematical principles before generating answers, leading to stronger and more informed critiques. \n**Overall Idea:**\nThe architecture will involve an initial identification of principles, followed by generating an answer based on these principles, critiquing the answer, and finally revising it based on both the critique and the principles identified. This structured approach should lead to a more comprehensive understanding and effective problem-solving. \n**Implementation:**\n1. Enhance the instruction to include a step for principle identification before solving the task. \n2. Use a single LLMAgentBase instance to optimize API usage, ensuring all steps are executed smoothly. \n3. Format the response to provide clarity on each phase, ensuring that the principles, answer, critique, and final revised answer are clearly articulated.",
        "name": "Principle-Based Reflective Reasoning",
        "code": "def forward(self, taskInfo):\n    # Instruction for identifying principles, generating an answer, critiquing it, and revising it\n    instruction = (\"Please follow these steps carefully:\\n\"\n                   \"1. Identify the mathematical principles involved in solving this problem.\\n\"\n                   \"2. Think step by step to provide your answer based on those principles.\\n\"\n                   \"3. Review your answer, highlighting strengths and weaknesses in your reasoning.\\n\"\n                   \"4. Based on the critique, revise your original answer, detailing the changes made and why.\\n\"\n                   \"Format your responses in JSON with the fields: 'principles', 'initial_answer', 'critique', and 'final_answer'.\")\n\n    # Instantiate a single LLM agent for the entire reasoning process\n    agent = LLMAgentBase(['principles', 'initial_answer', 'critique', 'final_answer'], 'Principle-Based Reflective Agent')\n\n    # Call the agent with the task information to perform reasoning and critique in one go\n    response = agent([taskInfo], instruction)\n\n    # Initialize result structure\n    result = {'principles': '', 'initial_answer': '', 'critique': '', 'final_answer': ''}\n\n    # Populate the results based on the response\n    for info in response:\n        if info.name == 'principles':\n            result['principles'] = info.content\n        elif info.name == 'initial_answer':\n            result['initial_answer'] = info.content\n        elif info.name == 'critique':\n            result['critique'] = info.content\n        elif info.name == 'final_answer':\n            result['final_answer'] = info.content\n\n    # Return only the final answer, ensuring clarity and completeness\n    return result['final_answer']",
        "fitness": "95% Bootstrap Confidence Interval: (18.8%, 34.4%), Median: 26.6%",
        "generation": 13,
        "api_calls": 1,
        "structure_label": "Self-Reflection Reasoning"
    },
    "Self-Reflection Reasoning,1": {
        "thought": "To enhance its performance, an LLM can iteratively improve its answer based on feedback. By reflecting on its previous attempts and incorporating feedback, the model can refine its reasoning and provide a more accurate solution.",
        "name": "Self-Refine (Reflexion)",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    cot_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for reflecting on previous attempts and feedback to improve\n    cot_reflect_instruction = \"Given previous attempts and feedback, carefully consider where you could go wrong in your latest attempt. Using insights from previous attempts, try to solve the task better.\"\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Instruction for providing feedback and correcting the answer\n    critic_instruction = \"Please review the answer above and criticize on where might be wrong. If you are absolutely sure it is correct, output 'True' in 'correct'.\"\n    critic_agent = LLMAgentBase(['feedback', 'correct'], 'Critic Agent')\n    \n    N_max = 5 # Maximum number of attempts\n\n    # Initial attempt\n    cot_inputs = [taskInfo]\n    thinking, answer = cot_agent(cot_inputs, cot_initial_instruction, 0)\n\n    for i in range(N_max):\n        # Get feedback and correct status from the critic\n        feedback, correct = critic_agent([taskInfo, thinking, answer], critic_instruction, i)\n        if correct.content == 'True':\n            break\n            \n        # Add feedback to the inputs for the next iteration\n        cot_inputs.extend([thinking, answer, feedback])\n\n        # Reflect on previous attempts and refine the answer\n        thinking, answer = cot_agent(cot_inputs, cot_reflect_instruction, i + 1)\n    return answer\n",
        "api_calls": 7,
        "structure_label": "Self-Reflection Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (7.8%, 19.5%), Median: 13.3%"
    }
}