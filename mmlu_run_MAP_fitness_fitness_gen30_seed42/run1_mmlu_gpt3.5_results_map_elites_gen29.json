{
    "Linear Chain-of-Thought,0": {
        "thought": "By encouraging the LLM to think step by step rather than directly outputting an answer, chain-of-thought reasoning enables complex problem-solving through intermediate steps. This practice improves the model's ability to handle tasks that require deeper reasoning and provides insight into its decision-making process.",
        "name": "Chain-of-Thought",
        "code": "def forward(self, taskInfo):\n    # Instruction for the Chain-of-Thought (CoT) approach\n    # It is an important practice that allows the LLM to think step by step before solving the task.\n    cot_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instantiate a new LLM agent specifically for CoT\n    # To allow LLM thinking before answering, we need to set an additional output field 'thinking'.\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Prepare the inputs for the CoT agent\n    # The input should be a list of Info, and the first one is often the taskInfo\n    cot_agent_inputs = [taskInfo]\n\n    # Get the response from the CoT agent\n    thinking, answer = cot_agent(cot_agent_inputs, cot_instruction)\n\n    # Return only the final answer\n    return answer\n",
        "api_calls": 1,
        "structure_label": "Linear Chain-of-Thought",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (71.1%, 85.2%), Median: 78.1%"
    },
    "Linear Chain-of-Thought,1": null,
    "Iterative Refinement,0": {
        "thought": "**Insights:**\nTo create a more innovative architecture, I propose a 'Refinement with Feedback Loop' approach that incorporates a structured feedback mechanism within a single agent call while allowing for iterative updates. This can reduce the number of API calls by utilizing a single agent for both initial response generation and iterative feedback refinement. \n**Overall Idea:**\nThis architecture will still emphasize iterative improvement but will encapsulate the feedback and refinement within fewer calls. By allowing the agent to self-reflect and improve based on its output in a more guided manner, we can maintain performance while maximizing efficiency. \n**Implementation:**\n1. Initialize a single LLM agent dedicated to both generating initial answers and refining them.\n2. Set up a structured loop for several iterations of refinement.\n3. Each iteration will involve the agent evaluating its prior output and suggesting improvements, effectively utilizing the same agent to minimize API calls.",
        "name": "Refinement with Feedback Loop",
        "code": "def forward(self, taskInfo):\n    # Instruction for task analysis and iterative refinement\n    instruction = \"Analyze the task and provide an initial answer. Then, reflect and refine your answer step by step.\"\n    \n    # Initialize the LLM agent for both analysis and refinement\n    single_agent = LLMAgentBase([\"thinking\", \"answer\"], \"Refinement Agent\", temperature=0.6)\n    \n    max_iterations = 3  # Define the number of refinement iterations\n    inputs = [taskInfo]  # Start with the task information\n    \n    # First call for initial analysis\n    thinking, current_answer = single_agent(inputs, instruction)  # 1 call\n    \n    # Store the answer and iterate for refinement\n    for i in range(max_iterations):  # 3 iterations\n        inputs = [taskInfo, current_answer]  # Prepare inputs for the next iteration\n        thinking, current_answer = single_agent(inputs, instruction)  # 1 call per iteration\n    \n    return current_answer",
        "fitness": "95% Bootstrap Confidence Interval: (68.8%, 83.6%), Median: 76.6%",
        "generation": 6,
        "api_calls": 4,
        "structure_label": "Iterative Refinement"
    },
    "Iterative Refinement,1": {
        "thought": "To enhance its performance, an LLM can iteratively improve its answer based on feedback. By reflecting on its previous attempts and incorporating feedback, the model can refine its reasoning and provide a more accurate solution.",
        "name": "Self-Refine (Reflexion)",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    cot_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for reflecting on previous attempts and feedback to improve\n    cot_reflect_instruction = \"Given previous attempts and feedback, carefully consider where you could go wrong in your latest attempt. Using insights from previous attempts, try to solve the task better.\"\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Instruction for providing feedback and correcting the answer\n    critic_instruction = \"Please review the answer above and criticize on where might be wrong. If you are absolutely sure it is correct, output 'True' in 'correct'.\"\n    critic_agent = LLMAgentBase(['feedback', 'correct'], 'Critic Agent')\n    \n    N_max = 5 # Maximum number of attempts\n\n    # Initial attempt\n    cot_inputs = [taskInfo]\n    thinking, answer = cot_agent(cot_inputs, cot_initial_instruction, 0)\n\n    for i in range(N_max):\n        # Get feedback and correct status from the critic\n        feedback, correct = critic_agent([taskInfo, thinking, answer], critic_instruction, i)\n        if correct.content == 'True':\n            break\n            \n        # Add feedback to the inputs for the next iteration\n        cot_inputs.extend([thinking, answer, feedback])\n\n        # Reflect on previous attempts and refine the answer\n        thinking, answer = cot_agent(cot_inputs, cot_reflect_instruction, i + 1)\n    return answer\n",
        "api_calls": 10,
        "structure_label": "Iterative Refinement",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (68.8%, 83.6%), Median: 76.6%"
    },
    "Tree-of-Thought,0": null,
    "Tree-of-Thought,1": null,
    "Decompositional Reasoning,0": {
        "thought": "Similar to Auto-GPT and expert prompting, we can use dynamic control flow in the design to let the agent decide what expert we should use.",
        "name": "Dynamic Assignment of Roles",
        "code": "def forward(self, taskInfo):\n        # Instruction for step-by-step reasoning\n        cot_instruction = \"Please think step by step and then solve the task.\"\n        expert_agents = [LLMAgentBase(['thinking', 'answer'], 'Expert Agent', role=role) for role in ['Physics Expert', 'Chemistry Expert', 'Biology Expert', 'Science Generalist']]\n\n        # Instruction for routing the task to the appropriate expert\n        routing_instruction = \"Given the task, please choose an Expert to answer the question. Choose from: Physics, Chemistry, Biology Expert, or Science Generalist.\"\n        routing_agent = LLMAgentBase(['choice'], 'Routing agent')\n\n        # Get the choice of expert to route the task\n        choice = routing_agent([taskInfo], routing_instruction)[0]\n\n        if 'physics' in choice.content.lower():\n            expert_id = 0\n        elif 'chemistry' in choice.content.lower():\n            expert_id = 1\n        elif 'biology' in choice.content.lower():\n            expert_id = 2\n        else:\n            expert_id = 3 # Default to Science Generalist\n\n        thinking, answer = expert_agents[expert_id]([taskInfo], cot_instruction)\n        return answer\n",
        "api_calls": 4,
        "structure_label": "Decompositional Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (68.8%, 83.6%), Median: 76.6%"
    },
    "Decompositional Reasoning,1": null,
    "Multi-Agent Reasoning,0": {
        "thought": "**Insights:**\nTo enhance this architecture, I propose a 'Consensus-Based Insight Aggregator' model that focuses on not just generating insights from different perspectives, but also validating these insights before synthesizing them into a final answer. This will add an additional layer of verification and ensure that the insights are robust and relevant.\n**Overall Idea:**\nThe design will involve agents focusing on specific dimensions of the problem, such as factual accuracy, contextual relevance, and interpretative depth, followed by a validation phase where a separate agent assesses the quality of insights. Finally, a consensus agent will synthesize these validated insights into a coherent answer.",
        "name": "Consensus-Based Insight Aggregator",
        "code": "def forward(self, taskInfo):\n    # Step 1: Define specific instructions for analyzing the task\n    instructions = [\n        \"Analyze the task's factual accuracy.\",\n        \"Analyze the task's contextual background.\",\n        \"Analyze the task's interpretative implications.\"\n    ]\n\n    # Step 2: Initialize a single agent to provide various focused insights\n    focused_analysis_agent = LLMAgentBase(['thinking', 'insights'], 'Focused Analysis Agent')\n    # Collect insights by providing all perspectives at once in a single call\n    insights_info = focused_analysis_agent([taskInfo, instructions], 'Provide insights based on the focused perspectives.')  # 1 call\n\n    # Step 3: Introduce a validation agent to check the insights\n    validation_agent = LLMAgentBase(['thinking', 'validated_insights'], 'Validation Agent')\n    validation_instruction = 'Validate the insights provided and assess their relevance and accuracy.'\n    validated_insights_info = validation_agent([taskInfo, insights_info], validation_instruction)  # 2nd call\n\n    # Step 4: Prepare consensus instruction\n    consensus_instruction = 'Combine the validated insights to reach a final answer.'\n    synthesis_agent = LLMAgentBase(['thinking', 'final_answer'], 'Synthesis Agent')\n    final_answer_info = synthesis_agent([taskInfo, validated_insights_info], consensus_instruction)  # 3rd call\n\n    return final_answer_info[1]  # Return the final answer content",
        "fitness": "95% Bootstrap Confidence Interval: (71.1%, 85.2%), Median: 78.1%",
        "generation": 14,
        "api_calls": 3,
        "structure_label": "Multi-Agent Reasoning"
    },
    "Multi-Agent Reasoning,1": {
        "thought": "By letting different LLMs debate with each other, we can leverage their diverse perspectives to find better solutions for tasks.",
        "name": "LLM Debate",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    debate_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for debating and updating the solution based on other agents' solutions\n    debate_instruction = \"Given solutions to the problem from other agents, consider their opinions as additional advice. Please think carefully and provide an updated answer.\"\n    \n    # Initialize debate agents with different roles and a moderate temperature for varied reasoning\n    debate_agents = [LLMAgentBase(['thinking', 'answer'], 'Debate Agent', temperature=0.8, role=role) for role in ['Biology Expert', 'Physics Expert', 'Chemistry Expert', 'Science Generalist']]\n\n    # Instruction for final decision-making based on all debates and solutions\n    final_decision_instruction = \"Given all the above thinking and answers, reason over them carefully and provide a final answer.\"\n    final_decision_agent = LLMAgentBase(['thinking', 'answer'], 'Final Decision Agent', temperature=0.1)\n\n    max_round = 2 # Maximum number of debate rounds\n    all_thinking = [[] for _ in range(max_round)]\n    all_answer = [[] for _ in range(max_round)]\n\n    # Perform debate rounds\n    for r in range(max_round):\n        for i in range(len(debate_agents)):\n            if r == 0:\n                thinking, answer = debate_agents[i]([taskInfo], debate_initial_instruction)\n            else:\n                input_infos = [taskInfo] + [all_thinking[r-1][i]] + all_thinking[r-1][:i] + all_thinking[r-1][i+1:]\n                thinking, answer = debate_agents[i](input_infos, debate_instruction)\n            all_thinking[r].append(thinking)\n            all_answer[r].append(answer)\n    \n    # Make the final decision based on all debate results and solutions\n    thinking, answer = final_decision_agent([taskInfo] + all_thinking[max_round-1] + all_answer[max_round-1], final_decision_instruction)\n    return answer\n",
        "api_calls": 14,
        "structure_label": "Multi-Agent Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (71.1%, 85.2%), Median: 78.1%"
    },
    "Abstraction to Principles Reasoning,0": {
        "thought": "Let LLM first think about the principles involved in solving this task which could be helpful. By understanding the underlying principles, the model can better reason through the problem and provide a more accurate solution.",
        "name": "Step-back Abstraction",
        "code": "def forward(self, taskInfo):\n        # Instruction for understanding the principles involved in the task\n        principle_instruction = \"What are the physics, chemistry or biology principles and concepts involved in solving this task? First think step by step. Then list all involved principles and explain them.\"\n        \n        # Instruction for solving the task based on the principles\n        cot_instruction = \"Given the question and the involved principle behind the question, think step by step and then solve the task.\"\n        \n        # Instantiate LLM agents\n        principle_agent = LLMAgentBase(['thinking', 'principle'], 'Principle Agent')\n        cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n        \n        # Get the principles involved in the task\n        thinking, principle = principle_agent([taskInfo], principle_instruction)\n\n        # Use the principles to solve the task\n        thinking, answer = cot_agent([taskInfo, thinking, principle], cot_instruction)\n        return answer\n",
        "api_calls": 4,
        "structure_label": "Abstraction to Principles Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (67.2%, 82.0%), Median: 75.0%"
    },
    "Abstraction to Principles Reasoning,1": null
}