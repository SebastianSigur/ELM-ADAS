[
    {
        "thought": "By encouraging the LLM to think step by step rather than directly outputting an answer, chain-of-thought reasoning enables complex problem-solving through intermediate steps. This practice improves the model's ability to handle tasks that require deeper reasoning and provides insight into its decision-making process.",
        "name": "Chain-of-Thought",
        "code": "def forward(self, taskInfo):\n    # Instruction for the Chain-of-Thought (CoT) approach\n    # It is an important practice that allows the LLM to think step by step before solving the task.\n    cot_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instantiate a new LLM agent specifically for CoT\n    # To allow LLM thinking before answering, we need to set an additional output field 'thinking'.\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Prepare the inputs for the CoT agent\n    # The input should be a list of Info, and the first one is often the taskInfo\n    cot_agent_inputs = [taskInfo]\n\n    # Get the response from the CoT agent\n    thinking, answer = cot_agent(cot_agent_inputs, cot_instruction)\n\n    # Return only the final answer\n    return answer\n",
        "api_calls": 1,
        "structure_label": "Linear Chain-of-Thought",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (68.8%, 83.6%), Median: 76.6%",
        "test_fitness": "95% Bootstrap Confidence Interval: (68.1%, 74.4%), Median: 71.2%"
    },
    {
        "thought": "While an LLM can arrive at the correct answer, its reasoning may vary. By repeatedly asking the same question with high temperature settings, we can generate different reasoning paths. We then combine multiple answers from these Chain-of-Thought (CoT) agents to produce a more accurate final answer through ensembling.",
        "name": "Self-Consistency with Chain-of-Thought",
        "code": "def forward(self, taskInfo):\n    # Instruction for step-by-step reasoning\n    cot_instruction = \"Please think step by step and then solve the task.\"\n    N = 5 # Number of CoT agents\n\n    # Initialize multiple CoT agents with a higher temperature for varied reasoning\n    cot_agents = [LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent', temperature=0.8) for _ in range(N)]\n\n    # Majority voting function to select the most common answer\n    from collections import Counter\n    def majority_voting(answers):\n        return Counter(answers).most_common(1)[0][0]\n    \n    possible_answers = []\n    for i in range(N):\n        thinking, answer = cot_agents[i]([taskInfo], cot_instruction)\n        possible_answers.append(answer.content)\n\n    # Ensembling the answers from multiple CoT agents\n    answer = majority_voting(possible_answers)\n    return answer  \n",
        "api_calls": 5,
        "structure_label": "Multi-Agent Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (68.8%, 83.6%), Median: 76.6%",
        "test_fitness": "95% Bootstrap Confidence Interval: (69.4%, 75.5%), Median: 72.5%"
    },
    {
        "thought": "To enhance its performance, an LLM can iteratively improve its answer based on feedback. By reflecting on its previous attempts and incorporating feedback, the model can refine its reasoning and provide a more accurate solution.",
        "name": "Self-Refine (Reflexion)",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    cot_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for reflecting on previous attempts and feedback to improve\n    cot_reflect_instruction = \"Given previous attempts and feedback, carefully consider where you could go wrong in your latest attempt. Using insights from previous attempts, try to solve the task better.\"\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Instruction for providing feedback and correcting the answer\n    critic_instruction = \"Please review the answer above and criticize on where might be wrong. If you are absolutely sure it is correct, output 'True' in 'correct'.\"\n    critic_agent = LLMAgentBase(['feedback', 'correct'], 'Critic Agent')\n    \n    N_max = 5 # Maximum number of attempts\n\n    # Initial attempt\n    cot_inputs = [taskInfo]\n    thinking, answer = cot_agent(cot_inputs, cot_initial_instruction, 0)\n\n    for i in range(N_max):\n        # Get feedback and correct status from the critic\n        feedback, correct = critic_agent([taskInfo, thinking, answer], critic_instruction, i)\n        if correct.content == 'True':\n            break\n            \n        # Add feedback to the inputs for the next iteration\n        cot_inputs.extend([thinking, answer, feedback])\n\n        # Reflect on previous attempts and refine the answer\n        thinking, answer = cot_agent(cot_inputs, cot_reflect_instruction, i + 1)\n    return answer\n",
        "api_calls": 10,
        "structure_label": "Iterative Refinement",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (64.8%, 80.5%), Median: 72.7%",
        "test_fitness": "95% Bootstrap Confidence Interval: (66.8%, 73.1%), Median: 70.0%"
    },
    {
        "thought": "By letting different LLMs debate with each other, we can leverage their diverse perspectives to find better solutions for tasks.",
        "name": "LLM Debate",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    debate_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for debating and updating the solution based on other agents' solutions\n    debate_instruction = \"Given solutions to the problem from other agents, consider their opinions as additional advice. Please think carefully and provide an updated answer.\"\n    \n    # Initialize debate agents with different roles and a moderate temperature for varied reasoning\n    debate_agents = [LLMAgentBase(['thinking', 'answer'], 'Debate Agent', temperature=0.8, role=role) for role in ['Biology Expert', 'Physics Expert', 'Chemistry Expert', 'Science Generalist']]\n\n    # Instruction for final decision-making based on all debates and solutions\n    final_decision_instruction = \"Given all the above thinking and answers, reason over them carefully and provide a final answer.\"\n    final_decision_agent = LLMAgentBase(['thinking', 'answer'], 'Final Decision Agent', temperature=0.1)\n\n    max_round = 2 # Maximum number of debate rounds\n    all_thinking = [[] for _ in range(max_round)]\n    all_answer = [[] for _ in range(max_round)]\n\n    # Perform debate rounds\n    for r in range(max_round):\n        for i in range(len(debate_agents)):\n            if r == 0:\n                thinking, answer = debate_agents[i]([taskInfo], debate_initial_instruction)\n            else:\n                input_infos = [taskInfo] + [all_thinking[r-1][i]] + all_thinking[r-1][:i] + all_thinking[r-1][i+1:]\n                thinking, answer = debate_agents[i](input_infos, debate_instruction)\n            all_thinking[r].append(thinking)\n            all_answer[r].append(answer)\n    \n    # Make the final decision based on all debate results and solutions\n    thinking, answer = final_decision_agent([taskInfo] + all_thinking[max_round-1] + all_answer[max_round-1], final_decision_instruction)\n    return answer\n",
        "api_calls": 14,
        "structure_label": "Multi-Agent Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (68.0%, 82.8%), Median: 75.8%",
        "test_fitness": "95% Bootstrap Confidence Interval: (69.1%, 75.4%), Median: 72.2%"
    },
    {
        "thought": "Let LLM first think about the principles involved in solving this task which could be helpful. By understanding the underlying principles, the model can better reason through the problem and provide a more accurate solution.",
        "name": "Step-back Abstraction",
        "code": "def forward(self, taskInfo):\n        # Instruction for understanding the principles involved in the task\n        principle_instruction = \"What are the physics, chemistry or biology principles and concepts involved in solving this task? First think step by step. Then list all involved principles and explain them.\"\n        \n        # Instruction for solving the task based on the principles\n        cot_instruction = \"Given the question and the involved principle behind the question, think step by step and then solve the task.\"\n        \n        # Instantiate LLM agents\n        principle_agent = LLMAgentBase(['thinking', 'principle'], 'Principle Agent')\n        cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n        \n        # Get the principles involved in the task\n        thinking, principle = principle_agent([taskInfo], principle_instruction)\n\n        # Use the principles to solve the task\n        thinking, answer = cot_agent([taskInfo, thinking, principle], cot_instruction)\n        return answer\n",
        "api_calls": 4,
        "structure_label": "Abstraction to Principles Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (71.9%, 85.9%), Median: 78.9%",
        "test_fitness": "95% Bootstrap Confidence Interval: (68.5%, 74.8%), Median: 71.6%"
    },
    {
        "thought": "Similar to Quality-Diversity methods, let LLM generate multiple diverse interesting solutions could help. By encouraging the model to explore different reasoning paths, we can increase the chances of finding the best solution.",
        "name": "Quality-Diversity",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    cot_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for giving diverse answers\n    qd_instruction = \"Given previous attempts, try to come up with another interesting way to solve the task.\"\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Instruction for final decision-making based on collected reasoning and answers\n    final_decision_instruction = \"Given all the above solutions, reason over them carefully and provide a final answer.\"\n    final_decision_agent = LLMAgentBase(['thinking', 'answer'], 'Final Decision Agent', temperature=0.1)\n    \n    N_max = 3 # Maximum number of attempts\n\n    # Initial attempt\n    cot_inputs = [taskInfo]\n    possible_answers = []\n    thinking, answer = cot_agent(cot_inputs, cot_initial_instruction, 0)\n\n    # Add the answer to the list of possible answers\n    possible_answers.extend([thinking, answer])\n\n    for i in range(N_max):\n        # Reflect on previous attempts and generate another interesting answer\n        cot_inputs.extend([thinking, answer])\n\n        # Generate another interesting answer\n        thinking, answer = cot_agent(cot_inputs, qd_instruction, i + 1)\n        possible_answers.extend([thinking, answer])\n\n    # Make the final decision based on all generated answers\n    thinking, answer = final_decision_agent([taskInfo] + possible_answers, final_decision_instruction)\n    return answer\n",
        "api_calls": 8,
        "structure_label": "Multi-Agent Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (67.2%, 82.0%), Median: 75.0%",
        "test_fitness": "95% Bootstrap Confidence Interval: (67.5%, 73.8%), Median: 70.6%"
    },
    {
        "thought": "Similar to Auto-GPT and expert prompting, we can use dynamic control flow in the design to let the agent decide what expert we should use.",
        "name": "Dynamic Assignment of Roles",
        "code": "def forward(self, taskInfo):\n        # Instruction for step-by-step reasoning\n        cot_instruction = \"Please think step by step and then solve the task.\"\n        expert_agents = [LLMAgentBase(['thinking', 'answer'], 'Expert Agent', role=role) for role in ['Physics Expert', 'Chemistry Expert', 'Biology Expert', 'Science Generalist']]\n\n        # Instruction for routing the task to the appropriate expert\n        routing_instruction = \"Given the task, please choose an Expert to answer the question. Choose from: Physics, Chemistry, Biology Expert, or Science Generalist.\"\n        routing_agent = LLMAgentBase(['choice'], 'Routing agent')\n\n        # Get the choice of expert to route the task\n        choice = routing_agent([taskInfo], routing_instruction)[0]\n\n        if 'physics' in choice.content.lower():\n            expert_id = 0\n        elif 'chemistry' in choice.content.lower():\n            expert_id = 1\n        elif 'biology' in choice.content.lower():\n            expert_id = 2\n        else:\n            expert_id = 3 # Default to Science Generalist\n\n        thinking, answer = expert_agents[expert_id]([taskInfo], cot_instruction)\n        return answer\n",
        "api_calls": 4,
        "structure_label": "Decompositional Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (66.4%, 81.2%), Median: 74.2%",
        "test_fitness": "95% Bootstrap Confidence Interval: (67.9%, 74.1%), Median: 71.0%"
    },
    {
        "thought": "**Insights:**\nTo create a more robust architecture, I will streamline the principle extraction process and introduce a more structured iterative refinement approach that allows for continuous improvement of the answer without excessive redundancy.\n**Overall Idea:**\nThe revised architecture will focus on generating principles through a single agent call and then iteratively refining the answer based on those principles while maintaining multiple iterations for deeper refinement.\n**Implementation:**\n1. Extract high-level principles using a single dedicated agent call.\n2. Utilize these principles along with the initial answer in a loop to refine the answer over multiple iterations, allowing for continuous feedback and improvement. This should be balanced to ensure the total API calls stay within the target.",
        "name": "Principle-Driven Iterative Refinement",
        "code": "def forward(self, taskInfo):\n    # Phase 1: Principle Extraction\n    principle_instruction = \"Analyze the task and extract high-level principles.\"\n    principle_agent = LLMAgentBase(['thinking', 'principle'], 'Principle Agent')  # 0 calls\n\n    thinking, principle = principle_agent([taskInfo], principle_instruction)  # 1 call for principle extraction\n\n    # Phase 2: Answer Generation\n    instruction = \"Given the following task, first provide an initial answer. Then iteratively refine it using the previous output and the guiding principle.\"\n    iterative_agent = LLMAgentBase(['thinking', 'answer'], 'Iterative Refinement Agent')  # 0 calls\n\n    # Initial response\n    initial_answer = iterative_agent([taskInfo], instruction)  # 1 call for initial answer\n\n    refined_answer = initial_answer\n    # Refinement loop - allow for deeper iterations (4 iterations)\n    for _ in range(4):  # 4 iterations x 1 call = 4 calls\n        thinking, refined_answer = iterative_agent([taskInfo, refined_answer, principle], instruction)  # 1 call for each refinement\n\n    return refined_answer  # Return the final refined answer",
        "fitness": "95% Bootstrap Confidence Interval: (73.4%, 86.7%), Median: 80.5%",
        "generation": 6,
        "api_calls": 10,
        "structure_label": "Iterative Refinement",
        "test_fitness": "95% Bootstrap Confidence Interval: (68.9%, 75.1%), Median: 72.0%"
    },
    {
        "thought": "**Insights:**\nTo enhance the architecture, I will separate the refinement process into distinct agents, thus allowing for the exploration of multiple answers simultaneously and increasing the depth of refinement through collaboration among agents. This will diversify the reasoning paths and allow for better interaction with high-level principles.\n**Overall Idea:**\nThe revised structure will start by extracting principles and generating an initial answer through a single call. Then, I will instantiate unique agents for each refinement stage, allowing them to interact with the initial answer and principles, fostering a more collaborative approach to answer generation. This will maximize the potential output quality.\n**Implementation:**\n1. Extract high-level principles and generate an initial answer in a single agent call.\n2. Utilize different agents for refining the answers, ensuring that each one interacts with the initial output and principles distinctly. This will allow for a richer set of refined answers, enhancing the overall effectiveness.",
        "name": "Collaborative Principle-Driven Refinement",
        "code": "def forward(self, taskInfo):\n    # Phase 1: Principle Extraction and Initial Answer Generation\n    instruction = \"Analyze the task, extract high-level principles, and provide an initial answer.\"\n    principle_agent = LLMAgentBase(['thinking', 'principle', 'answer'], 'Principle and Answer Agent')  # 0 calls\n\n    thinking, principles, initial_answer = principle_agent([taskInfo], instruction)  # 1 call for both principles and initial answer\n\n    # Phase 2: Refinement Loop with Single Agent\n    refinement_agent = LLMAgentBase(['thinking', 'refined_answer'], 'Refinement Agent')  # 0 calls\n    refined_answer = initial_answer\n\n    # Refinement loop - allow for deeper iterations (4 iterations)\n    for _ in range(4):  # 4 iterations x 1 call = 4 calls\n        refining_instruction = \"Given the previous answer and the principles, refine the answer.\"\n        thinking, refined_answer = refinement_agent([taskInfo, refined_answer, principles], refining_instruction)  # 1 call for each refinement\n\n    return refined_answer  # Return the final refined answer",
        "fitness": "95% Bootstrap Confidence Interval: (72.7%, 86.7%), Median: 79.7%",
        "generation": 8,
        "api_calls": 9,
        "structure_label": "Iterative Refinement",
        "test_fitness": "95% Bootstrap Confidence Interval: (68.4%, 74.6%), Median: 71.5%"
    },
    {
        "thought": "**Insights:**\nTo enhance performance and reduce API calls, I will create a new architecture that combines the principle extraction and answer generation steps into a single agent call. This agent will generate a comprehensive response that includes both the initial answer and its refinement based on extracted principles. The goal is to maintain quality while minimizing the number of API calls.\n**Overall Idea:**\nThe revised architecture will focus on a single agent capable of executing the tasks of principle extraction and initial answer generation/refinement. By doing this in one step, I can ensure that the process is efficient and direct, maintaining answer quality without unnecessary iterations.\n**Implementation:**\n1. Use a single agent to extract principles and generate the initial answer, ensuring clarity and correctness together.\n2. The selected agent will focus on providing the most accurate answer based on the derived principles in a consolidated manner, thus minimizing redundancy.",
        "name": "Unified Principle Extraction and Answer Generation",
        "code": "def forward(self, taskInfo):\n    # Phase 1: Principle Extraction\n    principle_instruction = \"Analyze the task and extract high-level principles.\"\n    principle_agent = LLMAgentBase([\"thinking\", \"principles\"], \"Principle Extraction Agent\")  # 0 calls\n    thinking, principles = principle_agent([taskInfo], principle_instruction)  # 1 call for principles extraction\n\n    # Phase 2: Initial Answer Generation\n    answer_instruction = \"Using the extracted principles, provide an initial answer.\"\n    answer_agent = LLMAgentBase([\"thinking\", \"final_answer\"], \"Answer Generation Agent\")  # 0 calls\n    initial_answer = answer_agent([taskInfo, principles], answer_instruction)  # 1 call for initial answer generation\n\n    return initial_answer  # Return the complete initial answer",
        "fitness": "95% Bootstrap Confidence Interval: (72.7%, 86.7%), Median: 79.7%",
        "generation": 20,
        "api_calls": 2,
        "structure_label": "Abstraction to Principles Reasoning",
        "test_fitness": "95% Bootstrap Confidence Interval: (68.2%, 74.5%), Median: 71.4%"
    },
    {
        "thought": "**Insights:**\nTo enhance the architecture's depth and accuracy, I will incorporate an iterative refinement process that allows for continuous improvement of the answer. This will involve using separate agents for extracting principles and refining the answer iteratively. This approach will ensure a holistic strategy to answering the task, leveraging feedback from previous outputs to guide the next iterations.\n**Overall Idea:**\nThe new design will extract high-level principles using one agent and then use a different agent for initial answer generation and another for refinement. This balances efficiency with the effectiveness of iterative improvement.\n**Implementation:**\n1. Extract principles using a single agent call.\n2. Use one agent for the initial answer generation based on those principles.\n3. Employ a separate agent for multiple rounds of answer refinement, ensuring clarity and distinct processes.",
        "name": "Iterative Refinement with Principle Extraction",
        "code": "def forward(self, taskInfo):\n    # Phase 1: Principle Extraction\n    principle_instruction = \"Analyze the task and extract high-level principles.\"\n    principle_agent = LLMAgentBase([\"thinking\", \"principles\"], \"Principle Extraction Agent\")  # 0 calls\n    thinking, principles = principle_agent([taskInfo], principle_instruction)  # 1 call for principles extraction\n\n    # Phase 2: Initial Answer Generation\n    answer_instruction = \"Using the extracted principles, provide an initial answer.\"\n    initial_answer_agent = LLMAgentBase([\"thinking\", \"initial_answer\"], \"Initial Answer Generation Agent\")  # 0 calls\n    initial_answer = initial_answer_agent([taskInfo, principles], answer_instruction)  # 1 call for initial answer generation\n\n    # Phase 3: Iterative Refinement\n    refinement_agent = LLMAgentBase([\"thinking\", \"refined_answer\"], \"Answer Refinement Agent\")  # 0 calls\n    refined_answer = initial_answer\n    # Iteration loop for refinement: 3 iterations x 1 call = 3 calls\n    for _ in range(3):  # Refinement phase\n        thinking, refined_answer = refinement_agent([taskInfo, refined_answer, principles], answer_instruction)  # 1 call for each refinement\n\n    return refined_answer  # Return the final refined answer",
        "fitness": "95% Bootstrap Confidence Interval: (72.7%, 86.7%), Median: 79.7%",
        "generation": 21,
        "api_calls": 6,
        "structure_label": "Iterative Refinement",
        "test_fitness": "95% Bootstrap Confidence Interval: (67.9%, 74.1%), Median: 71.0%"
    },
    {
        "thought": "**Insights:**\nTo elevate the architecture's effectiveness, I will refine the refinement process by including a validation step after each agent call. Instead of relying on multiple iterations for refinement, I will introduce a feedback mechanism that uses the outcome of each step to inform the next, leading to a more robust final answer. This will also ensure that the agents work synergistically rather than sequentially without considering the outputs of previous steps.\n**Overall Idea:**\nThe goal is to incorporate a validation phase after each subtask, enabling enhancement based on prior outputs while minimizing redundant calls. This will optimize the performance and accuracy of the overall framework while continuing to dissect the task into manageable parts.",
        "name": "Refined Decompositional Reasoning Agent",
        "code": "def forward(self, taskInfo):\n    # Phase 1: Principle Extraction\n    principle_instruction = \"Analyze the task and extract high-level principles.\"\n    principle_agent = LLMAgentBase([\"thinking\", \"principles\"], \"Principle Extraction Agent\")  # 0 calls\n    thinking, principles = principle_agent([taskInfo], principle_instruction)  # 1 call for principles extraction\n\n    # Phase 2: Initial Answer Generation\n    answer_instruction = \"Using the extracted principles, provide an initial answer.\"\n    initial_answer_agent = LLMAgentBase([\"thinking\", \"initial_answer\"], \"Initial Answer Generation Agent\")  # 0 calls\n    initial_answer = initial_answer_agent([taskInfo, principles], answer_instruction)  # 1 call for initial answer generation\n\n    # Phase 3: Validation and Refinement\n    validation_instruction = \"Validate and refine the answer based on the principles.\"\n    refinement_agent = LLMAgentBase([\"thinking\", \"refined_answer\"], \"Answer Validation and Refinement Agent\")  # 0 calls\n    refined_answer = refinement_agent([taskInfo, initial_answer, principles], validation_instruction)  # 1 call for validation and refinement\n\n    return refined_answer  # Return the final refined answer",
        "fitness": "95% Bootstrap Confidence Interval: (71.9%, 85.9%), Median: 78.9%",
        "generation": 22,
        "api_calls": 3,
        "structure_label": "Abstraction to Principles Reasoning",
        "test_fitness": "95% Bootstrap Confidence Interval: (67.4%, 73.6%), Median: 70.5%"
    },
    {
        "thought": "By encouraging the LLM to think step by step rather than directly outputting an answer, chain-of-thought reasoning enables complex problem-solving through intermediate steps. This practice improves the model's ability to handle tasks that require deeper reasoning and provides insight into its decision-making process.",
        "name": "Chain-of-Thought",
        "code": "def forward(self, taskInfo):\n    # Instruction for the Chain-of-Thought (CoT) approach\n    # It is an important practice that allows the LLM to think step by step before solving the task.\n    cot_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instantiate a new LLM agent specifically for CoT\n    # To allow LLM thinking before answering, we need to set an additional output field 'thinking'.\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Prepare the inputs for the CoT agent\n    # The input should be a list of Info, and the first one is often the taskInfo\n    cot_agent_inputs = [taskInfo]\n\n    # Get the response from the CoT agent\n    thinking, answer = cot_agent(cot_agent_inputs, cot_instruction)\n\n    # Return only the final answer\n    return answer\n",
        "api_calls": 1,
        "structure_label": "Linear Chain-of-Thought",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (68.8%, 83.6%), Median: 76.6%",
        "test_fitness": "95% Bootstrap Confidence Interval: (69.0%, 75.2%), Median: 72.1%"
    }
]