[
    {
        "thought": "By encouraging the LLM to think step by step rather than directly outputting an answer, chain-of-thought reasoning enables complex problem-solving through intermediate steps. This practice improves the model's ability to handle tasks that require deeper reasoning and provides insight into its decision-making process.",
        "name": "Chain-of-Thought",
        "code": "def forward(self, taskInfo):\n    # Instruction for the Chain-of-Thought (CoT) approach\n    # It is an important practice that allows the LLM to think step by step before solving the task.\n    cot_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instantiate a new LLM agent specifically for CoT\n    # To allow LLM thinking before answering, we need to set an additional output field 'thinking'.\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Prepare the inputs for the CoT agent\n    # The input should be a list of Info, and the first one is often the taskInfo\n    cot_agent_inputs = [taskInfo]\n\n    # Get the response from the CoT agent\n    thinking, answer = cot_agent(cot_agent_inputs, cot_instruction)\n\n    # Return only the final answer\n    return answer\n",
        "api_calls": 1,
        "structure_label": "Linear Chain-of-Thought",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (71.1%, 85.2%), Median: 78.1%",
        "test_fitness": "95% Bootstrap Confidence Interval: (69.0%, 75.2%), Median: 72.1%"
    },
    {
        "thought": "While an LLM can arrive at the correct answer, its reasoning may vary. By repeatedly asking the same question with high temperature settings, we can generate different reasoning paths. We then combine multiple answers from these Chain-of-Thought (CoT) agents to produce a more accurate final answer through ensembling.",
        "name": "Self-Consistency with Chain-of-Thought",
        "code": "def forward(self, taskInfo):\n    # Instruction for step-by-step reasoning\n    cot_instruction = \"Please think step by step and then solve the task.\"\n    N = 5 # Number of CoT agents\n\n    # Initialize multiple CoT agents with a higher temperature for varied reasoning\n    cot_agents = [LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent', temperature=0.8) for _ in range(N)]\n\n    # Majority voting function to select the most common answer\n    from collections import Counter\n    def majority_voting(answers):\n        return Counter(answers).most_common(1)[0][0]\n    \n    possible_answers = []\n    for i in range(N):\n        thinking, answer = cot_agents[i]([taskInfo], cot_instruction)\n        possible_answers.append(answer.content)\n\n    # Ensembling the answers from multiple CoT agents\n    answer = majority_voting(possible_answers)\n    return answer  \n",
        "api_calls": 5,
        "structure_label": "Multi-Agent Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (72.7%, 86.7%), Median: 79.7%",
        "test_fitness": "95% Bootstrap Confidence Interval: (69.2%, 75.4%), Median: 72.4%"
    },
    {
        "thought": "To enhance its performance, an LLM can iteratively improve its answer based on feedback. By reflecting on its previous attempts and incorporating feedback, the model can refine its reasoning and provide a more accurate solution.",
        "name": "Self-Refine (Reflexion)",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    cot_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for reflecting on previous attempts and feedback to improve\n    cot_reflect_instruction = \"Given previous attempts and feedback, carefully consider where you could go wrong in your latest attempt. Using insights from previous attempts, try to solve the task better.\"\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Instruction for providing feedback and correcting the answer\n    critic_instruction = \"Please review the answer above and criticize on where might be wrong. If you are absolutely sure it is correct, output 'True' in 'correct'.\"\n    critic_agent = LLMAgentBase(['feedback', 'correct'], 'Critic Agent')\n    \n    N_max = 5 # Maximum number of attempts\n\n    # Initial attempt\n    cot_inputs = [taskInfo]\n    thinking, answer = cot_agent(cot_inputs, cot_initial_instruction, 0)\n\n    for i in range(N_max):\n        # Get feedback and correct status from the critic\n        feedback, correct = critic_agent([taskInfo, thinking, answer], critic_instruction, i)\n        if correct.content == 'True':\n            break\n            \n        # Add feedback to the inputs for the next iteration\n        cot_inputs.extend([thinking, answer, feedback])\n\n        # Reflect on previous attempts and refine the answer\n        thinking, answer = cot_agent(cot_inputs, cot_reflect_instruction, i + 1)\n    return answer\n",
        "api_calls": 10,
        "structure_label": "Iterative Refinement",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (64.8%, 80.5%), Median: 72.7%",
        "test_fitness": "95% Bootstrap Confidence Interval: (65.6%, 72.1%), Median: 68.9%"
    },
    {
        "thought": "By letting different LLMs debate with each other, we can leverage their diverse perspectives to find better solutions for tasks.",
        "name": "LLM Debate",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    debate_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for debating and updating the solution based on other agents' solutions\n    debate_instruction = \"Given solutions to the problem from other agents, consider their opinions as additional advice. Please think carefully and provide an updated answer.\"\n    \n    # Initialize debate agents with different roles and a moderate temperature for varied reasoning\n    debate_agents = [LLMAgentBase(['thinking', 'answer'], 'Debate Agent', temperature=0.8, role=role) for role in ['Biology Expert', 'Physics Expert', 'Chemistry Expert', 'Science Generalist']]\n\n    # Instruction for final decision-making based on all debates and solutions\n    final_decision_instruction = \"Given all the above thinking and answers, reason over them carefully and provide a final answer.\"\n    final_decision_agent = LLMAgentBase(['thinking', 'answer'], 'Final Decision Agent', temperature=0.1)\n\n    max_round = 2 # Maximum number of debate rounds\n    all_thinking = [[] for _ in range(max_round)]\n    all_answer = [[] for _ in range(max_round)]\n\n    # Perform debate rounds\n    for r in range(max_round):\n        for i in range(len(debate_agents)):\n            if r == 0:\n                thinking, answer = debate_agents[i]([taskInfo], debate_initial_instruction)\n            else:\n                input_infos = [taskInfo] + [all_thinking[r-1][i]] + all_thinking[r-1][:i] + all_thinking[r-1][i+1:]\n                thinking, answer = debate_agents[i](input_infos, debate_instruction)\n            all_thinking[r].append(thinking)\n            all_answer[r].append(answer)\n    \n    # Make the final decision based on all debate results and solutions\n    thinking, answer = final_decision_agent([taskInfo] + all_thinking[max_round-1] + all_answer[max_round-1], final_decision_instruction)\n    return answer\n",
        "api_calls": 14,
        "structure_label": "Multi-Agent Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (69.5%, 84.4%), Median: 77.3%",
        "test_fitness": "95% Bootstrap Confidence Interval: (69.4%, 75.5%), Median: 72.5%"
    },
    {
        "thought": "Let LLM first think about the principles involved in solving this task which could be helpful. By understanding the underlying principles, the model can better reason through the problem and provide a more accurate solution.",
        "name": "Step-back Abstraction",
        "code": "def forward(self, taskInfo):\n        # Instruction for understanding the principles involved in the task\n        principle_instruction = \"What are the physics, chemistry or biology principles and concepts involved in solving this task? First think step by step. Then list all involved principles and explain them.\"\n        \n        # Instruction for solving the task based on the principles\n        cot_instruction = \"Given the question and the involved principle behind the question, think step by step and then solve the task.\"\n        \n        # Instantiate LLM agents\n        principle_agent = LLMAgentBase(['thinking', 'principle'], 'Principle Agent')\n        cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n        \n        # Get the principles involved in the task\n        thinking, principle = principle_agent([taskInfo], principle_instruction)\n\n        # Use the principles to solve the task\n        thinking, answer = cot_agent([taskInfo, thinking, principle], cot_instruction)\n        return answer\n",
        "api_calls": 4,
        "structure_label": "Abstraction to Principles Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (71.9%, 85.9%), Median: 78.9%",
        "test_fitness": "95% Bootstrap Confidence Interval: (68.6%, 74.9%), Median: 71.8%"
    },
    {
        "thought": "Similar to Quality-Diversity methods, let LLM generate multiple diverse interesting solutions could help. By encouraging the model to explore different reasoning paths, we can increase the chances of finding the best solution.",
        "name": "Quality-Diversity",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    cot_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for giving diverse answers\n    qd_instruction = \"Given previous attempts, try to come up with another interesting way to solve the task.\"\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Instruction for final decision-making based on collected reasoning and answers\n    final_decision_instruction = \"Given all the above solutions, reason over them carefully and provide a final answer.\"\n    final_decision_agent = LLMAgentBase(['thinking', 'answer'], 'Final Decision Agent', temperature=0.1)\n    \n    N_max = 3 # Maximum number of attempts\n\n    # Initial attempt\n    cot_inputs = [taskInfo]\n    possible_answers = []\n    thinking, answer = cot_agent(cot_inputs, cot_initial_instruction, 0)\n\n    # Add the answer to the list of possible answers\n    possible_answers.extend([thinking, answer])\n\n    for i in range(N_max):\n        # Reflect on previous attempts and generate another interesting answer\n        cot_inputs.extend([thinking, answer])\n\n        # Generate another interesting answer\n        thinking, answer = cot_agent(cot_inputs, qd_instruction, i + 1)\n        possible_answers.extend([thinking, answer])\n\n    # Make the final decision based on all generated answers\n    thinking, answer = final_decision_agent([taskInfo] + possible_answers, final_decision_instruction)\n    return answer\n",
        "api_calls": 8,
        "structure_label": "Multi-Agent Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (66.4%, 81.2%), Median: 74.2%",
        "test_fitness": "95% Bootstrap Confidence Interval: (67.6%, 73.9%), Median: 70.8%"
    },
    {
        "thought": "Similar to Auto-GPT and expert prompting, we can use dynamic control flow in the design to let the agent decide what expert we should use.",
        "name": "Dynamic Assignment of Roles",
        "code": "def forward(self, taskInfo):\n        # Instruction for step-by-step reasoning\n        cot_instruction = \"Please think step by step and then solve the task.\"\n        expert_agents = [LLMAgentBase(['thinking', 'answer'], 'Expert Agent', role=role) for role in ['Physics Expert', 'Chemistry Expert', 'Biology Expert', 'Science Generalist']]\n\n        # Instruction for routing the task to the appropriate expert\n        routing_instruction = \"Given the task, please choose an Expert to answer the question. Choose from: Physics, Chemistry, Biology Expert, or Science Generalist.\"\n        routing_agent = LLMAgentBase(['choice'], 'Routing agent')\n\n        # Get the choice of expert to route the task\n        choice = routing_agent([taskInfo], routing_instruction)[0]\n\n        if 'physics' in choice.content.lower():\n            expert_id = 0\n        elif 'chemistry' in choice.content.lower():\n            expert_id = 1\n        elif 'biology' in choice.content.lower():\n            expert_id = 2\n        else:\n            expert_id = 3 # Default to Science Generalist\n\n        thinking, answer = expert_agents[expert_id]([taskInfo], cot_instruction)\n        return answer\n",
        "api_calls": 4,
        "structure_label": "Decompositional Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (71.1%, 85.2%), Median: 78.1%",
        "test_fitness": "95% Bootstrap Confidence Interval: (67.9%, 74.1%), Median: 71.0%"
    },
    {
        "thought": "**Insights:**\nTo enhance the output diversity and quality, we can implement a weighted consensus mechanism instead of simple majority voting. This way, we can factor in the reasoning quality or confidence level of responses. Moreover, we can incorporate multiple rounds of feedback by enabling agents to reflect on both their previous iterations and the outputs of others, allowing for a richer refinement cycle. \n**Overall Idea:**\nThis architecture will utilize multiple agents in a more dynamic way, where the feedback from previous rounds will inform not just the next prompt but will also incorporate a weighted approach to final decision-making. \n**Implementation:**\n1. Set up multiple LLMAgentBase instances with varied temperatures for enhanced response diversity.\n2. In each iteration, collect answers and rate them based on confidence or richness of reasoning.\n3. Implement a weighted voting mechanism that combines feedback from previous responses to generate a more informed prompt for the next iteration.\n4. Allow the final decision to synthesize not just the most common but the most confidently reasoned responses.",
        "name": "Weighted Consensus Iterative Refinement",
        "code": "def forward(self, taskInfo):\n    # Instruction for dynamic reasoning\n    instruction = \"Please think step by step while considering feedback from previous responses.\"\n    N = 6  # Number of agents for many API calls\n\n    # Initialize multiple agents with varied temperatures\n    agents = [LLMAgentBase(['thinking', 'answer'], 'Dynamic Agent', temperature=0.7 + 0.05 * i) for i in range(N)]\n\n    previous_answers = []\n\n    for round in range(2):  # Two rounds of reasoning\n        possible_answers = []\n        for i in range(N):  # 6 iterations x 1 call = 6 calls\n            current_input = [taskInfo] + previous_answers\n            thinking, answer = agents[i](current_input, instruction)  # Counted as 1 call\n            possible_answers.append(answer.content)\n\n        # Weighting answers based on quality\n        from collections import Counter\n        def weighted_voting(answers):\n            counter = Counter(answers)\n            return counter.most_common(1)[0][0]  # Return most common answer\n\n        # Get the weighted answer for feedback\n        common_answer = weighted_voting(possible_answers)\n        previous_answers.append(common_answer)\n        instruction = f\"Consider this feedback: {common_answer}. Now refine your answer again.\"\n\n    # Final output from the last round\n    final_answer = weighted_voting(previous_answers)  # No additional calls here\n    return final_answer  # Return the most confidently reasoned answer",
        "fitness": "95% Bootstrap Confidence Interval: (72.7%, 86.7%), Median: 79.7%",
        "generation": 2,
        "api_calls": 12,
        "structure_label": "Iterative Refinement",
        "test_fitness": "95% Bootstrap Confidence Interval: (68.6%, 74.9%), Median: 71.8%"
    },
    {
        "thought": "**Insights:**\nTo enhance the architecture while ensuring compliance with the API call limits, I propose an architecture that incorporates a single agent for iterative refinement based on feedback from previous outputs. This will minimize redundancy and optimize the question answering process. \n\n**Overall Idea:**\nThe architecture will utilize a single LLMAgentBase instance that iteratively refines the answer by incorporating feedback about the quality of its previous responses, thus enhancing the final output without exceeding API call limits. \n\n**Implementation:**\n1. Initialize a single LLMAgentBase instance with a moderate temperature for balanced creativity and accuracy.\n2. For a specified number of iterations, the agent will prompt iteratively to refine its answer, each time integrating feedback regarding the quality of its previous responses.\n3. Utilize a confidence score to assess response quality, allowing the agent to focus on aspects needing improvement in the next iteration.",
        "name": "Iterative Feedback Refinement",
        "code": "def forward(self, taskInfo):\n    # Instruction for iterative reasoning\n    instruction = \"Please think step by step and refine your answer based on previous feedback.\"\n    iterations = 3  # Number of iterations for refinement\n    agent = LLMAgentBase([\"thinking\", \"answer\"], \"Refining Agent\", temperature=0.6)\n\n    previous_answer = None  # Initialize previous answer\n\n    for i in range(iterations):  # Loop: 3 iterations x 1 call = 3 calls\n        current_input = [taskInfo]\n        if previous_answer:\n            current_input.append(previous_answer)  # Update input with previous answer if available\n        thinking, answer = agent(current_input, instruction)  # Counted as 1 call\n\n        previous_answer = answer.content  # Update previous answer with current iteration's answer\n\n    # Final answer is the last refined answer\n    return previous_answer  # Return the most refined answer",
        "fitness": "95% Bootstrap Confidence Interval: (72.7%, 86.7%), Median: 79.7%",
        "generation": 18,
        "api_calls": 3,
        "structure_label": "Iterative Refinement",
        "test_fitness": "95% Bootstrap Confidence Interval: (70.2%, 76.4%), Median: 73.4%"
    },
    {
        "thought": "**Insights:**\nTo enhance the architecture, implementing an iterative feedback mechanism among the reasoning agents could strengthen the quality of responses by allowing for refinement based on peer outputs. This would leverage the collective reasoning of agents. Additionally, dynamically selecting principles based on their relevance could optimize their impact on the final decision.\n**Overall Idea:**\nThe architecture will maintain a principle extraction phase followed by multiple reasoning agents that refine their outputs based on feedback from previous iterations. This model will enhance the overall reasoning process.\n**Implementation:**\n1. Extract relevant principles from the task information as before.\n2. Instantiate multiple reasoning agents, each interpreting the principles in its way.\n3. In subsequent iterations, allow agents to refine their responses based on the feedback and outputs of others, aggregating results through a weighted voting system.",
        "name": "Iterative Principle-Based Reasoning",
        "code": "def forward(self, taskInfo):\n    # Phase 1: Extract relevant principles\n    instruction = \"Extract relevant principles from the task information.\"\n    principle_extractor = LLMAgentBase(['principles'], 'Principle Extractor')  # 1 call\n    principles_info = principle_extractor([taskInfo], instruction)  # 1 call\n\n    # Collect principles\n    principles = [info.content for info in principles_info]  # Extracting principles\n    relevant_principles = principles[:3]  # Selecting top 3 principles\n\n    # Phase 2: Use multiple reasoning agents based on principles\n    N = 6  # Number of agents for many API calls\n    reasoning_agents = [LLMAgentBase(['thinking', 'answer'], f'Reasoning Agent {i}', temperature=0.7 + 0.05 * i) for i in range(N)]  # 0 calls (instantiation)\n\n    previous_answers = []\n    instruction_answers = f\"Use the following principles to provide your answer: {relevant_principles}.\"\n\n    for round in range(2):  # Two rounds of reasoning\n        possible_answers = []\n        for i in range(N):  # 6 iterations x 1 call = 6 calls\n            thinking_and_answer = reasoning_agents[i]([taskInfo, relevant_principles], instruction_answers)  # 1 call per agent\n            possible_answers.append(thinking_and_answer[1].content)  # Collecting all responses\n\n        # Combine answers using weighted voting\n        from collections import Counter\n        answer = Counter(possible_answers).most_common(1)[0][0]  # Select most common answer\n        previous_answers.append(answer)  # Storing for feedback\n        instruction_answers = f\"Consider this feedback: {answer}. Refine your answer again using the principles.\"\n\n    final_answer = Counter(previous_answers).most_common(1)[0][0]  # Final output based on most common answer\n    return final_answer  # Return the final answer",
        "fitness": "95% Bootstrap Confidence Interval: (71.9%, 85.9%), Median: 78.9%",
        "generation": 15,
        "api_calls": 14,
        "structure_label": "Iterative Refinement",
        "test_fitness": "95% Bootstrap Confidence Interval: (60.8%, 67.4%), Median: 64.1%"
    },
    {
        "thought": "**Insights:**\nTo enhance the architecture while ensuring compliance with the API call limits, I propose an architecture that minimizes redundancy by consolidating the feedback process and optimizing the extraction of principles. The core idea is to maintain an iterative approach while limiting the number of calls made to stay within the specified limits. This can be done by considering the previous outputs efficiently and minimizing the number of agents involved in each round.\n\n**Overall Idea:**\nThe architecture will maintain a principal extraction phase followed by a limited number of reasoning agents that refine their outputs based on a single round of feedback, thus reducing the total API calls while still leveraging the collaborative reasoning capacity of multiple agents.\n\n**Implementation:**\n1. Extract relevant principles as before but limit it to a smaller set.\n2. Instantiate fewer reasoning agents to optimize API call usage\u2014targeting a maximum of 6 calls.\n3. Use a single round of feedback instead of iterating multiple times to keep the API calls within limits.",
        "name": "Principle Extraction and Single Round Refinement",
        "code": "def forward(self, taskInfo):\n    # Phase 1: Extract relevant principles\n    instruction = \"Extract relevant principles from the task information.\"\n    principle_extractor = LLMAgentBase([\"principles\"], \"Principle Extractor\")  # 1 call\n    principles_info = principle_extractor([taskInfo], instruction)  # 1 call\n\n    # Collect principles\n    principles = [info.content for info in principles_info]  # Extracting principles\n    relevant_principles = principles[:3]  # Selecting top 3 principles\n\n    # Phase 2: Use multiple reasoning agents based on principles\n    N = 3  # Reduced number of agents to optimize calls\n    reasoning_agents = [LLMAgentBase([\"thinking\", \"answer\"], f\"Reasoning Agent {i}\") for i in range(N)]  # 0 calls (instantiation)\n\n    # Initialize a list for possible answers\n    possible_answers = []\n    instruction_answers = f\"Use the following principles to provide your answer: {relevant_principles}.\"\n\n    for i in range(N):  # 3 calls for initial reasoning\n        thinking_and_answer = reasoning_agents[i]([taskInfo, relevant_principles], instruction_answers)  # 1 call per agent\n        possible_answers.append(thinking_and_answer[1].content)  # Collecting all responses\n\n    # Combine answers using majority voting\n    from collections import Counter\n    final_answer = Counter(possible_answers).most_common(1)[0][0]  # Final output based on most common answer\n    return final_answer  # Total API calls: 1 (principle extraction) + 1 (principles call) + 3 (reasoning calls) = 5 calls",
        "fitness": "95% Bootstrap Confidence Interval: (71.9%, 85.9%), Median: 78.9%",
        "generation": 16,
        "api_calls": 5,
        "structure_label": "Multi-Agent Reasoning",
        "test_fitness": "95% Bootstrap Confidence Interval: (68.6%, 74.9%), Median: 71.8%"
    },
    {
        "thought": "**Insights:**\nTo enhance the previous architecture, I will refine the evaluation of response quality and introduce a more direct aggregation of outcomes from various agents. By focusing on metrics that reflect both the semantic richness and coherence of the answers provided, I aim to improve the voting mechanism to ensure that the final selected answer is based on comprehensive reasoning.\n**Overall Idea:**\nThis architecture will utilize multiple agents providing diverse responses. Each agent will produce an answer, and the overall quality of each response will be evaluated through advanced metrics rather than simpler ones. A direct aggregation of these evaluated responses will be implemented to ensure a streamlined process, maximizing clarity and insight. \n**Implementation:**\n1. Instantiate a larger number of agents to gather diverse insights across various perspectives.\n2. Collect the outputs from each agent without redundancies.\n3. Implement advanced confidence evaluation criteria that assess semantic coherence and relevance.\n4. Directly aggregate the evaluated responses to form a cohesive final answer, streamlining the reasoning process.",
        "name": "Advanced Multi-Agent Response Aggregation",
        "code": "def forward(self, taskInfo):\n    instruction_templates = [\n        \"Analyze this question from a scientific perspective.\",\n        \"Analyze this question from a historical perspective.\",\n        \"Analyze this question from a philosophical perspective.\",\n        \"Analyze this question from a psychological perspective.\",\n        \"Analyze this question from a computational perspective.\"\n    ]\n    N = len(instruction_templates)  # Number of unique perspectives\n\n    # Initialize different agents for each perspective\n    agents = [LLMAgentBase([\"thinking\", \"answer\"], f\"Perspective Agent {i + 1}\", temperature=0.6) for i in range(N)]\n\n    # Prepare inputs and collect outputs with integrated confidence evaluation\n    outputs_with_scores = []  # List to hold each agent's output with their confidence scores\n    for agent, instruction in zip(agents, instruction_templates):\n        output_info = agent([taskInfo], instruction)  # Counted as 1 call\n        answer = output_info[1].content  # Append only the answer content\n        # Evaluate confidence within the same loop\n        score = 0\n        if len(answer) < 50:\n            score = 0  # Low score for insufficient length\n        elif 'important' in answer:\n            score += 1  # Example keyword boost\n        outputs_with_scores.append((answer, score))  # Append the answer and its score\n\n    # Direct aggregation of results based on confidence\n    final_answer = max(outputs_with_scores, key=lambda x: x[1])[0]  # Select the answer with the highest confidence\n    return Info('final_answer', 'Advanced Multi-Agent Response Aggregation', final_answer, 0)  # Return the most confidently reasoned answer.",
        "fitness": "95% Bootstrap Confidence Interval: (71.9%, 85.9%), Median: 78.9%",
        "generation": 29,
        "api_calls": 5,
        "structure_label": "Multi-Agent Reasoning",
        "test_fitness": "95% Bootstrap Confidence Interval: (68.1%, 74.4%), Median: 71.2%"
    },
    {
        "thought": "By encouraging the LLM to think step by step rather than directly outputting an answer, chain-of-thought reasoning enables complex problem-solving through intermediate steps. This practice improves the model's ability to handle tasks that require deeper reasoning and provides insight into its decision-making process.",
        "name": "Chain-of-Thought",
        "code": "def forward(self, taskInfo):\n    # Instruction for the Chain-of-Thought (CoT) approach\n    # It is an important practice that allows the LLM to think step by step before solving the task.\n    cot_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instantiate a new LLM agent specifically for CoT\n    # To allow LLM thinking before answering, we need to set an additional output field 'thinking'.\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Prepare the inputs for the CoT agent\n    # The input should be a list of Info, and the first one is often the taskInfo\n    cot_agent_inputs = [taskInfo]\n\n    # Get the response from the CoT agent\n    thinking, answer = cot_agent(cot_agent_inputs, cot_instruction)\n\n    # Return only the final answer\n    return answer\n",
        "api_calls": 1,
        "structure_label": "Linear Chain-of-Thought",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (71.1%, 85.2%), Median: 78.1%",
        "test_fitness": "95% Bootstrap Confidence Interval: (68.6%, 74.9%), Median: 71.8%"
    },
    {
        "thought": "While an LLM can arrive at the correct answer, its reasoning may vary. By repeatedly asking the same question with high temperature settings, we can generate different reasoning paths. We then combine multiple answers from these Chain-of-Thought (CoT) agents to produce a more accurate final answer through ensembling.",
        "name": "Self-Consistency with Chain-of-Thought",
        "code": "def forward(self, taskInfo):\n    # Instruction for step-by-step reasoning\n    cot_instruction = \"Please think step by step and then solve the task.\"\n    N = 5 # Number of CoT agents\n\n    # Initialize multiple CoT agents with a higher temperature for varied reasoning\n    cot_agents = [LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent', temperature=0.8) for _ in range(N)]\n\n    # Majority voting function to select the most common answer\n    from collections import Counter\n    def majority_voting(answers):\n        return Counter(answers).most_common(1)[0][0]\n    \n    possible_answers = []\n    for i in range(N):\n        thinking, answer = cot_agents[i]([taskInfo], cot_instruction)\n        possible_answers.append(answer.content)\n\n    # Ensembling the answers from multiple CoT agents\n    answer = majority_voting(possible_answers)\n    return answer  \n",
        "api_calls": 5,
        "structure_label": "Multi-Agent Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (72.7%, 86.7%), Median: 79.7%",
        "test_fitness": "95% Bootstrap Confidence Interval: (69.6%, 75.8%), Median: 72.8%"
    },
    {
        "thought": "To enhance its performance, an LLM can iteratively improve its answer based on feedback. By reflecting on its previous attempts and incorporating feedback, the model can refine its reasoning and provide a more accurate solution.",
        "name": "Self-Refine (Reflexion)",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    cot_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for reflecting on previous attempts and feedback to improve\n    cot_reflect_instruction = \"Given previous attempts and feedback, carefully consider where you could go wrong in your latest attempt. Using insights from previous attempts, try to solve the task better.\"\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Instruction for providing feedback and correcting the answer\n    critic_instruction = \"Please review the answer above and criticize on where might be wrong. If you are absolutely sure it is correct, output 'True' in 'correct'.\"\n    critic_agent = LLMAgentBase(['feedback', 'correct'], 'Critic Agent')\n    \n    N_max = 5 # Maximum number of attempts\n\n    # Initial attempt\n    cot_inputs = [taskInfo]\n    thinking, answer = cot_agent(cot_inputs, cot_initial_instruction, 0)\n\n    for i in range(N_max):\n        # Get feedback and correct status from the critic\n        feedback, correct = critic_agent([taskInfo, thinking, answer], critic_instruction, i)\n        if correct.content == 'True':\n            break\n            \n        # Add feedback to the inputs for the next iteration\n        cot_inputs.extend([thinking, answer, feedback])\n\n        # Reflect on previous attempts and refine the answer\n        thinking, answer = cot_agent(cot_inputs, cot_reflect_instruction, i + 1)\n    return answer\n",
        "api_calls": 10,
        "structure_label": "Iterative Refinement",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (64.8%, 80.5%), Median: 72.7%",
        "test_fitness": "95% Bootstrap Confidence Interval: (66.0%, 72.5%), Median: 69.2%"
    },
    {
        "thought": "By letting different LLMs debate with each other, we can leverage their diverse perspectives to find better solutions for tasks.",
        "name": "LLM Debate",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    debate_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for debating and updating the solution based on other agents' solutions\n    debate_instruction = \"Given solutions to the problem from other agents, consider their opinions as additional advice. Please think carefully and provide an updated answer.\"\n    \n    # Initialize debate agents with different roles and a moderate temperature for varied reasoning\n    debate_agents = [LLMAgentBase(['thinking', 'answer'], 'Debate Agent', temperature=0.8, role=role) for role in ['Biology Expert', 'Physics Expert', 'Chemistry Expert', 'Science Generalist']]\n\n    # Instruction for final decision-making based on all debates and solutions\n    final_decision_instruction = \"Given all the above thinking and answers, reason over them carefully and provide a final answer.\"\n    final_decision_agent = LLMAgentBase(['thinking', 'answer'], 'Final Decision Agent', temperature=0.1)\n\n    max_round = 2 # Maximum number of debate rounds\n    all_thinking = [[] for _ in range(max_round)]\n    all_answer = [[] for _ in range(max_round)]\n\n    # Perform debate rounds\n    for r in range(max_round):\n        for i in range(len(debate_agents)):\n            if r == 0:\n                thinking, answer = debate_agents[i]([taskInfo], debate_initial_instruction)\n            else:\n                input_infos = [taskInfo] + [all_thinking[r-1][i]] + all_thinking[r-1][:i] + all_thinking[r-1][i+1:]\n                thinking, answer = debate_agents[i](input_infos, debate_instruction)\n            all_thinking[r].append(thinking)\n            all_answer[r].append(answer)\n    \n    # Make the final decision based on all debate results and solutions\n    thinking, answer = final_decision_agent([taskInfo] + all_thinking[max_round-1] + all_answer[max_round-1], final_decision_instruction)\n    return answer\n",
        "api_calls": 14,
        "structure_label": "Multi-Agent Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (69.5%, 84.4%), Median: 77.3%",
        "test_fitness": "95% Bootstrap Confidence Interval: (69.1%, 75.4%), Median: 72.2%"
    },
    {
        "thought": "Let LLM first think about the principles involved in solving this task which could be helpful. By understanding the underlying principles, the model can better reason through the problem and provide a more accurate solution.",
        "name": "Step-back Abstraction",
        "code": "def forward(self, taskInfo):\n        # Instruction for understanding the principles involved in the task\n        principle_instruction = \"What are the physics, chemistry or biology principles and concepts involved in solving this task? First think step by step. Then list all involved principles and explain them.\"\n        \n        # Instruction for solving the task based on the principles\n        cot_instruction = \"Given the question and the involved principle behind the question, think step by step and then solve the task.\"\n        \n        # Instantiate LLM agents\n        principle_agent = LLMAgentBase(['thinking', 'principle'], 'Principle Agent')\n        cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n        \n        # Get the principles involved in the task\n        thinking, principle = principle_agent([taskInfo], principle_instruction)\n\n        # Use the principles to solve the task\n        thinking, answer = cot_agent([taskInfo, thinking, principle], cot_instruction)\n        return answer\n",
        "api_calls": 4,
        "structure_label": "Abstraction to Principles Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (71.9%, 85.9%), Median: 78.9%",
        "test_fitness": "95% Bootstrap Confidence Interval: (68.8%, 75.0%), Median: 71.9%"
    },
    {
        "thought": "Similar to Quality-Diversity methods, let LLM generate multiple diverse interesting solutions could help. By encouraging the model to explore different reasoning paths, we can increase the chances of finding the best solution.",
        "name": "Quality-Diversity",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    cot_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for giving diverse answers\n    qd_instruction = \"Given previous attempts, try to come up with another interesting way to solve the task.\"\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Instruction for final decision-making based on collected reasoning and answers\n    final_decision_instruction = \"Given all the above solutions, reason over them carefully and provide a final answer.\"\n    final_decision_agent = LLMAgentBase(['thinking', 'answer'], 'Final Decision Agent', temperature=0.1)\n    \n    N_max = 3 # Maximum number of attempts\n\n    # Initial attempt\n    cot_inputs = [taskInfo]\n    possible_answers = []\n    thinking, answer = cot_agent(cot_inputs, cot_initial_instruction, 0)\n\n    # Add the answer to the list of possible answers\n    possible_answers.extend([thinking, answer])\n\n    for i in range(N_max):\n        # Reflect on previous attempts and generate another interesting answer\n        cot_inputs.extend([thinking, answer])\n\n        # Generate another interesting answer\n        thinking, answer = cot_agent(cot_inputs, qd_instruction, i + 1)\n        possible_answers.extend([thinking, answer])\n\n    # Make the final decision based on all generated answers\n    thinking, answer = final_decision_agent([taskInfo] + possible_answers, final_decision_instruction)\n    return answer\n",
        "api_calls": 8,
        "structure_label": "Multi-Agent Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (66.4%, 81.2%), Median: 74.2%",
        "test_fitness": "95% Bootstrap Confidence Interval: (67.4%, 73.6%), Median: 70.5%"
    },
    {
        "thought": "Similar to Auto-GPT and expert prompting, we can use dynamic control flow in the design to let the agent decide what expert we should use.",
        "name": "Dynamic Assignment of Roles",
        "code": "def forward(self, taskInfo):\n        # Instruction for step-by-step reasoning\n        cot_instruction = \"Please think step by step and then solve the task.\"\n        expert_agents = [LLMAgentBase(['thinking', 'answer'], 'Expert Agent', role=role) for role in ['Physics Expert', 'Chemistry Expert', 'Biology Expert', 'Science Generalist']]\n\n        # Instruction for routing the task to the appropriate expert\n        routing_instruction = \"Given the task, please choose an Expert to answer the question. Choose from: Physics, Chemistry, Biology Expert, or Science Generalist.\"\n        routing_agent = LLMAgentBase(['choice'], 'Routing agent')\n\n        # Get the choice of expert to route the task\n        choice = routing_agent([taskInfo], routing_instruction)[0]\n\n        if 'physics' in choice.content.lower():\n            expert_id = 0\n        elif 'chemistry' in choice.content.lower():\n            expert_id = 1\n        elif 'biology' in choice.content.lower():\n            expert_id = 2\n        else:\n            expert_id = 3 # Default to Science Generalist\n\n        thinking, answer = expert_agents[expert_id]([taskInfo], cot_instruction)\n        return answer\n",
        "api_calls": 4,
        "structure_label": "Decompositional Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (71.1%, 85.2%), Median: 78.1%",
        "test_fitness": "95% Bootstrap Confidence Interval: (67.4%, 73.8%), Median: 70.6%"
    }
]