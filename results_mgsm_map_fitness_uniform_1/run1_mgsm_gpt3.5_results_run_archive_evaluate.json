[
    {
        "thought": "By encouraging the LLM to think step by step rather than directly outputting an answer, chain-of-thought reasoning enables complex problem-solving through intermediate steps. This practice improves the model's ability to handle tasks that require deeper reasoning and provides insight into its decision-making process.",
        "name": "Chain-of-Thought",
        "code": "def forward(self, taskInfo):\n    # Instruction for the Chain-of-Thought (CoT) approach\n    # It is an important practice that allows the LLM to think step by step before solving the task.\n    cot_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instantiate a new LLM agent specifically for CoT\n    # To allow LLM thinking before answering, we need to set an additional output field 'thinking'.\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Prepare the inputs for the CoT agent\n    # The input should be a list of Info, and the first one is often the taskInfo\n    cot_agent_inputs = [taskInfo]\n\n    # Get the response from the CoT agent\n    thinking, answer = cot_agent(cot_agent_inputs, cot_instruction)\n\n    # Return only the final answer\n    return answer\n",
        "api_calls": 1,
        "structure_label": "Linear Chain-of-Thought",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (11.7%, 25.0%), Median: 18.0%",
        "test_fitness": "95% Bootstrap Confidence Interval: (13.1%, 18.2%), Median: 15.6%"
    },
    {
        "thought": "While an LLM can arrive at the correct answer, its reasoning may vary. By repeatedly asking the same question with high temperature settings, we can generate different reasoning paths. We then combine multiple answers from these Chain-of-Thought (CoT) agents to produce a more accurate final answer through ensembling.",
        "name": "Self-Consistency with Chain-of-Thought",
        "code": "def forward(self, taskInfo):\n    # Instruction for step-by-step reasoning\n    cot_instruction = \"Please think step by step and then solve the task.\"\n    N = 5 # Number of CoT agents\n\n    # Initialize multiple CoT agents with a higher temperature for varied reasoning\n    cot_agents = [LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent', temperature=0.8) for _ in range(N)]\n\n    # Majority voting function to select the most common answer\n    from collections import Counter\n    def majority_voting(answers):\n        return Counter(answers).most_common(1)[0][0]\n    \n    possible_answers = []\n    for i in range(N):\n        thinking, answer = cot_agents[i]([taskInfo], cot_instruction)\n        possible_answers.append(answer.content)\n\n    # Ensembling the answers from multiple CoT agents\n    answer = majority_voting(possible_answers)\n    return answer  \n",
        "api_calls": 5,
        "structure_label": "Multi-Agent Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (7.0%, 18.8%), Median: 12.5%",
        "test_fitness": "95% Bootstrap Confidence Interval: (9.4%, 13.8%), Median: 11.5%"
    },
    {
        "thought": "To enhance its performance, an LLM can iteratively improve its answer based on feedback. By reflecting on its previous attempts and incorporating feedback, the model can refine its reasoning and provide a more accurate solution.",
        "name": "Self-Refine (Reflexion)",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    cot_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for reflecting on previous attempts and feedback to improve\n    cot_reflect_instruction = \"Given previous attempts and feedback, carefully consider where you could go wrong in your latest attempt. Using insights from previous attempts, try to solve the task better.\"\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Instruction for providing feedback and correcting the answer\n    critic_instruction = \"Please review the answer above and criticize on where might be wrong. If you are absolutely sure it is correct, output 'True' in 'correct'.\"\n    critic_agent = LLMAgentBase(['feedback', 'correct'], 'Critic Agent')\n    \n    N_max = 5 # Maximum number of attempts\n\n    # Initial attempt\n    cot_inputs = [taskInfo]\n    thinking, answer = cot_agent(cot_inputs, cot_initial_instruction, 0)\n\n    for i in range(N_max):\n        # Get feedback and correct status from the critic\n        feedback, correct = critic_agent([taskInfo, thinking, answer], critic_instruction, i)\n        if correct.content == 'True':\n            break\n            \n        # Add feedback to the inputs for the next iteration\n        cot_inputs.extend([thinking, answer, feedback])\n\n        # Reflect on previous attempts and refine the answer\n        thinking, answer = cot_agent(cot_inputs, cot_reflect_instruction, i + 1)\n    return answer\n",
        "api_calls": 10,
        "structure_label": "Iterative Refinement",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (10.2%, 22.7%), Median: 16.4%",
        "test_fitness": "95% Bootstrap Confidence Interval: (15.4%, 20.8%), Median: 18.0%"
    },
    {
        "thought": "By letting different LLMs debate with each other, we can leverage their diverse perspectives to find better solutions for tasks.",
        "name": "LLM Debate",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    debate_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for debating and updating the solution based on other agents' solutions\n    debate_instruction = \"Given solutions to the problem from other agents, consider their opinions as additional advice. Please think carefully and provide an updated answer.\"\n    \n    # Initialize debate agents with different roles and a moderate temperature for varied reasoning\n    debate_agents = [LLMAgentBase(['thinking', 'answer'], 'Debate Agent', temperature=0.8, role=role) for role in ['Math Professor', 'Grade School Teacher', 'Math Enthusiast']]\n\n    # Instruction for final decision-making based on all debates and solutions\n    final_decision_instruction = \"Given all the above thinking and answers, reason over them carefully and provide a final answer.\"\n    final_decision_agent = LLMAgentBase(['thinking', 'answer'], 'Final Decision Agent', temperature=0.1)\n\n    max_round = 2 # Maximum number of debate rounds\n    all_thinking = [[] for _ in range(max_round)]\n    all_answer = [[] for _ in range(max_round)]\n\n    # Perform debate rounds\n    for r in range(max_round):\n        for i in range(len(debate_agents)):\n            if r == 0:\n                thinking, answer = debate_agents[i]([taskInfo], debate_initial_instruction)\n            else:\n                input_infos = [taskInfo] + [all_thinking[r-1][i]] + all_thinking[r-1][:i] + all_thinking[r-1][i+1:]\n                thinking, answer = debate_agents[i](input_infos, debate_instruction)\n            all_thinking[r].append(thinking)\n            all_answer[r].append(answer)\n    \n    # Make the final decision based on all debate results and solutions\n    thinking, answer = final_decision_agent([taskInfo] + all_thinking[max_round-1] + all_answer[max_round-1], final_decision_instruction)\n    return answer\n",
        "api_calls": 12,
        "structure_label": "Multi-Agent Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (39.8%, 57.0%), Median: 48.4%",
        "test_fitness": "95% Bootstrap Confidence Interval: (46.5%, 53.5%), Median: 50.0%"
    },
    {
        "thought": "Let LLM first think about the principles involved in solving this task which could be helpful. By understanding the underlying principles, the model can better reason through the problem and provide a more accurate solution.",
        "name": "Step-back Abstraction",
        "code": "def forward(self, taskInfo):\n        # Instruction for understanding the principles involved in the task\n        principle_instruction = \"What are the physics, chemistry or biology principles and concepts involved in solving this task? First think step by step. Then list all involved principles and explain them.\"\n        \n        # Instruction for solving the task based on the principles\n        cot_instruction = \"Given the question and the involved principle behind the question, think step by step and then solve the task.\"\n        \n        # Instantiate LLM agents\n        principle_agent = LLMAgentBase(['thinking', 'principle'], 'Principle Agent')\n        cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n        \n        # Get the principles involved in the task\n        thinking, principle = principle_agent([taskInfo], principle_instruction)\n\n        # Use the principles to solve the task\n        thinking, answer = cot_agent([taskInfo, thinking, principle], cot_instruction)\n        return answer\n",
        "api_calls": 4,
        "structure_label": "Abstraction to Principles Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (18.8%, 33.6%), Median: 25.8%",
        "test_fitness": "95% Bootstrap Confidence Interval: (23.6%, 29.8%), Median: 26.6%"
    },
    {
        "thought": "Similar to Quality-Diversity methods, let LLM generate multiple diverse interesting solutions could help. By encouraging the model to explore different reasoning paths, we can increase the chances of finding the best solution.",
        "name": "Quality-Diversity",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    cot_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for giving diverse answers\n    qd_instruction = \"Given previous attempts, try to come up with another interesting way to solve the task.\"\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Instruction for final decision-making based on collected reasoning and answers\n    final_decision_instruction = \"Given all the above solutions, reason over them carefully and provide a final answer.\"\n    final_decision_agent = LLMAgentBase(['thinking', 'answer'], 'Final Decision Agent', temperature=0.1)\n    \n    N_max = 3 # Maximum number of attempts\n\n    # Initial attempt\n    cot_inputs = [taskInfo]\n    possible_answers = []\n    thinking, answer = cot_agent(cot_inputs, cot_initial_instruction, 0)\n\n    # Add the answer to the list of possible answers\n    possible_answers.extend([thinking, answer])\n\n    for i in range(N_max):\n        # Reflect on previous attempts and generate another interesting answer\n        cot_inputs.extend([thinking, answer])\n\n        # Generate another interesting answer\n        thinking, answer = cot_agent(cot_inputs, qd_instruction, i + 1)\n        possible_answers.extend([thinking, answer])\n\n    # Make the final decision based on all generated answers\n    thinking, answer = final_decision_agent([taskInfo] + possible_answers, final_decision_instruction)\n    return answer\n",
        "api_calls": 8,
        "structure_label": "Multi-Agent Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (45.3%, 62.5%), Median: 53.9%",
        "test_fitness": "95% Bootstrap Confidence Interval: (50.5%, 57.4%), Median: 54.0%"
    },
    {
        "thought": "Similar to Auto-GPT and expert prompting, we can use dynamic control flow in the design to let the agent decide what expert we should use.",
        "name": "Dynamic Assignment of Roles",
        "code": "def forward(self, taskInfo):\n        # Instruction for step-by-step reasoning\n        cot_instruction = \"Please think step by step and then solve the task.\"\n        expert_agents = [LLMAgentBase(['thinking', 'answer'], 'Expert Agent', role=role) for role in ['Math Professor', 'Grade School Teacher', 'Math Enthusiast', 'Helpful Assistant']]\n\n        # Instruction for routing the task to the appropriate expert\n        routing_instruction = \"Given the task, please choose an Expert to answer the question. Choose from: Math Professor, Grade School Teacher, Math Enthusiast.\"\n        routing_agent = LLMAgentBase(['choice'], 'Routing agent')\n\n        # Get the choice of expert to route the task\n        choice = routing_agent([taskInfo], routing_instruction)[0]\n\n        if 'professor' in choice.content.lower():\n            expert_id = 0\n        elif 'teacher' in choice.content.lower():\n            expert_id = 1\n        elif 'enthusiast' in choice.content.lower():\n            expert_id = 2\n        else:\n            expert_id = 3 # Default to helpful assistant\n\n        thinking, answer = expert_agents[expert_id]([taskInfo], cot_instruction)\n        return answer\n",
        "api_calls": 6,
        "structure_label": "Decompositional Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (4.7%, 14.8%), Median: 9.4%",
        "test_fitness": "95% Bootstrap Confidence Interval: (12.1%, 17.0%), Median: 14.5%"
    },
    {
        "thought": "**Insights:**\nThe architecture can be enhanced by integrating the reasoning outputs into a single coherent feedback loop. This allows the architecture to dynamically adapt based on the collective outputs rather than treating them as isolated paths. \n**Overall Idea:**\nThis revised architecture focuses on using multiple reasoning aspects while ensuring inter-agent feedback to optimize decision-making. Each agent can provide insights that contribute to refining the overall solution. \n**Implementation:**\n1. Instantiate distinct agents for numerical, logical, and contextual reasoning.\n2. Each agent evaluates the task and provides feedback that is aggregated and analyzed.\n3. Utilize a final decision-making process that incorporates this aggregated feedback for a more coherent output.",
        "name": "Integrated Reasoning Feedback Agent",
        "code": "def forward(self, taskInfo):\n    # Aggregate all reasoning aspects into a single evaluation\n    instruction = \"Analyze the problem from different perspectives: numerical, logical, and contextual. Provide insights for refining the solution.\"\n    all_agent = LLMAgentBase([\"thinking\", \"feedback\"], \"Integrated Reasoning Agent\")  # Single instance for combined reasoning\n    \n    # Collect feedback from all reasoning aspects in one call\n    feedback = all_agent([taskInfo], instruction)  # 1 call for all aspects\n\n    # Final decision based on aggregated feedback\n    final_decision_instruction = \"Assess the following feedback and provide a coherent final answer based on the insights.\"\n    final_decision_agent = LLMAgentBase([\"thinking\", \"final_answer\"], \"Final Decision Agent\")  # Another single call\n    final_thinking, final_answer = final_decision_agent([taskInfo, feedback[1]], final_decision_instruction)  # 1 call\n\n    return final_answer  # Total API Calls: 2",
        "fitness": "95% Bootstrap Confidence Interval: (56.2%, 72.7%), Median: 64.8%",
        "generation": 25,
        "api_calls": 3,
        "structure_label": "Linear Chain-of-Thought",
        "test_fitness": "95% Bootstrap Confidence Interval: (57.9%, 64.6%), Median: 61.3%"
    },
    {
        "thought": "**Insights:**\nTo optimize the architecture, I propose a unified reasoning agent that consolidates perspectives in a single evaluation pass. Instead of relying on multiple agents for distinct reasoning tasks, this approach will allow for a comprehensive analysis while adhering strictly to the few API call requirement. \n**Overall Idea:**\nThe revised architecture will utilize a single LLMAgentBase instance to evaluate the task from numerical, logical, and contextual viewpoints simultaneously. This will streamline the process, reduce complexity, and ensure a cohesive final answer. \n**Implementation:**\n1. Utilize one LLMAgentBase instance that combines all reasoning aspects into a single instruction.\n2. The instruction will guide the agent to perform a complete analysis of the task while deriving the final answer, thus reducing the number of API calls to one.\n3. Return the result directly from the single call, ensuring efficiency and compliance with API call limits.",
        "name": "Unified Perspective Reasoning Agent",
        "code": "def forward(self, taskInfo):\n    # Comprehensive instruction covering all reasoning aspects\n    instruction = \"Analyze the following math problem thoroughly, considering numerical, logical, and contextual perspectives. Provide step-by-step reasoning and the final answer.\"\n    agent = LLMAgentBase([\"thinking\", \"final_answer\"], \"Unified Perspective Reasoning Agent\")  # Single instance for the task\n    result = agent([taskInfo], instruction)  # 1 call for comprehensive analysis\n    return result[1]  # Return the answer part of the Info object",
        "fitness": "95% Bootstrap Confidence Interval: (53.1%, 70.3%), Median: 61.7%",
        "generation": 39,
        "api_calls": 1,
        "structure_label": "Linear Chain-of-Thought",
        "test_fitness": "95% Bootstrap Confidence Interval: (53.6%, 60.4%), Median: 57.0%"
    },
    {
        "thought": "**Insights:**\nTo enhance the reasoning capabilities, I propose an architecture that leverages multiple LLMAgentBase instances, each focusing on a different aspect of reasoning (numerical, logical, contextual). This will allow for a more comprehensive understanding of the problem before converging on a final answer. Additionally, I will incorporate an iterative refinement process to utilize feedback from initial outputs.\n**Overall Idea:**\nThis architecture will consist of three distinct reasoning agents that analyze the task from different perspectives and then synthesize their findings. It will also include a final agent to integrate these insights and produce the answer, ensuring a detailed and reasoned approach to problem-solving.\n**Implementation:**\n1. Implement three LLMAgentBase instances, each dedicated to a specific perspective (numerical, logical, contextual).\n2. Each agent will evaluate the task and provide insights, which will then be aggregated.\n3. A final agent will use the aggregated insights to derive the solution, allowing for a more robust reasoning process that reflects the complexity of the problem.",
        "name": "Consolidated Multi-Agent Reasoning Agent",
        "code": "def forward(self, taskInfo):\n    # Comprehensive instruction covering all reasoning aspects\n    instruction = \"Analyze the following math problem thoroughly, considering numerical, logical, and contextual perspectives. Provide step-by-step reasoning and the final answer.\"\n    agent = LLMAgentBase([\"thinking\", \"final_answer\"], \"Consolidated Reasoning Agent\")  # Single instance for the task\n    result = agent([taskInfo], instruction)  # 1 call for comprehensive analysis\n    return result[1]  # Return the answer part of the Info object",
        "fitness": "95% Bootstrap Confidence Interval: (52.3%, 69.5%), Median: 60.9%",
        "generation": 40,
        "api_calls": 1,
        "structure_label": "Linear Chain-of-Thought",
        "test_fitness": "95% Bootstrap Confidence Interval: (53.2%, 60.0%), Median: 56.6%"
    },
    {
        "thought": "**Insights:**\nTo enhance the problem-solving abilities even further, I propose an architecture that not only extracts high-level principles but also integrates contextual reasoning to provide a richer solution. By analyzing the specific problem context along with abstract principles, the agent can provide a more nuanced answer.\n**Overall Idea:**\nThis agent will be structured to first analyze the problem context and extract high-level principles in a single step, then combine these insights to produce a more accurate and context-aware solution. The final answer will be derived from a single LLMAgentBase call that synthesizes both principles and context.\n**Implementation:**\n1. Create an instruction that both defines the problem context and extracts high-level mathematical principles simultaneously.\n2. Use a single LLMAgentBase instance to execute this instruction, ensuring it returns detailed insights for application.\n3. Implement the final reasoning step that combines these insights to formulate the answer, ensuring only one API call is made for this processing.",
        "name": "Contextual Principles Reasoning Agent",
        "code": "def forward(self, taskInfo):\n    # Phase 1: Analyze the problem context and extract high-level principles\n    instruction = \"Analyze the following mathematical problem and provide a detailed solution: Identify the context, define the variables involved, and extract the underlying mathematical principles relevant to solving the problem.\"\n    agent = LLMAgentBase([\"thinking\", \"final_answer\"], \"Contextual Principles Agent\")  # Single instance for comprehensive reasoning\n\n    # Execute the reasoning and get the final answer\n    output = agent([taskInfo], instruction)  # 1 call\n\n    return output[1]  # Return the answer from the output (Total API Calls: 1)",
        "fitness": "95% Bootstrap Confidence Interval: (49.2%, 66.4%), Median: 57.8%",
        "generation": 27,
        "api_calls": 1,
        "structure_label": "Abstraction to Principles Reasoning",
        "test_fitness": "95% Bootstrap Confidence Interval: (54.6%, 61.4%), Median: 58.0%"
    },
    {
        "thought": "**Insights:**\nTo enhance the reasoning process and maximize effectiveness while keeping the number of API calls low, I propose an architecture that simplifies the instructions for clarity and focus. This will help reduce cognitive load on the LLM and ensure it more accurately captures the essence of the problem at hand.\n**Overall Idea:**\nThis architecture will use a single agent that first extracts key principles from the task, then applies those principles directly to derive the final answer, all while ensuring that the instructions are clear and concise.\n**Implementation:**\n1. Define a clear instruction focused solely on extracting principles relevant to the task.\n2. Use a single agent instance to analyze the task and derive principles in one go, followed immediately by applying those principles to get the final answer.",
        "name": "Focused Principle Application Agent",
        "code": "def forward(self, taskInfo):\n    # Step 1: Extract core principles from the task\n    principle_instruction = \"Extract the key principles needed to solve the following mathematical problem.\"\n    principle_agent = LLMAgentBase([\"thinking\", \"principles\"], \"Principle Extraction Agent\")  # Separate agent for extraction\n    principles_thinking, principles = principle_agent([taskInfo], principle_instruction)  # 1 call\n    \n    # Step 2: Apply the extracted principles to get the final answer\n    application_instruction = \"Using the extracted principles, solve the problem.\"\n    application_agent = LLMAgentBase([\"thinking\", \"final_answer\"], \"Final Application Agent\")  # Separate agent for application\n    final_thinking, final_answer = application_agent([taskInfo, principles], application_instruction)  # 1 call\n\n    return final_answer  # Total API Calls: 2",
        "fitness": "95% Bootstrap Confidence Interval: (49.2%, 66.4%), Median: 57.8%",
        "generation": 30,
        "api_calls": 2,
        "structure_label": "Abstraction to Principles Reasoning",
        "test_fitness": "95% Bootstrap Confidence Interval: (49.4%, 56.4%), Median: 52.9%"
    }
]