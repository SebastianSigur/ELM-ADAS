[
    {
        "thought": "By encouraging the LLM to think step by step rather than directly outputting an answer, chain-of-thought reasoning enables complex problem-solving through intermediate steps. This practice improves the model's ability to handle tasks that require deeper reasoning and provides insight into its decision-making process.",
        "name": "Chain-of-Thought",
        "code": "def forward(self, taskInfo):\n    # Instruction for the Chain-of-Thought (CoT) approach\n    # It is an important practice that allows the LLM to think step by step before solving the task.\n    cot_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instantiate a new LLM agent specifically for CoT\n    # To allow LLM thinking before answering, we need to set an additional output field 'thinking'.\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Prepare the inputs for the CoT agent\n    # The input should be a list of Info, and the first one is often the taskInfo\n    cot_agent_inputs = [taskInfo]\n\n    # Get the response from the CoT agent\n    thinking, answer = cot_agent(cot_agent_inputs, cot_instruction)\n\n    # Return only the final answer\n    return answer\n",
        "api_calls": 1,
        "structure_label": "Linear Chain-of-Thought",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (7.8%, 19.5%), Median: 13.3%",
        "test_fitness": "95% Bootstrap Confidence Interval: (10.8%, 15.4%), Median: 13.0%"
    },
    {
        "thought": "While an LLM can arrive at the correct answer, its reasoning may vary. By repeatedly asking the same question with high temperature settings, we can generate different reasoning paths. We then combine multiple answers from these Chain-of-Thought (CoT) agents to produce a more accurate final answer through ensembling.",
        "name": "Self-Consistency with Chain-of-Thought",
        "code": "def forward(self, taskInfo):\n    # Instruction for step-by-step reasoning\n    cot_instruction = \"Please think step by step and then solve the task.\"\n    N = 5 # Number of CoT agents\n\n    # Initialize multiple CoT agents with a higher temperature for varied reasoning\n    cot_agents = [LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent', temperature=0.8) for _ in range(N)]\n\n    # Majority voting function to select the most common answer\n    from collections import Counter\n    def majority_voting(answers):\n        return Counter(answers).most_common(1)[0][0]\n    \n    possible_answers = []\n    for i in range(N):\n        thinking, answer = cot_agents[i]([taskInfo], cot_instruction)\n        possible_answers.append(answer.content)\n\n    # Ensembling the answers from multiple CoT agents\n    answer = majority_voting(possible_answers)\n    return answer  \n",
        "api_calls": 5,
        "structure_label": "Multi-Agent Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (4.7%, 14.8%), Median: 9.4%",
        "test_fitness": "95% Bootstrap Confidence Interval: (11.9%, 16.8%), Median: 14.2%"
    },
    {
        "thought": "To enhance its performance, an LLM can iteratively improve its answer based on feedback. By reflecting on its previous attempts and incorporating feedback, the model can refine its reasoning and provide a more accurate solution.",
        "name": "Self-Refine (Reflexion)",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    cot_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for reflecting on previous attempts and feedback to improve\n    cot_reflect_instruction = \"Given previous attempts and feedback, carefully consider where you could go wrong in your latest attempt. Using insights from previous attempts, try to solve the task better.\"\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Instruction for providing feedback and correcting the answer\n    critic_instruction = \"Please review the answer above and criticize on where might be wrong. If you are absolutely sure it is correct, output 'True' in 'correct'.\"\n    critic_agent = LLMAgentBase(['feedback', 'correct'], 'Critic Agent')\n    \n    N_max = 5 # Maximum number of attempts\n\n    # Initial attempt\n    cot_inputs = [taskInfo]\n    thinking, answer = cot_agent(cot_inputs, cot_initial_instruction, 0)\n\n    for i in range(N_max):\n        # Get feedback and correct status from the critic\n        feedback, correct = critic_agent([taskInfo, thinking, answer], critic_instruction, i)\n        if correct.content == 'True':\n            break\n            \n        # Add feedback to the inputs for the next iteration\n        cot_inputs.extend([thinking, answer, feedback])\n\n        # Reflect on previous attempts and refine the answer\n        thinking, answer = cot_agent(cot_inputs, cot_reflect_instruction, i + 1)\n    return answer\n",
        "api_calls": 10,
        "structure_label": "Iterative Refinement",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (11.7%, 25.0%), Median: 18.0%",
        "test_fitness": "95% Bootstrap Confidence Interval: (15.6%, 21.0%), Median: 18.2%"
    },
    {
        "thought": "By letting different LLMs debate with each other, we can leverage their diverse perspectives to find better solutions for tasks.",
        "name": "LLM Debate",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    debate_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for debating and updating the solution based on other agents' solutions\n    debate_instruction = \"Given solutions to the problem from other agents, consider their opinions as additional advice. Please think carefully and provide an updated answer.\"\n    \n    # Initialize debate agents with different roles and a moderate temperature for varied reasoning\n    debate_agents = [LLMAgentBase(['thinking', 'answer'], 'Debate Agent', temperature=0.8, role=role) for role in ['Math Professor', 'Grade School Teacher', 'Math Enthusiast']]\n\n    # Instruction for final decision-making based on all debates and solutions\n    final_decision_instruction = \"Given all the above thinking and answers, reason over them carefully and provide a final answer.\"\n    final_decision_agent = LLMAgentBase(['thinking', 'answer'], 'Final Decision Agent', temperature=0.1)\n\n    max_round = 2 # Maximum number of debate rounds\n    all_thinking = [[] for _ in range(max_round)]\n    all_answer = [[] for _ in range(max_round)]\n\n    # Perform debate rounds\n    for r in range(max_round):\n        for i in range(len(debate_agents)):\n            if r == 0:\n                thinking, answer = debate_agents[i]([taskInfo], debate_initial_instruction)\n            else:\n                input_infos = [taskInfo] + [all_thinking[r-1][i]] + all_thinking[r-1][:i] + all_thinking[r-1][i+1:]\n                thinking, answer = debate_agents[i](input_infos, debate_instruction)\n            all_thinking[r].append(thinking)\n            all_answer[r].append(answer)\n    \n    # Make the final decision based on all debate results and solutions\n    thinking, answer = final_decision_agent([taskInfo] + all_thinking[max_round-1] + all_answer[max_round-1], final_decision_instruction)\n    return answer\n",
        "api_calls": 12,
        "structure_label": "Multi-Agent Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (43.8%, 60.9%), Median: 52.3%",
        "test_fitness": "95% Bootstrap Confidence Interval: (43.6%, 50.6%), Median: 47.1%"
    },
    {
        "thought": "Let LLM first think about the principles involved in solving this task which could be helpful. By understanding the underlying principles, the model can better reason through the problem and provide a more accurate solution.",
        "name": "Step-back Abstraction",
        "code": "def forward(self, taskInfo):\n        # Instruction for understanding the principles involved in the task\n        principle_instruction = \"What are the physics, chemistry or biology principles and concepts involved in solving this task? First think step by step. Then list all involved principles and explain them.\"\n        \n        # Instruction for solving the task based on the principles\n        cot_instruction = \"Given the question and the involved principle behind the question, think step by step and then solve the task.\"\n        \n        # Instantiate LLM agents\n        principle_agent = LLMAgentBase(['thinking', 'principle'], 'Principle Agent')\n        cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n        \n        # Get the principles involved in the task\n        thinking, principle = principle_agent([taskInfo], principle_instruction)\n\n        # Use the principles to solve the task\n        thinking, answer = cot_agent([taskInfo, thinking, principle], cot_instruction)\n        return answer\n",
        "api_calls": 4,
        "structure_label": "Abstraction to Principles Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (20.3%, 35.9%), Median: 28.1%",
        "test_fitness": "95% Bootstrap Confidence Interval: (22.9%, 29.0%), Median: 25.9%"
    },
    {
        "thought": "Similar to Quality-Diversity methods, let LLM generate multiple diverse interesting solutions could help. By encouraging the model to explore different reasoning paths, we can increase the chances of finding the best solution.",
        "name": "Quality-Diversity",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    cot_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for giving diverse answers\n    qd_instruction = \"Given previous attempts, try to come up with another interesting way to solve the task.\"\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Instruction for final decision-making based on collected reasoning and answers\n    final_decision_instruction = \"Given all the above solutions, reason over them carefully and provide a final answer.\"\n    final_decision_agent = LLMAgentBase(['thinking', 'answer'], 'Final Decision Agent', temperature=0.1)\n    \n    N_max = 3 # Maximum number of attempts\n\n    # Initial attempt\n    cot_inputs = [taskInfo]\n    possible_answers = []\n    thinking, answer = cot_agent(cot_inputs, cot_initial_instruction, 0)\n\n    # Add the answer to the list of possible answers\n    possible_answers.extend([thinking, answer])\n\n    for i in range(N_max):\n        # Reflect on previous attempts and generate another interesting answer\n        cot_inputs.extend([thinking, answer])\n\n        # Generate another interesting answer\n        thinking, answer = cot_agent(cot_inputs, qd_instruction, i + 1)\n        possible_answers.extend([thinking, answer])\n\n    # Make the final decision based on all generated answers\n    thinking, answer = final_decision_agent([taskInfo] + possible_answers, final_decision_instruction)\n    return answer\n",
        "api_calls": 8,
        "structure_label": "Multi-Agent Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (47.7%, 64.8%), Median: 56.2%",
        "test_fitness": "95% Bootstrap Confidence Interval: (52.2%, 59.2%), Median: 55.8%"
    },
    {
        "thought": "Similar to Auto-GPT and expert prompting, we can use dynamic control flow in the design to let the agent decide what expert we should use.",
        "name": "Dynamic Assignment of Roles",
        "code": "def forward(self, taskInfo):\n        # Instruction for step-by-step reasoning\n        cot_instruction = \"Please think step by step and then solve the task.\"\n        expert_agents = [LLMAgentBase(['thinking', 'answer'], 'Expert Agent', role=role) for role in ['Math Professor', 'Grade School Teacher', 'Math Enthusiast', 'Helpful Assistant']]\n\n        # Instruction for routing the task to the appropriate expert\n        routing_instruction = \"Given the task, please choose an Expert to answer the question. Choose from: Math Professor, Grade School Teacher, Math Enthusiast.\"\n        routing_agent = LLMAgentBase(['choice'], 'Routing agent')\n\n        # Get the choice of expert to route the task\n        choice = routing_agent([taskInfo], routing_instruction)[0]\n\n        if 'professor' in choice.content.lower():\n            expert_id = 0\n        elif 'teacher' in choice.content.lower():\n            expert_id = 1\n        elif 'enthusiast' in choice.content.lower():\n            expert_id = 2\n        else:\n            expert_id = 3 # Default to helpful assistant\n\n        thinking, answer = expert_agents[expert_id]([taskInfo], cot_instruction)\n        return answer\n",
        "api_calls": 6,
        "structure_label": "Decompositional Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (5.5%, 15.6%), Median: 10.2%",
        "test_fitness": "95% Bootstrap Confidence Interval: (10.9%, 15.5%), Median: 13.1%"
    },
    {
        "thought": "**Insights:**\nTo innovate further, I propose a more dynamic architecture that incorporates iterative refinement where each agent provides feedback to the previous step, allowing for enhanced precision in the final answer. **Overall Idea:**\nThis architecture will involve agents working in a loop to continuously refine their outputs based on collaborative insights until a stable solution emerges. By incorporating feedback directly after each step, we can enhance the quality of the final solution. **Implementation:**\n1. Start with an agent for principle extraction that identifies key elements in the problem.\n2. Use an iterative loop where the solving agent proposes a solution, which is then validated and refined based on feedback.\n3. If the solution requires further adjustment, the loop iterates again, refining principles or approaches based on validation results until a satisfactory solution is reached.",
        "name": "Iterative Collaborative Refinement Agent",
        "code": "def forward(self, taskInfo):\n    # Step 1: Extract principles involved in the problem using a single agent\n    principle_instruction = \"What principles are needed to solve this math problem?\"\n    principle_agent = LLMAgentBase([\"thinking\", \"principles\"], \"Principle Agent\")  # Call 1\n    response_principles = principle_agent([taskInfo], principle_instruction)  # Call 2\n    principles = response_principles[1].content  # Extracting principles\n\n    # Step 2: Prepare a solving and validating instruction\n    solving_agent = LLMAgentBase([\"thinking\", \"solution\"], \"Solving Agent\")  # Call 3\n    validation_agent = LLMAgentBase([\"thinking\", \"validated_answer\"], \"Validation Agent\")  # Call 4\n\n    refined_solution = None\n    # Step 3: Initialize the iterative refinement process\n    for i in range(3):  # Loop: 3 iterations\n        # Solve the problem using principles\n        solving_instruction = f\"Using the principles: {principles}, solve the problem.\"\n        response_solution = solving_agent([taskInfo, principles], solving_instruction)  # Call 5\n        solution = response_solution[1].content  # Extracting solution\n\n        # Validate the solution\n        validation_instruction = f\"Validate this solution: {solution} based on the principles: {principles}.\"\n        response_validation = validation_agent([taskInfo, solution, principles], validation_instruction)  # Call 6\n        validated_solution = response_validation[1].content  # Extracting validated solution\n\n        # If the validation suggests a new principle, update the principles\n        if validated_solution != solution:\n            principles = validated_solution\n        else:\n            break  # Exit if no further refinement is needed\n\n    return validated_solution",
        "fitness": "95% Bootstrap Confidence Interval: (76.6%, 89.8%), Median: 83.6%",
        "generation": 30,
        "api_calls": 16,
        "structure_label": "Iterative Refinement",
        "test_fitness": "95% Bootstrap Confidence Interval: (76.5%, 82.1%), Median: 79.4%"
    },
    {
        "thought": "**Insights:**\nTo enhance the architecture, I propose a structure that utilizes a multi-agent approach where each agent focuses on a distinct aspect of the problem, allowing for richer reasoning and a more comprehensive solution by synthesizing diverse insights. \n**Overall Idea:**\nThis design will have specialized LLMAgentBase agents responsible for different stages of the task: principle extraction, problem-solving, and validation. Each agent will run concurrently to improve the synthesis of reasoning paths and solutions. Feedback will be incorporated iteratively to refine outputs. \n**Implementation:**\n1. Define separate agents for each step: one for principle extraction, another for solving the problem based on those principles, and a final agent for validating the solution. \n2. Use loops to allow concurrent calls for critique and validation, enhancing the collective output quality. \n3. Return the validated final answer from the last agent's output, incorporating insights from feedback loops during processing.",
        "name": "Concurrent Multi-Agent Reasoner",
        "code": "def forward(self, taskInfo):\n    # Step 1: Extract principles involved in the problem\n    principle_instruction = \"What principles are involved in solving this math problem? First, think step by step and then list them.\"\n    principle_agent = LLMAgentBase(['thinking', 'principles'], 'Principle Agent')  # Call 1\n    response_principles = principle_agent([taskInfo], principle_instruction)  # Call 2\n    principles = response_principles[1].content  # Extracting the principles output correctly\n    \n    # Step 2: Solve the problem using the principles\n    solving_instruction = f\"Given the principles: {principles}, solve the problem step by step.\"\n    solving_agent = LLMAgentBase(['thinking', 'solution'], 'Solving Agent')  # Call 3\n    response_solution = solving_agent([taskInfo, principles], solving_instruction)  # Call 4\n    solution = response_solution[1].content  # Extracting the solution output correctly\n    \n    # Step 3: Validate the solution\n    validation_instruction = f\"Validate this solution: {solution} based on the principles: {principles}.\"\n    validation_agent = LLMAgentBase(['thinking', 'validated_answer'], 'Validation Agent')  # Call 5\n    response_validation = validation_agent([taskInfo, solution, principles], validation_instruction)  # Call 6\n    validated_solution = response_validation[1].content  # Extracting validated solution correctly\n    \n    return validated_solution",
        "fitness": "95% Bootstrap Confidence Interval: (74.2%, 87.5%), Median: 81.2%",
        "generation": 13,
        "api_calls": 6,
        "structure_label": "Multi-Agent Reasoning",
        "test_fitness": "95% Bootstrap Confidence Interval: (70.2%, 76.4%), Median: 73.4%"
    },
    {
        "thought": "**Insights:**\nTo innovate further, I propose a branching approach where multiple agents can evaluate the solution simultaneously rather than relying on one agent to iterate over feedback. This architecture will allow diverse perspectives on the solution and increase the likelihood of generating a robust final answer.\n**Overall Idea:**\nThe proposed architecture will include parallel paths where several agents assess the initial answer and contribute to refining it. After collecting their insights, we will synthesize these into a final solution.\n**Implementation:**\n1. Define agents for generating principles, solving the problem, and validating it concurrently.\n2. Collect outputs from each agent and apply a selection mechanism to determine the best solution based on their evaluations.",
        "name": "Parallel Insight Refinement Agent",
        "code": "def forward(self, taskInfo):\n    # Step 1: Extract principles involved in the problem using a single agent\n    principle_instruction = \"What principles are needed to solve this math problem?\"\n    principle_agent = LLMAgentBase([\"thinking\", \"principles\"], \"Principle Agent\")  # Call 1\n    response_principles = principle_agent([taskInfo], principle_instruction)  # Call 2\n    principles = response_principles[1].content  # Extracting principles\n\n    # Step 2: Solve the problem using principles with a single agent\n    solving_instruction = f\"Using the principles: {principles}, solve the problem.\"\n    solving_agent = LLMAgentBase([\"thinking\", \"solution\"], \"Solving Agent\")  # Call 3\n    response_solution = solving_agent([taskInfo, principles], solving_instruction)  # Call 4\n    solution = response_solution[1].content  # Extracting solution\n\n    # Step 3: Validate the solution with a single validation agent\n    validation_instruction = f\"Validate this solution: {solution} based on the principles: {principles}.\"\n    validation_agent = LLMAgentBase([\"thinking\", \"validated_answer\"], \"Validation Agent\")  # Call 5\n    response_validation = validation_agent([taskInfo, solution, principles], validation_instruction)  # Call 6\n    validated_solution = response_validation[1].content  # Extracting validated solution\n\n    return validated_solution",
        "fitness": "95% Bootstrap Confidence Interval: (71.1%, 85.2%), Median: 78.1%",
        "generation": 28,
        "api_calls": 6,
        "structure_label": "Abstraction to Principles Reasoning",
        "test_fitness": "95% Bootstrap Confidence Interval: (68.8%, 75.0%), Median: 71.9%"
    },
    {
        "thought": "**Insights:**\nTo address the issues in the previous proposal, I suggest a streamlined architecture that focuses on direct interaction between principle extraction and solution formulation, followed by validation in a single sequential process. This will reduce API calls while maintaining clarity and effectiveness. The rationale is to employ a more integrated approach that reduces overhead without compromising the quality of reasoning. \n**Overall Idea:**\nThe revised architecture will maintain the principle extraction step but will combine the solution generation and validation into a single flow, allowing for fewer API calls and avoiding redundancy. This is structured as a linear chain of thought but retains the essence of decompositional reasoning. \n**Implementation:**\n1. First, the agent extracts key principles from the task.\n2. Then, it generates a solution based on these principles and validates it in one call to minimize API usage.\n3. Finally, it returns the validated solution.",
        "name": "Integrated Principle-Based Reasoning",
        "code": "def forward(self, taskInfo):\n    # Step 1: Extract principles from the task\n    instruction = 'Analyze the math problem and extract key principles necessary for solving it.'\n    principle_agent = LLMAgentBase(['thinking', 'principles'], 'Principle Extraction Agent')  # Call 1\n    principles_info = principle_agent([taskInfo], instruction)  # Call 2\n\n    # Step 2: Generate and validate the solution in a single call\n    solution_instruction = f'Using the principles: {principles_info[1].content}, formulate a step-by-step solution to the problem.'\n    combined_agent = LLMAgentBase(['thinking', 'solution'], 'Combined Solution Agent')  # Call 3\n    solution_info = combined_agent([taskInfo, principles_info[1].content], solution_instruction)  # Call 4\n\n    # Step 3: Validate the solution\n    validation_instruction = f'Validate the solution: {solution_info[1].content} based on the principles: {principles_info[1].content}.'\n    validation_agent = LLMAgentBase(['thinking', 'validated_answer'], 'Validation Agent')  # Call 5\n    validation_response = validation_agent([taskInfo, solution_info[1].content, principles_info[1].content], validation_instruction)  # Call 6\n\n    validated_answer = validation_response[1]  # Extract validated solution Info\n    return validated_answer",
        "fitness": "95% Bootstrap Confidence Interval: (68.8%, 83.6%), Median: 76.6%",
        "generation": 52,
        "api_calls": 6,
        "structure_label": "Abstraction to Principles Reasoning",
        "test_fitness": "95% Bootstrap Confidence Interval: (71.6%, 77.6%), Median: 74.6%"
    },
    {
        "thought": "**Insights:**\nTo enhance the architecture, I propose a structure that utilizes a multi-agent approach where each agent focuses on a distinct aspect of the problem. This can lead to richer reasoning and allow for a more comprehensive solution by synthesizing diverse insights. \n**Overall Idea:**\nThis design will have specialized LLMAgentBase agents responsible for different stages of the task: principle extraction, problem-solving, and validation. Each agent will sequentially process the output of the previous one, resulting in a coherent final answer. \n**Implementation:**\n1. Define separate agents for each step: one for principle extraction, another for solving the problem based on those principles, and a final agent for validating the solution. \n2. Sequentially invoke these agents in a linear manner, ensuring that each output feeds into the next agent's input, allowing for a rich synthesis of reasoning. \n3. Return the validated final answer from the last agent's output.",
        "name": "Multi-Agent Linear Reasoner",
        "code": "def forward(self, taskInfo):\n    # Step 1: Extract principles involved in the problem\n    principle_instruction = \"What principles are involved in solving this math problem? First, think step by step and then list them.\"\n    principle_agent = LLMAgentBase(['thinking', 'principles'], 'Principle Agent')  # Call 1\n    response_principles = principle_agent([taskInfo], principle_instruction)  # Call 2\n    principles = response_principles[1].content  # Extracting the principles output correctly\n    \n    # Step 2: Solve the problem using the principles\n    solving_instruction = f\"Given the principles: {principles}, solve the problem step by step.\"\n    solving_agent = LLMAgentBase(['thinking', 'solution'], 'Solving Agent')  # Call 3\n    response_solution = solving_agent([taskInfo, principles], solving_instruction)  # Call 4\n    solution = response_solution[1].content  # Extracting the solution output correctly\n    \n    # Step 3: Validate the solution\n    validation_instruction = f\"Validate this solution: {solution} based on the principles: {principles}.\"\n    validation_agent = LLMAgentBase(['thinking', 'validated_answer'], 'Validation Agent')  # Call 5\n    response_validation = validation_agent([taskInfo, solution, principles], validation_instruction)  # Call 6\n    validated_solution = response_validation[1].content  # Extracting validated solution correctly\n    \n    return validated_solution",
        "fitness": "95% Bootstrap Confidence Interval: (68.0%, 82.8%), Median: 75.8%",
        "generation": 12,
        "api_calls": 6,
        "structure_label": "Multi-Agent Reasoning",
        "test_fitness": "95% Bootstrap Confidence Interval: (70.4%, 76.5%), Median: 73.5%"
    }
]