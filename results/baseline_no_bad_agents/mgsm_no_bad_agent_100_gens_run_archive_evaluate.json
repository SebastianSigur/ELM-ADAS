[
    {
        "thought": "By encouraging the LLM to think step by step rather than directly outputting an answer, chain-of-thought reasoning enables complex problem-solving through intermediate steps. This practice improves the model's ability to handle tasks that require deeper reasoning and provides insight into its decision-making process.",
        "name": "Chain-of-Thought",
        "code": "def forward(self, taskInfo):\n    # Instruction for the Chain-of-Thought (CoT) approach\n    # It is an important practice that allows the LLM to think step by step before solving the task.\n    cot_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instantiate a new LLM agent specifically for CoT\n    # To allow LLM thinking before answering, we need to set an additional output field 'thinking'.\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Prepare the inputs for the CoT agent\n    # The input should be a list of Info, and the first one is often the taskInfo\n    cot_agent_inputs = [taskInfo]\n\n    # Get the response from the CoT agent\n    thinking, answer = cot_agent(cot_agent_inputs, cot_instruction)\n\n    # Return only the final answer\n    return answer\n",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (14.8%, 28.9%), Median: 21.9%",
        "test_fitness": "95% Bootstrap Confidence Interval: (11.5%, 16.2%), Median: 13.9%"
    },
    {
        "thought": "While an LLM can arrive at the correct answer, its reasoning may vary. By repeatedly asking the same question with high temperature settings, we can generate different reasoning paths. We then combine multiple answers from these Chain-of-Thought (CoT) agents to produce a more accurate final answer through ensembling.",
        "name": "Self-Consistency with Chain-of-Thought",
        "code": "def forward(self, taskInfo):\n    # Instruction for step-by-step reasoning\n    cot_instruction = \"Please think step by step and then solve the task.\"\n    N = 5 # Number of CoT agents\n\n    # Initialize multiple CoT agents with a higher temperature for varied reasoning\n    cot_agents = [LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent', temperature=0.8) for _ in range(N)]\n\n    # Majority voting function to select the most common answer\n    from collections import Counter\n    def majority_voting(answers):\n        return Counter(answers).most_common(1)[0][0]\n    \n    possible_answers = []\n    for i in range(N):\n        thinking, answer = cot_agents[i]([taskInfo], cot_instruction)\n        possible_answers.append(answer.content)\n\n    # Ensembling the answers from multiple CoT agents\n    answer = majority_voting(possible_answers)\n    return answer  \n",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (8.6%, 20.3%), Median: 14.1%",
        "test_fitness": "95% Bootstrap Confidence Interval: (10.6%, 15.2%), Median: 12.9%"
    },
    {
        "thought": "To enhance its performance, an LLM can iteratively improve its answer based on feedback. By reflecting on its previous attempts and incorporating feedback, the model can refine its reasoning and provide a more accurate solution.",
        "name": "Self-Refine (Reflexion)",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    cot_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for reflecting on previous attempts and feedback to improve\n    cot_reflect_instruction = \"Given previous attempts and feedback, carefully consider where you could go wrong in your latest attempt. Using insights from previous attempts, try to solve the task better.\"\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Instruction for providing feedback and correcting the answer\n    critic_instruction = \"Please review the answer above and criticize on where might be wrong. If you are absolutely sure it is correct, output 'True' in 'correct'.\"\n    critic_agent = LLMAgentBase(['feedback', 'correct'], 'Critic Agent')\n    \n    N_max = 5 # Maximum number of attempts\n\n    # Initial attempt\n    cot_inputs = [taskInfo]\n    thinking, answer = cot_agent(cot_inputs, cot_initial_instruction, 0)\n\n    for i in range(N_max):\n        # Get feedback and correct status from the critic\n        feedback, correct = critic_agent([taskInfo, thinking, answer], critic_instruction, i)\n        if correct.content == 'True':\n            break\n            \n        # Add feedback to the inputs for the next iteration\n        cot_inputs.extend([thinking, answer, feedback])\n\n        # Reflect on previous attempts and refine the answer\n        thinking, answer = cot_agent(cot_inputs, cot_reflect_instruction, i + 1)\n    return answer\n",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (13.3%, 26.6%), Median: 19.5%",
        "test_fitness": "95% Bootstrap Confidence Interval: (16.1%, 21.5%), Median: 18.8%"
    },
    {
        "thought": "By letting different LLMs debate with each other, we can leverage their diverse perspectives to find better solutions for tasks.",
        "name": "LLM Debate",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    debate_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for debating and updating the solution based on other agents' solutions\n    debate_instruction = \"Given solutions to the problem from other agents, consider their opinions as additional advice. Please think carefully and provide an updated answer.\"\n    \n    # Initialize debate agents with different roles and a moderate temperature for varied reasoning\n    debate_agents = [LLMAgentBase(['thinking', 'answer'], 'Debate Agent', temperature=0.8, role=role) for role in ['Math Professor', 'Grade School Teacher', 'Math Enthusiast']]\n\n    # Instruction for final decision-making based on all debates and solutions\n    final_decision_instruction = \"Given all the above thinking and answers, reason over them carefully and provide a final answer.\"\n    final_decision_agent = LLMAgentBase(['thinking', 'answer'], 'Final Decision Agent', temperature=0.1)\n\n    max_round = 2 # Maximum number of debate rounds\n    all_thinking = [[] for _ in range(max_round)]\n    all_answer = [[] for _ in range(max_round)]\n\n    # Perform debate rounds\n    for r in range(max_round):\n        for i in range(len(debate_agents)):\n            if r == 0:\n                thinking, answer = debate_agents[i]([taskInfo], debate_initial_instruction)\n            else:\n                input_infos = [taskInfo] + [all_thinking[r-1][i]] + all_thinking[r-1][:i] + all_thinking[r-1][i+1:]\n                thinking, answer = debate_agents[i](input_infos, debate_instruction)\n            all_thinking[r].append(thinking)\n            all_answer[r].append(answer)\n    \n    # Make the final decision based on all debate results and solutions\n    thinking, answer = final_decision_agent([taskInfo] + all_thinking[max_round-1] + all_answer[max_round-1], final_decision_instruction)\n    return answer\n",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (38.3%, 55.5%), Median: 46.9%",
        "test_fitness": "95% Bootstrap Confidence Interval: (45.9%, 52.9%), Median: 49.4%"
    },
    {
        "thought": "Let LLM first think about the principles involved in solving this task which could be helpful. By understanding the underlying principles, the model can better reason through the problem and provide a more accurate solution.",
        "name": "Step-back Abstraction",
        "code": "def forward(self, taskInfo):\n        # Instruction for understanding the principles involved in the task\n        principle_instruction = \"What are the physics, chemistry or biology principles and concepts involved in solving this task? First think step by step. Then list all involved principles and explain them.\"\n        \n        # Instruction for solving the task based on the principles\n        cot_instruction = \"Given the question and the involved principle behind the question, think step by step and then solve the task.\"\n        \n        # Instantiate LLM agents\n        principle_agent = LLMAgentBase(['thinking', 'principle'], 'Principle Agent')\n        cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n        \n        # Get the principles involved in the task\n        thinking, principle = principle_agent([taskInfo], principle_instruction)\n\n        # Use the principles to solve the task\n        thinking, answer = cot_agent([taskInfo, thinking, principle], cot_instruction)\n        return answer\n",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (21.1%, 36.7%), Median: 28.9%",
        "test_fitness": "95% Bootstrap Confidence Interval: (23.9%, 30.0%), Median: 26.9%"
    },
    {
        "thought": "Similar to Quality-Diversity methods, let LLM generate multiple diverse interesting solutions could help. By encouraging the model to explore different reasoning paths, we can increase the chances of finding the best solution.",
        "name": "Quality-Diversity",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    cot_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for giving diverse answers\n    qd_instruction = \"Given previous attempts, try to come up with another interesting way to solve the task.\"\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Instruction for final decision-making based on collected reasoning and answers\n    final_decision_instruction = \"Given all the above solutions, reason over them carefully and provide a final answer.\"\n    final_decision_agent = LLMAgentBase(['thinking', 'answer'], 'Final Decision Agent', temperature=0.1)\n    \n    N_max = 3 # Maximum number of attempts\n\n    # Initial attempt\n    cot_inputs = [taskInfo]\n    possible_answers = []\n    thinking, answer = cot_agent(cot_inputs, cot_initial_instruction, 0)\n\n    # Add the answer to the list of possible answers\n    possible_answers.extend([thinking, answer])\n\n    for i in range(N_max):\n        # Reflect on previous attempts and generate another interesting answer\n        cot_inputs.extend([thinking, answer])\n\n        # Generate another interesting answer\n        thinking, answer = cot_agent(cot_inputs, qd_instruction, i + 1)\n        possible_answers.extend([thinking, answer])\n\n    # Make the final decision based on all generated answers\n    thinking, answer = final_decision_agent([taskInfo] + possible_answers, final_decision_instruction)\n    return answer\n",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (39.1%, 56.2%), Median: 47.7%",
        "test_fitness": "95% Bootstrap Confidence Interval: (52.4%, 59.2%), Median: 55.8%"
    },
    {
        "thought": "Similar to Auto-GPT and expert prompting, we can use dynamic control flow in the design to let the agent decide what expert we should use.",
        "name": "Dynamic Assignment of Roles",
        "code": "def forward(self, taskInfo):\n        # Instruction for step-by-step reasoning\n        cot_instruction = \"Please think step by step and then solve the task.\"\n        expert_agents = [LLMAgentBase(['thinking', 'answer'], 'Expert Agent', role=role) for role in ['Math Professor', 'Grade School Teacher', 'Math Enthusiast', 'Helpful Assistant']]\n\n        # Instruction for routing the task to the appropriate expert\n        routing_instruction = \"Given the task, please choose an Expert to answer the question. Choose from: Math Professor, Grade School Teacher, Math Enthusiast.\"\n        routing_agent = LLMAgentBase(['choice'], 'Routing agent')\n\n        # Get the choice of expert to route the task\n        choice = routing_agent([taskInfo], routing_instruction)[0]\n\n        if 'professor' in choice.content.lower():\n            expert_id = 0\n        elif 'teacher' in choice.content.lower():\n            expert_id = 1\n        elif 'enthusiast' in choice.content.lower():\n            expert_id = 2\n        else:\n            expert_id = 3 # Default to helpful assistant\n\n        thinking, answer = expert_agents[expert_id]([taskInfo], cot_instruction)\n        return answer\n",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (8.6%, 21.1%), Median: 14.8%",
        "test_fitness": "95% Bootstrap Confidence Interval: (10.5%, 15.1%), Median: 12.8%"
    },
    {
        "thought": "**Insights:**\nI propose a `Collaborative Dynamic Reflective Learning Agent`. This architecture will enhance the existing model by focusing on integrating structured argumentation and dynamic feedback mechanisms, emphasizing peer-to-peer learning and real-time adjustments based on contextual insights. This design aims to improve the adaptability and effectiveness of agents in solving multilingual mathematical problems by leveraging multimodal data more effectively. \n**Overall Idea:**\nThe architecture will consist of several stages: (1) **Dynamic Multimodal Contextual Analysis** to capture cultural insights and analyze visual aids, (2) **Interactive Knowledge Retrieval** for integrating relevant mathematical concepts, (3) **Argumentation Agents** that engage in structured dialogues with dynamic peer critiques, (4) **Dynamic Feedback Mechanism** allowing agents to evaluate and adjust strategies based on critiques in real-time, and (5) **Final Consensus Aggregation** to synthesize the best arguments into a coherent solution. This approach fosters continuous learning and adaptability among agents, improving overall effectiveness in multilingual contexts.",
        "name": "Collaborative Dynamic Reflective Learning Agent",
        "code": "def forward(self, taskInfo):\n    # Step 1: Dynamic Multimodal Contextual Analysis\n    context_instruction = \"Analyze the following math problem for cultural insights and any visual aids.\"\n    context_agent = LLMAgentBase([\"context\"], \"Dynamic Context Analysis Agent\")\n    context_response = context_agent([taskInfo], context_instruction)\n\n    # Step 2: Interactive Knowledge Retrieval\n    retrieval_instruction = \"Retrieve relevant mathematical concepts or formulas to assist with the problem, focusing on the context provided.\"\n    retrieval_agent = LLMAgentBase([\"knowledge\"], \"Knowledge Retrieval Agent\")\n    knowledge_infos = retrieval_agent([taskInfo] + context_response, retrieval_instruction)\n\n    # Step 3: Initialize Specialized Argumentation Agents\n    argumentation_agent = LLMAgentBase([\"thinking\", \"argument\"], \"Argumentation Agent\")\n    critique_agent = LLMAgentBase([\"thinking\", \"critique\"], \"Critique Agent\")\n    consensus_agent = LLMAgentBase([\"thinking\", \"final_answer\"], \"Consensus Agent\")\n\n    # Step 4: Obtain initial arguments from the argumentation agent\n    arguments_info = argumentation_agent([taskInfo] + knowledge_infos + context_response, \"Present your argument for solving this problem.\")\n\n    # Step 5: Collect Feedback from Critique Agent\n    critiques_info = critique_agent([taskInfo] + arguments_info, \"Critique the arguments provided and suggest improvements.\")\n\n    # Step 6: Use Feedback for Refinement\n    refined_arguments_info = argumentation_agent([taskInfo] + [info.content for info in critiques_info if info.content], \"Refine your argument based on critiques.\")\n\n    # Step 7: Final Consensus Aggregation\n    aggregation_instruction = \"Based on the arguments presented and critiques, provide a final consensus answer.\"\n    final_thinking, final_answer_info = consensus_agent([taskInfo] + refined_arguments_info, aggregation_instruction)\n\n    return final_answer_info",
        "fitness": "95% Bootstrap Confidence Interval: (64.8%, 80.5%), Median: 72.7%",
        "generation": 100,
        "test_fitness": "95% Bootstrap Confidence Interval: (64.2%, 70.8%), Median: 67.5%"
    },
    {
        "thought": "**Insights:**\nTo further innovate beyond the collaborative debate concept, I propose an architecture named the 'Cumulative Knowledge Integration Agent'. This architecture focuses on not just debating but building a cumulative understanding by integrating knowledge from various steps of reasoning, allowing the agent to refine its answer iteratively. The architecture will consist of multiple reasoning cycles where each cycle enhances the solution based on previous insights and critiques, ensuring a more holistic understanding of the problem.\n\n**Overall Idea:**\nThe architecture will break down the problem-solving into iterative loops where each iteration involves generating a solution, critiquing it, and integrating feedback for improvement. This process mimics knowledge accumulation in real-world learning, enabling the agent to arrive at a more accurate final answer through gradual refinement.",
        "name": "Cumulative Knowledge Integration Agent",
        "code": "def forward(self, taskInfo):\n    # Instruction for generating the initial solution\n    initial_instruction = \"Please think step by step and generate a solution to the task.\"\n    initial_agent = LLMAgentBase(['thinking', 'answer'], 'Initial Solution Agent')\n\n    # Generate the initial answer\n    initial_thinking, initial_answer = initial_agent([taskInfo], initial_instruction)\n\n    # Instruction for critique\n    critique_instruction = \"Please evaluate the provided solution and give constructive feedback.\"\n    critique_agent = LLMAgentBase(['thinking', 'feedback'], 'Critique Agent')\n\n    N_iterations = 3  # Number of iterations for refining the answer\n    for _ in range(N_iterations):\n        # Critique the previous answer\n        critique_thinking, critique_feedback = critique_agent([taskInfo, initial_answer], critique_instruction)\n        \n        # Instruction to revise the answer based on feedback\n        revision_instruction = \"Using the feedback provided, revise your solution step by step.\"\n        revise_agent = LLMAgentBase(['thinking', 'revised_answer'], 'Revision Agent')\n        revision_thinking, revised_answer = revise_agent([taskInfo, critique_feedback], revision_instruction)\n        \n        # Update the answer for the next iteration, using Info object\n        initial_answer = revised_answer  # Ensure to keep this as an Info object\n\n    return initial_answer",
        "fitness": "95% Bootstrap Confidence Interval: (60.2%, 75.8%), Median: 68.0%",
        "generation": 2,
        "test_fitness": "95% Bootstrap Confidence Interval: (68.6%, 74.9%), Median: 71.8%"
    },
    {
        "thought": "**Insights:**\nI propose a `Collaborative Contextual Learning Agent`. This architecture will focus on leveraging contextual information and structured argumentation, emphasizing a collaborative environment where agents can dynamically adapt their reasoning based on peer feedback and self-reflection. This design aims to provide a more nuanced problem-solving approach that integrates both textual and potential visual data while optimizing the feedback mechanism.\n\n**Overall Idea:**\nThis architecture will consist of several stages: (1) **Contextual Analysis** to capture cultural insights and any visual aids, (2) **Knowledge Retrieval** for relevant mathematical concepts, (3) **Interactive Argumentation Agents** that engage in real-time structured dialogues, (4) **Dynamic Feedback Mechanism** that assesses the relevance and quality of critiques, and (5) **Final Consensus Aggregation** to synthesize the strongest arguments into a coherent solution.",
        "name": "Collaborative Contextual Learning Agent",
        "code": "def forward(self, taskInfo):\n    # Step 1: Contextual Analysis\n    context_instruction = \"Analyze the following math problem for cultural insights and any visual aids.\"\n    context_agent = LLMAgentBase(['context'], 'Context Analysis Agent')\n    context_response = context_agent([taskInfo], context_instruction)\n\n    # Step 2: Knowledge Retrieval\n    retrieval_instruction = \"Retrieve relevant mathematical concepts or formulas to assist with the problem, focusing on the context provided.\"\n    retrieval_agent = LLMAgentBase(['knowledge'], 'Knowledge Retrieval Agent')\n    knowledge_infos = retrieval_agent([taskInfo] + context_response, retrieval_instruction)\n\n    # Step 3: Initialize Specialized Argumentation Agents\n    argumentation_agent = LLMAgentBase(['thinking', 'argument'], 'Argumentation Agent')\n    critique_agent = LLMAgentBase(['thinking', 'critique'], 'Critique Agent')\n    consensus_agent = LLMAgentBase(['thinking', 'final_answer'], 'Consensus Agent')\n\n    # Step 4: Obtain initial arguments from the argumentation agent\n    arguments_info = argumentation_agent([taskInfo] + knowledge_infos + context_response, \"Present your argument for solving this problem.\")\n\n    # Step 5: Collect Feedback from Critique Agent\n    critiques_info = critique_agent([taskInfo] + arguments_info, \"Critique the arguments provided and suggest improvements.\")\n\n    # Step 6: Use Feedback for Refinement\n    # Use valid critiques to refine arguments, ensuring proper handling of Info objects\n    if critiques_info:\n        refined_arguments_info = argumentation_agent([taskInfo] + [info.content for info in critiques_info if info.content], \"Refine your argument based on critiques.\")\n    else:\n        refined_arguments_info = arguments_info  # Keep original arguments if no critiques\n\n    # Step 7: Final Consensus Aggregation\n    aggregation_instruction = \"Based on the arguments presented and critiques, provide a final consensus answer.\"\n    final_thinking, final_answer_info = consensus_agent([taskInfo] + refined_arguments_info, aggregation_instruction)\n\n    return final_answer_info",
        "fitness": "95% Bootstrap Confidence Interval: (59.4%, 75.8%), Median: 68.0%",
        "generation": 80,
        "test_fitness": "95% Bootstrap Confidence Interval: (60.4%, 67.0%), Median: 63.7%"
    },
    {
        "thought": "**Insights:**\nI propose a `Dynamic Reflective Multimodal Argumentation Agent`. This architecture will enhance the collaborative nature of argumentation while integrating structured reflection and dynamic feedback among specialized agents. By focusing on real-time dialogues and the integration of multimodal inputs, this design aims to foster a collaborative environment where agents can not only critique each other but also reflect on their reasoning processes, leading to improved adaptability and effectiveness in problem-solving, particularly in multilingual contexts.\n**Overall Idea:**\nThe architecture will consist of several stages: (1) **Dynamic Multimodal Contextual Analysis** to capture cultural insights and analyze visual aids, (2) **Interactive Knowledge Retrieval** for integrating relevant mathematical concepts, (3) **Argumentation Agents** that engage in structured dialogues with dynamic peer critiques, (4) **Dynamic Feedback Mechanism** allowing agents to evaluate and adjust strategies based on feedback, and (5) **Final Consensus Aggregation** to synthesize the best arguments into a coherent solution.",
        "name": "Dynamic Reflective Multimodal Argumentation Agent",
        "code": "def forward(self, taskInfo):\n    # Step 1: Dynamic Multimodal Contextual Analysis\n    context_instruction = \"Analyze the following math problem for cultural insights and any visual aids.\"\n    context_agent = LLMAgentBase(['context'], 'Dynamic Context Analysis Agent')\n    context_response = context_agent([taskInfo], context_instruction)\n\n    # Step 2: Interactive Knowledge Retrieval\n    retrieval_instruction = \"Retrieve relevant mathematical concepts or formulas to assist with the problem, focusing on the context provided.\"\n    retrieval_agent = LLMAgentBase(['knowledge'], 'Knowledge Retrieval Agent')\n    knowledge_infos = retrieval_agent([taskInfo] + context_response, retrieval_instruction)\n\n    # Step 3: Initialize Specialized Argumentation Agents\n    argumentation_agent = LLMAgentBase(['thinking', 'argument'], 'Argumentation Agent')\n    critique_agent = LLMAgentBase(['thinking', 'critique'], 'Critique Agent')\n    consensus_agent = LLMAgentBase(['thinking', 'final_answer'], 'Consensus Agent')\n\n    # Step 4: Obtain initial arguments from the argumentation agent\n    arguments_info = argumentation_agent([taskInfo] + knowledge_infos + context_response, \"Present your argument for solving this problem.\")\n\n    # Step 5: Collect Feedback from Critique Agent\n    critiques_info = critique_agent([taskInfo] + arguments_info, \"Critique the arguments provided and suggest improvements.\")\n\n    # Step 6: Use Feedback for Refinement\n    refined_arguments_info = argumentation_agent([taskInfo] + critiques_info, \"Refine your argument based on critiques.\")\n\n    # Step 7: Final Consensus Aggregation\n    aggregation_instruction = \"Based on the arguments presented and critiques, provide a final consensus answer.\"\n    final_thinking, final_answer_info = consensus_agent([taskInfo] + refined_arguments_info, aggregation_instruction)\n\n    return final_answer_info",
        "fitness": "95% Bootstrap Confidence Interval: (58.6%, 75.0%), Median: 67.2%",
        "generation": 94,
        "test_fitness": "95% Bootstrap Confidence Interval: (56.4%, 63.1%), Median: 59.8%"
    },
    {
        "thought": "**Insights:**\nI propose a `Collaborative Multimodal Reflective Argumentation Agent`. This architecture will enhance the collaborative nature of argumentation while integrating structured reflection and dynamic feedback among specialized agents. By focusing on real-time dialogues and the integration of multimodal inputs, this design aims to foster a collaborative environment where agents can not only critique each other but also reflect on their reasoning processes, leading to improved adaptability and effectiveness in problem-solving, particularly in multilingual contexts.\n**Overall Idea:**\nThis architecture will consist of several stages: (1) **Dynamic Multimodal Contextual Analysis** to capture cultural insights and analyze visual aids, (2) **Interactive Knowledge Retrieval** for integrating relevant mathematical concepts, (3) **Argumentation Agents** that engage in structured dialogues with dynamic peer critiques, (4) **Dynamic Feedback Mechanism** allowing agents to evaluate and adjust strategies based on feedback, and (5) **Final Consensus Aggregation** to synthesize the best arguments into a coherent solution.",
        "name": "Collaborative Multimodal Reflective Argumentation Agent",
        "code": "def forward(self, taskInfo):\n    # Step 1: Dynamic Multimodal Contextual Analysis\n    context_instruction = \"Analyze the following math problem for cultural insights and any visual aids.\"\n    context_agent = LLMAgentBase([\"context\"], \"Dynamic Context Analysis Agent\")\n    context_response = context_agent([taskInfo], context_instruction)\n\n    # Step 2: Interactive Knowledge Retrieval\n    retrieval_instruction = \"Retrieve relevant mathematical concepts or formulas to assist with the problem, focusing on the context provided.\"\n    retrieval_agent = LLMAgentBase([\"knowledge\"], \"Knowledge Retrieval Agent\")\n    knowledge_infos = retrieval_agent([taskInfo] + context_response, retrieval_instruction)\n\n    # Step 3: Initialize Specialized Argumentation Agents\n    argumentation_agent = LLMAgentBase([\"thinking\", \"argument\"], \"Argumentation Agent\")\n    critique_agent = LLMAgentBase([\"thinking\", \"critique\"], \"Critique Agent\")\n    consensus_agent = LLMAgentBase([\"thinking\", \"final_answer\"], \"Consensus Agent\")\n\n    # Step 4: Obtain initial arguments from the argumentation agent\n    arguments_info = argumentation_agent([taskInfo] + knowledge_infos + context_response, \"Present your argument for solving this problem.\")\n\n    # Step 5: Collect Feedback from Critique Agent\n    critiques_info = critique_agent([taskInfo] + arguments_info, \"Critique the arguments provided and suggest improvements.\")\n\n    # Step 6: Use Feedback for Refinement\n    refined_arguments_info = arguments_info  # Default to original arguments\n    if critiques_info:\n        refined_arguments_info = argumentation_agent([taskInfo] + critiques_info, \"Refine your argument based on critiques.\")\n\n    # Step 7: Final Consensus Aggregation\n    aggregation_instruction = \"Based on the arguments presented and critiques, provide a final consensus answer.\"\n    final_thinking, final_answer_info = consensus_agent([taskInfo] + refined_arguments_info, aggregation_instruction)\n\n    return final_answer_info",
        "fitness": "95% Bootstrap Confidence Interval: (58.6%, 75.0%), Median: 67.2%",
        "generation": 95,
        "test_fitness": "95% Bootstrap Confidence Interval: (56.2%, 63.0%), Median: 59.6%"
    }
]