[
    {
        "thought": "By encouraging the LLM to think step by step rather than directly outputting an answer, chain-of-thought reasoning enables complex problem-solving through intermediate steps. This practice improves the model's ability to handle tasks that require deeper reasoning and provides insight into its decision-making process.",
        "name": "Chain-of-Thought",
        "code": "def forward(self, taskInfo):\n    # Instruction for the Chain-of-Thought (CoT) approach\n    # It is an important practice that allows the LLM to think step by step before solving the task.\n    cot_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instantiate a new LLM agent specifically for CoT\n    # To allow LLM thinking before answering, we need to set an additional output field 'thinking'.\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Prepare the inputs for the CoT agent\n    # The input should be a list of Info, and the first one is often the taskInfo\n    cot_agent_inputs = [taskInfo]\n\n    # Get the response from the CoT agent\n    thinking, answer = cot_agent(cot_agent_inputs, cot_instruction)\n\n    # Return only the final answer\n    return answer\n",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (7.0%, 18.8%), Median: 12.5%",
        "test_fitness": "95% Bootstrap Confidence Interval: (12.8%, 17.8%), Median: 15.2%"
    },
    {
        "thought": "While an LLM can arrive at the correct answer, its reasoning may vary. By repeatedly asking the same question with high temperature settings, we can generate different reasoning paths. We then combine multiple answers from these Chain-of-Thought (CoT) agents to produce a more accurate final answer through ensembling.",
        "name": "Self-Consistency with Chain-of-Thought",
        "code": "def forward(self, taskInfo):\n    # Instruction for step-by-step reasoning\n    cot_instruction = \"Please think step by step and then solve the task.\"\n    N = 5 # Number of CoT agents\n\n    # Initialize multiple CoT agents with a higher temperature for varied reasoning\n    cot_agents = [LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent', temperature=0.8) for _ in range(N)]\n\n    # Majority voting function to select the most common answer\n    from collections import Counter\n    def majority_voting(answers):\n        return Counter(answers).most_common(1)[0][0]\n    \n    possible_answers = []\n    for i in range(N):\n        thinking, answer = cot_agents[i]([taskInfo], cot_instruction)\n        possible_answers.append(answer.content)\n\n    # Ensembling the answers from multiple CoT agents\n    answer = majority_voting(possible_answers)\n    return answer  \n",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (10.9%, 24.2%), Median: 17.2%",
        "test_fitness": "95% Bootstrap Confidence Interval: (11.5%, 16.4%), Median: 13.9%"
    },
    {
        "thought": "To enhance its performance, an LLM can iteratively improve its answer based on feedback. By reflecting on its previous attempts and incorporating feedback, the model can refine its reasoning and provide a more accurate solution.",
        "name": "Self-Refine (Reflexion)",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    cot_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for reflecting on previous attempts and feedback to improve\n    cot_reflect_instruction = \"Given previous attempts and feedback, carefully consider where you could go wrong in your latest attempt. Using insights from previous attempts, try to solve the task better.\"\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Instruction for providing feedback and correcting the answer\n    critic_instruction = \"Please review the answer above and criticize on where might be wrong. If you are absolutely sure it is correct, output 'True' in 'correct'.\"\n    critic_agent = LLMAgentBase(['feedback', 'correct'], 'Critic Agent')\n    \n    N_max = 5 # Maximum number of attempts\n\n    # Initial attempt\n    cot_inputs = [taskInfo]\n    thinking, answer = cot_agent(cot_inputs, cot_initial_instruction, 0)\n\n    for i in range(N_max):\n        # Get feedback and correct status from the critic\n        feedback, correct = critic_agent([taskInfo, thinking, answer], critic_instruction, i)\n        if correct.content == 'True':\n            break\n            \n        # Add feedback to the inputs for the next iteration\n        cot_inputs.extend([thinking, answer, feedback])\n\n        # Reflect on previous attempts and refine the answer\n        thinking, answer = cot_agent(cot_inputs, cot_reflect_instruction, i + 1)\n    return answer\n",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (8.6%, 20.3%), Median: 14.1%",
        "test_fitness": "95% Bootstrap Confidence Interval: (17.1%, 22.8%), Median: 19.9%"
    },
    {
        "thought": "By letting different LLMs debate with each other, we can leverage their diverse perspectives to find better solutions for tasks.",
        "name": "LLM Debate",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    debate_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for debating and updating the solution based on other agents' solutions\n    debate_instruction = \"Given solutions to the problem from other agents, consider their opinions as additional advice. Please think carefully and provide an updated answer.\"\n    \n    # Initialize debate agents with different roles and a moderate temperature for varied reasoning\n    debate_agents = [LLMAgentBase(['thinking', 'answer'], 'Debate Agent', temperature=0.8, role=role) for role in ['Math Professor', 'Grade School Teacher', 'Math Enthusiast']]\n\n    # Instruction for final decision-making based on all debates and solutions\n    final_decision_instruction = \"Given all the above thinking and answers, reason over them carefully and provide a final answer.\"\n    final_decision_agent = LLMAgentBase(['thinking', 'answer'], 'Final Decision Agent', temperature=0.1)\n\n    max_round = 2 # Maximum number of debate rounds\n    all_thinking = [[] for _ in range(max_round)]\n    all_answer = [[] for _ in range(max_round)]\n\n    # Perform debate rounds\n    for r in range(max_round):\n        for i in range(len(debate_agents)):\n            if r == 0:\n                thinking, answer = debate_agents[i]([taskInfo], debate_initial_instruction)\n            else:\n                input_infos = [taskInfo] + [all_thinking[r-1][i]] + all_thinking[r-1][:i] + all_thinking[r-1][i+1:]\n                thinking, answer = debate_agents[i](input_infos, debate_instruction)\n            all_thinking[r].append(thinking)\n            all_answer[r].append(answer)\n    \n    # Make the final decision based on all debate results and solutions\n    thinking, answer = final_decision_agent([taskInfo] + all_thinking[max_round-1] + all_answer[max_round-1], final_decision_instruction)\n    return answer\n",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (41.4%, 58.6%), Median: 50.0%",
        "test_fitness": "95% Bootstrap Confidence Interval: (44.4%, 51.4%), Median: 47.9%"
    },
    {
        "thought": "Let LLM first think about the principles involved in solving this task which could be helpful. By understanding the underlying principles, the model can better reason through the problem and provide a more accurate solution.",
        "name": "Step-back Abstraction",
        "code": "def forward(self, taskInfo):\n        # Instruction for understanding the principles involved in the task\n        principle_instruction = \"What are the physics, chemistry or biology principles and concepts involved in solving this task? First think step by step. Then list all involved principles and explain them.\"\n        \n        # Instruction for solving the task based on the principles\n        cot_instruction = \"Given the question and the involved principle behind the question, think step by step and then solve the task.\"\n        \n        # Instantiate LLM agents\n        principle_agent = LLMAgentBase(['thinking', 'principle'], 'Principle Agent')\n        cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n        \n        # Get the principles involved in the task\n        thinking, principle = principle_agent([taskInfo], principle_instruction)\n\n        # Use the principles to solve the task\n        thinking, answer = cot_agent([taskInfo, thinking, principle], cot_instruction)\n        return answer\n",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (14.8%, 29.7%), Median: 21.9%",
        "test_fitness": "95% Bootstrap Confidence Interval: (22.5%, 28.6%), Median: 25.5%"
    },
    {
        "thought": "Similar to Quality-Diversity methods, let LLM generate multiple diverse interesting solutions could help. By encouraging the model to explore different reasoning paths, we can increase the chances of finding the best solution.",
        "name": "Quality-Diversity",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    cot_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for giving diverse answers\n    qd_instruction = \"Given previous attempts, try to come up with another interesting way to solve the task.\"\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Instruction for final decision-making based on collected reasoning and answers\n    final_decision_instruction = \"Given all the above solutions, reason over them carefully and provide a final answer.\"\n    final_decision_agent = LLMAgentBase(['thinking', 'answer'], 'Final Decision Agent', temperature=0.1)\n    \n    N_max = 3 # Maximum number of attempts\n\n    # Initial attempt\n    cot_inputs = [taskInfo]\n    possible_answers = []\n    thinking, answer = cot_agent(cot_inputs, cot_initial_instruction, 0)\n\n    # Add the answer to the list of possible answers\n    possible_answers.extend([thinking, answer])\n\n    for i in range(N_max):\n        # Reflect on previous attempts and generate another interesting answer\n        cot_inputs.extend([thinking, answer])\n\n        # Generate another interesting answer\n        thinking, answer = cot_agent(cot_inputs, qd_instruction, i + 1)\n        possible_answers.extend([thinking, answer])\n\n    # Make the final decision based on all generated answers\n    thinking, answer = final_decision_agent([taskInfo] + possible_answers, final_decision_instruction)\n    return answer\n",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (46.1%, 63.3%), Median: 54.7%",
        "test_fitness": "95% Bootstrap Confidence Interval: (50.9%, 57.9%), Median: 54.4%"
    },
    {
        "thought": "Similar to Auto-GPT and expert prompting, we can use dynamic control flow in the design to let the agent decide what expert we should use.",
        "name": "Dynamic Assignment of Roles",
        "code": "def forward(self, taskInfo):\n        # Instruction for step-by-step reasoning\n        cot_instruction = \"Please think step by step and then solve the task.\"\n        expert_agents = [LLMAgentBase(['thinking', 'answer'], 'Expert Agent', role=role) for role in ['Math Professor', 'Grade School Teacher', 'Math Enthusiast', 'Helpful Assistant']]\n\n        # Instruction for routing the task to the appropriate expert\n        routing_instruction = \"Given the task, please choose an Expert to answer the question. Choose from: Math Professor, Grade School Teacher, Math Enthusiast.\"\n        routing_agent = LLMAgentBase(['choice'], 'Routing agent')\n\n        # Get the choice of expert to route the task\n        choice = routing_agent([taskInfo], routing_instruction)[0]\n\n        if 'professor' in choice.content.lower():\n            expert_id = 0\n        elif 'teacher' in choice.content.lower():\n            expert_id = 1\n        elif 'enthusiast' in choice.content.lower():\n            expert_id = 2\n        else:\n            expert_id = 3 # Default to helpful assistant\n\n        thinking, answer = expert_agents[expert_id]([taskInfo], cot_instruction)\n        return answer\n",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (7.0%, 18.8%), Median: 12.5%",
        "test_fitness": "95% Bootstrap Confidence Interval: (11.6%, 16.5%), Median: 14.0%"
    },
    {
        "thought": "**Insights:**\nTo enhance the learning process and ensure a more structured critique and synthesis, I propose an architecture where agents not only engage in discussions but also formally rate the explanations provided by their peers. This helps in identifying strong arguments and areas needing improvement, leading to a more informed final answer. The architecture will implement a structured feedback mechanism where agents can assess the clarity and logic of the explanations given by peers and refine their own responses accordingly.\n\n**Overall Idea:**\nEach agent will generate initial answers independently, then engage in a critique phase where they rate each other\u2019s answers. After ratings and feedback are provided, agents will revise their answers based on this structured critique before reaching a final consensus through a majority voting mechanism that considers the quality of the contributions.",
        "name": "Structured Critique Agent",
        "code": "def forward(self, taskInfo):\n    # Step 1: Instruction for initial reasoning\n    initial_instruction = 'Please think step by step and solve the task.'\n    # Step 2: Instantiate multiple agents\n    agents = [LLMAgentBase(['thinking', 'answer'], f'Agent {role}') for role in ['Math Expert', 'Math Teacher', 'Math Student']]\n\n    # Step 3: Collect initial responses from each agent\n    initial_answers = []\n    for agent in agents:\n        answer_info = agent([taskInfo], initial_instruction)\n        initial_answers.append(answer_info)\n\n    # Step 4: Critique phase - agents rate each other\u2019s answers\n    critiques = []\n    for i, agent in enumerate(agents):\n        peer_agents = agents[:i] + agents[i+1:]  # All other agents as peers\n        critique_instruction = 'Rate the answers provided by your peers on a scale of 1 to 5.'\n        ratings_info = agent([taskInfo] + initial_answers, critique_instruction)\n        critiques.append(ratings_info[0])  # Assuming ratings are returned in a structured way\n\n    # Step 5: Each agent provides feedback on the ratings\n    feedbacks = []\n    for i, agent in enumerate(agents):\n        feedback_instruction = 'Provide constructive feedback based on the ratings you received.'\n        feedback_info = agent([taskInfo] + critiques, feedback_instruction)\n        feedbacks.append(feedback_info)\n\n    # Step 6: Each agent refines its answer based on feedback\n    refined_answers = []\n    for agent, feedback in zip(agents, feedbacks):\n        refinement_instruction = 'Using your peers\u2019 feedback, revise your answer if needed.'\n        refined_thinking, refined_answer = agent([taskInfo] + feedback, refinement_instruction)\n        refined_answers.append(refined_answer)\n\n    # Step 7: Aggregate answers based on quality of contributions\n    from collections import Counter\n    final_answer_contents = [answer.content for answer in refined_answers]  # Extract contents for aggregation\n    final_answer_content = Counter(final_answer_contents).most_common(1)[0][0]  # Majority voting method\n    return Info('final_answer', 'Structured Critique Agent', final_answer_content, -1)",
        "fitness": "95% Bootstrap Confidence Interval: (41.4%, 58.6%), Median: 50.0%",
        "generation": 17,
        "test_fitness": "95% Bootstrap Confidence Interval: (48.1%, 55.1%), Median: 51.6%"
    },
    {
        "thought": "**Insights:**\nThe architecture can be improved by clearly structuring the feedback process, ensuring that agents directly use feedback in their refining stages, and implementing a weighted voting mechanism to aggregate answers from various agents effectively. This new approach will focus on synthesizing insights while maintaining a clear and efficient refinement cycle, leading to better performance.\n\n**Overall Idea:**\nThis architecture will involve multiple agents generating initial answers and providing feedback in a structured way. The feedback will be synthesized into actionable insights that agents can use to refine their responses. A weighted voting mechanism will be implemented to ensure that the final answer reflects the expertise of contributing agents.\n\n**Implementation:**\n1. Agents generate initial answers based on the task.\n2. Collect feedback from each agent about the strengths and weaknesses of each other's responses.\n3. Agents synthesize feedback to refine their answers, focusing on key critiques.\n4. Use a weighted voting mechanism for the final answer aggregation based on the expertise level of each agent.",
        "name": "Feedback-Driven Synthesis Agent",
        "code": "def forward(self, taskInfo):\n    # Step 1: Instruction for initial reasoning\n    initial_instruction = \"Please think step by step and solve the task.\"\n    # Instantiate multiple agents with different roles\n    agents = [LLMAgentBase(['thinking', 'answer'], f'Agent {role}') for role in ['Math Professor', 'Grade School Teacher', 'Math Enthusiast']]\n\n    # Step 2: Collect initial responses from each agent\n    initial_answers = []\n    for agent in agents:\n        answer_info = agent([taskInfo], initial_instruction)\n        initial_answers.append(answer_info)\n\n    # Step 3: Enable agents to critique each other\u2019s answers collectively\n    critique_instruction = \"Please review the answers and provide constructive feedback.\"\n    feedbacks = []\n    for agent in agents:\n        feedback_info = agent([taskInfo] + initial_answers, critique_instruction)\n        feedbacks.append(feedback_info)\n\n    # Step 4: Each agent refines its answer based on synthesized feedback\n    refined_answers = []\n    for agent, feedback in zip(agents, feedbacks):\n        refined_thinking, refined_answer = agent([taskInfo] + feedback, initial_instruction)\n        refined_answers.append(refined_answer)\n\n    # Step 5: Weighted voting to determine the final answer\n    from collections import Counter\n    answer_weights = [3, 2, 1]  # Assign weights based on agent roles\n    weighted_answers = [(answer.content, weight) for answer, weight in zip(refined_answers, answer_weights)]\n    final_answer_content = Counter([content for content, weight in weighted_answers]).most_common(1)[0][0]\n    return Info('final_answer', 'Feedback-Driven Synthesis Agent', final_answer_content, -1)",
        "fitness": "95% Bootstrap Confidence Interval: (35.2%, 52.3%), Median: 43.8%",
        "generation": 5,
        "test_fitness": "95% Bootstrap Confidence Interval: (40.6%, 47.6%), Median: 44.1%"
    },
    {
        "thought": "**Insights:**\nThe architecture could benefit from a more dynamic approach to feedback and collaboration among agents, emphasizing not just critique but also synthesis of knowledge from diverse perspectives. This could facilitate a more comprehensive problem-solving strategy that leverages the strengths of each agent's expertise.\n\n**Overall Idea:**\nThe revised architecture will incorporate a feedback synthesis mechanism where agents not only critique each other's responses but also collaborate to generate a collective understanding of the problem. This collaborative synthesis phase will enable agents to refine their answers based on a broader context derived from their peers' insights, leading to a more robust solution.\n\n**Implementation:**\n1. Each agent generates an initial answer based on the task. \n2. All agents critique each other's responses in a collective feedback stage, emphasizing strengths and suggestions for improvement. \n3. Instead of just collecting feedback, agents collaboratively discuss and synthesize their critiques to refine their answers. \n4. The final answers are determined through a majority voting mechanism after the synthesis phase.",
        "name": "Collaborative Synthesis Learning Agent",
        "code": "def forward(self, taskInfo):\n    # Step 1: Instruction for initial reasoning\n    initial_instruction = \"Please think step by step and solve the task.\"\n    # Instantiate multiple agents with different roles\n    agents = [LLMAgentBase(['thinking', 'answer'], f'Agent {role}') for role in ['Math Professor', 'Grade School Teacher', 'Math Enthusiast']]\n\n    # Step 2: Collect initial responses from each agent\n    initial_answers = []\n    for agent in agents:\n        thinking, answer = agent([taskInfo], initial_instruction)\n        initial_answers.append(answer)\n\n    # Step 3: Enable agents to critique each other\u2019s answers collectively\n    critique_instruction = \"Please review the answers and provide constructive feedback.\"\n    collective_feedback = []\n    for agent in agents:\n        feedbacks = agent([taskInfo] + initial_answers, critique_instruction)\n        collective_feedback.append(feedbacks)\n\n    # Step 4: Each agent refines its answer based on synthesized feedback\n    refined_answers = []\n    for i, agent in enumerate(agents):\n        feedback_contents = [feedback for feedback in collective_feedback[i]]  # Keep structure intact\n        refined_thinking, refined_answer = agent([taskInfo] + feedback_contents, initial_instruction)\n        refined_answers.append(refined_answer)\n\n    # Step 5: Majority voting to determine the final answer\n    from collections import Counter\n    final_answer_contents = [answer.content for answer in refined_answers]\n    final_answer_content = Counter(final_answer_contents).most_common(1)[0][0]\n    # Return the final answer in expected format\n    return Info('final_answer', 'Collaborative Synthesis Learning Agent', final_answer_content, -1)",
        "fitness": "95% Bootstrap Confidence Interval: (25.0%, 41.4%), Median: 32.8%",
        "generation": 4,
        "test_fitness": "95% Bootstrap Confidence Interval: (33.6%, 40.4%), Median: 37.0%"
    },
    {
        "thought": "**Insights:**\nTo enhance the collaborative reasoning process, I propose an architecture that emphasizes structured dialogues among agents during the teaching phase. Each agent will not only provide answers but will also engage in a back-and-forth discussion about their reasoning, allowing for richer exchanges. This revised architecture will focus on active engagement, where agents ask targeted questions to clarify reasoning and deepen understanding.\n\n**Overall Idea:**\nIn this architecture, after generating their initial answers, agents will engage in a structured discussion where they can clarify, question, and critique each other's answers. This interaction aims to help each agent refine its understanding and response before arriving at a consensus. By fostering an environment of inquiry and exploration, this method aims to enhance overall performance.",
        "name": "Structured Dialogue Agent",
        "code": "def forward(self, taskInfo):\n    # Step 1: Instruction for initial reasoning\n    initial_instruction = 'Please think step by step and solve the task.'\n    # Step 2: Instantiate agents\n    agents = [LLMAgentBase(['thinking', 'answer'], f'Agent {role}') for role in ['Math Expert', 'Math Teacher', 'Math Student']]\n\n    # Step 3: Collect initial responses from each agent\n    initial_answers = []\n    for agent in agents:\n        answer_info = agent([taskInfo], initial_instruction)\n        initial_answers.append(answer_info)\n\n    # Step 4: Structured dialogue phase - agents engage in discussions\n    dialogue_outputs = []\n    for i, agent in enumerate(agents):\n        dialogue_instruction = 'Discuss your reasoning with another agent, asking questions and clarifying points.'\n        peer_agent = agents[(i + 1) % len(agents)]  # Pairwise discussion with next agent\n        dialogue_info = agent([taskInfo, initial_answers[i], peer_agent], dialogue_instruction)\n        dialogue_outputs.append(dialogue_info)\n\n    # Step 5: Each agent refines its answer based on the dialogue insights\n    refined_answers = []\n    for i, agent in enumerate(agents):\n        refine_instruction = 'Based on the discussion, revise your answer if needed.'\n        refined_thinking, refined_answer = agent([taskInfo] + dialogue_outputs, refine_instruction)\n        refined_answers.append(refined_answer)\n\n    # Step 6: Aggregate answers based on quality of dialogues\n    from collections import Counter\n    final_answer_contents = [answer.content for answer in refined_answers]\n    final_answer_content = Counter(final_answer_contents).most_common(1)[0][0]\n    return Info('final_answer', 'Structured Dialogue Agent', final_answer_content, -1)",
        "fitness": "95% Bootstrap Confidence Interval: (15.6%, 30.5%), Median: 22.7%",
        "generation": 15,
        "test_fitness": "95% Bootstrap Confidence Interval: (20.4%, 26.2%), Median: 23.2%"
    },
    {
        "thought": "By encouraging the LLM to think step by step rather than directly outputting an answer, chain-of-thought reasoning enables complex problem-solving through intermediate steps. This practice improves the model's ability to handle tasks that require deeper reasoning and provides insight into its decision-making process.",
        "name": "Chain-of-Thought",
        "code": "def forward(self, taskInfo):\n    # Instruction for the Chain-of-Thought (CoT) approach\n    # It is an important practice that allows the LLM to think step by step before solving the task.\n    cot_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instantiate a new LLM agent specifically for CoT\n    # To allow LLM thinking before answering, we need to set an additional output field 'thinking'.\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Prepare the inputs for the CoT agent\n    # The input should be a list of Info, and the first one is often the taskInfo\n    cot_agent_inputs = [taskInfo]\n\n    # Get the response from the CoT agent\n    thinking, answer = cot_agent(cot_agent_inputs, cot_instruction)\n\n    # Return only the final answer\n    return answer\n",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (7.0%, 18.8%), Median: 12.5%",
        "test_fitness": "95% Bootstrap Confidence Interval: (12.5%, 17.4%), Median: 14.9%"
    }
]