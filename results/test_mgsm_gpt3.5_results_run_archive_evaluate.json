[
    {
        "thought": "By encouraging the LLM to think step by step rather than directly outputting an answer, chain-of-thought reasoning enables complex problem-solving through intermediate steps. This practice improves the model's ability to handle tasks that require deeper reasoning and provides insight into its decision-making process.",
        "name": "Chain-of-Thought",
        "code": "def forward(self, taskInfo):\n    # Instruction for the Chain-of-Thought (CoT) approach\n    # It is an important practice that allows the LLM to think step by step before solving the task.\n    cot_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instantiate a new LLM agent specifically for CoT\n    # To allow LLM thinking before answering, we need to set an additional output field 'thinking'.\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Prepare the inputs for the CoT agent\n    # The input should be a list of Info, and the first one is often the taskInfo\n    cot_agent_inputs = [taskInfo]\n\n    # Get the response from the CoT agent\n    thinking, answer = cot_agent(cot_agent_inputs, cot_instruction)\n\n    # Return only the final answer\n    return answer\n",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (10.2%, 22.7%), Median: 16.4%",
        "test_fitness": "95% Bootstrap Confidence Interval: (12.1%, 17.0%), Median: 14.5%"
    },
    {
        "thought": "While an LLM can arrive at the correct answer, its reasoning may vary. By repeatedly asking the same question with high temperature settings, we can generate different reasoning paths. We then combine multiple answers from these Chain-of-Thought (CoT) agents to produce a more accurate final answer through ensembling.",
        "name": "Self-Consistency with Chain-of-Thought",
        "code": "def forward(self, taskInfo):\n    # Instruction for step-by-step reasoning\n    cot_instruction = \"Please think step by step and then solve the task.\"\n    N = 5 # Number of CoT agents\n\n    # Initialize multiple CoT agents with a higher temperature for varied reasoning\n    cot_agents = [LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent', temperature=0.8) for _ in range(N)]\n\n    # Majority voting function to select the most common answer\n    from collections import Counter\n    def majority_voting(answers):\n        return Counter(answers).most_common(1)[0][0]\n    \n    possible_answers = []\n    for i in range(N):\n        thinking, answer = cot_agents[i]([taskInfo], cot_instruction)\n        possible_answers.append(answer.content)\n\n    # Ensembling the answers from multiple CoT agents\n    answer = majority_voting(possible_answers)\n    return answer  \n",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (8.6%, 20.3%), Median: 14.1%",
        "test_fitness": "95% Bootstrap Confidence Interval: (10.9%, 15.6%), Median: 13.2%"
    },
    {
        "thought": "To enhance its performance, an LLM can iteratively improve its answer based on feedback. By reflecting on its previous attempts and incorporating feedback, the model can refine its reasoning and provide a more accurate solution.",
        "name": "Self-Refine (Reflexion)",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    cot_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for reflecting on previous attempts and feedback to improve\n    cot_reflect_instruction = \"Given previous attempts and feedback, carefully consider where you could go wrong in your latest attempt. Using insights from previous attempts, try to solve the task better.\"\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Instruction for providing feedback and correcting the answer\n    critic_instruction = \"Please review the answer above and criticize on where might be wrong. If you are absolutely sure it is correct, output 'True' in 'correct'.\"\n    critic_agent = LLMAgentBase(['feedback', 'correct'], 'Critic Agent')\n    \n    N_max = 5 # Maximum number of attempts\n\n    # Initial attempt\n    cot_inputs = [taskInfo]\n    thinking, answer = cot_agent(cot_inputs, cot_initial_instruction, 0)\n\n    for i in range(N_max):\n        # Get feedback and correct status from the critic\n        feedback, correct = critic_agent([taskInfo, thinking, answer], critic_instruction, i)\n        if correct.content == 'True':\n            break\n            \n        # Add feedback to the inputs for the next iteration\n        cot_inputs.extend([thinking, answer, feedback])\n\n        # Reflect on previous attempts and refine the answer\n        thinking, answer = cot_agent(cot_inputs, cot_reflect_instruction, i + 1)\n    return answer\n",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (8.6%, 20.3%), Median: 14.1%",
        "test_fitness": "95% Bootstrap Confidence Interval: (16.0%, 21.4%), Median: 18.6%"
    },
    {
        "thought": "By letting different LLMs debate with each other, we can leverage their diverse perspectives to find better solutions for tasks.",
        "name": "LLM Debate",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    debate_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for debating and updating the solution based on other agents' solutions\n    debate_instruction = \"Given solutions to the problem from other agents, consider their opinions as additional advice. Please think carefully and provide an updated answer.\"\n    \n    # Initialize debate agents with different roles and a moderate temperature for varied reasoning\n    debate_agents = [LLMAgentBase(['thinking', 'answer'], 'Debate Agent', temperature=0.8, role=role) for role in ['Math Professor', 'Grade School Teacher', 'Math Enthusiast']]\n\n    # Instruction for final decision-making based on all debates and solutions\n    final_decision_instruction = \"Given all the above thinking and answers, reason over them carefully and provide a final answer.\"\n    final_decision_agent = LLMAgentBase(['thinking', 'answer'], 'Final Decision Agent', temperature=0.1)\n\n    max_round = 2 # Maximum number of debate rounds\n    all_thinking = [[] for _ in range(max_round)]\n    all_answer = [[] for _ in range(max_round)]\n\n    # Perform debate rounds\n    for r in range(max_round):\n        for i in range(len(debate_agents)):\n            if r == 0:\n                thinking, answer = debate_agents[i]([taskInfo], debate_initial_instruction)\n            else:\n                input_infos = [taskInfo] + [all_thinking[r-1][i]] + all_thinking[r-1][:i] + all_thinking[r-1][i+1:]\n                thinking, answer = debate_agents[i](input_infos, debate_instruction)\n            all_thinking[r].append(thinking)\n            all_answer[r].append(answer)\n    \n    # Make the final decision based on all debate results and solutions\n    thinking, answer = final_decision_agent([taskInfo] + all_thinking[max_round-1] + all_answer[max_round-1], final_decision_instruction)\n    return answer\n",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (39.1%, 56.2%), Median: 47.7%",
        "test_fitness": "95% Bootstrap Confidence Interval: (44.8%, 51.7%), Median: 48.2%"
    },
    {
        "thought": "Let LLM first think about the principles involved in solving this task which could be helpful. By understanding the underlying principles, the model can better reason through the problem and provide a more accurate solution.",
        "name": "Step-back Abstraction",
        "code": "def forward(self, taskInfo):\n        # Instruction for understanding the principles involved in the task\n        principle_instruction = \"What are the physics, chemistry or biology principles and concepts involved in solving this task? First think step by step. Then list all involved principles and explain them.\"\n        \n        # Instruction for solving the task based on the principles\n        cot_instruction = \"Given the question and the involved principle behind the question, think step by step and then solve the task.\"\n        \n        # Instantiate LLM agents\n        principle_agent = LLMAgentBase(['thinking', 'principle'], 'Principle Agent')\n        cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n        \n        # Get the principles involved in the task\n        thinking, principle = principle_agent([taskInfo], principle_instruction)\n\n        # Use the principles to solve the task\n        thinking, answer = cot_agent([taskInfo, thinking, principle], cot_instruction)\n        return answer\n",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (14.8%, 28.9%), Median: 21.9%",
        "test_fitness": "95% Bootstrap Confidence Interval: (21.0%, 26.9%), Median: 23.9%"
    },
    {
        "thought": "Similar to Quality-Diversity methods, let LLM generate multiple diverse interesting solutions could help. By encouraging the model to explore different reasoning paths, we can increase the chances of finding the best solution.",
        "name": "Quality-Diversity",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    cot_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for giving diverse answers\n    qd_instruction = \"Given previous attempts, try to come up with another interesting way to solve the task.\"\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Instruction for final decision-making based on collected reasoning and answers\n    final_decision_instruction = \"Given all the above solutions, reason over them carefully and provide a final answer.\"\n    final_decision_agent = LLMAgentBase(['thinking', 'answer'], 'Final Decision Agent', temperature=0.1)\n    \n    N_max = 3 # Maximum number of attempts\n\n    # Initial attempt\n    cot_inputs = [taskInfo]\n    possible_answers = []\n    thinking, answer = cot_agent(cot_inputs, cot_initial_instruction, 0)\n\n    # Add the answer to the list of possible answers\n    possible_answers.extend([thinking, answer])\n\n    for i in range(N_max):\n        # Reflect on previous attempts and generate another interesting answer\n        cot_inputs.extend([thinking, answer])\n\n        # Generate another interesting answer\n        thinking, answer = cot_agent(cot_inputs, qd_instruction, i + 1)\n        possible_answers.extend([thinking, answer])\n\n    # Make the final decision based on all generated answers\n    thinking, answer = final_decision_agent([taskInfo] + possible_answers, final_decision_instruction)\n    return answer\n",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (48.4%, 65.6%), Median: 57.0%",
        "test_fitness": "95% Bootstrap Confidence Interval: (50.7%, 57.8%), Median: 54.2%"
    },
    {
        "thought": "Similar to Auto-GPT and expert prompting, we can use dynamic control flow in the design to let the agent decide what expert we should use.",
        "name": "Dynamic Assignment of Roles",
        "code": "def forward(self, taskInfo):\n        # Instruction for step-by-step reasoning\n        cot_instruction = \"Please think step by step and then solve the task.\"\n        expert_agents = [LLMAgentBase(['thinking', 'answer'], 'Expert Agent', role=role) for role in ['Math Professor', 'Grade School Teacher', 'Math Enthusiast', 'Helpful Assistant']]\n\n        # Instruction for routing the task to the appropriate expert\n        routing_instruction = \"Given the task, please choose an Expert to answer the question. Choose from: Math Professor, Grade School Teacher, Math Enthusiast.\"\n        routing_agent = LLMAgentBase(['choice'], 'Routing agent')\n\n        # Get the choice of expert to route the task\n        choice = routing_agent([taskInfo], routing_instruction)[0]\n\n        if 'professor' in choice.content.lower():\n            expert_id = 0\n        elif 'teacher' in choice.content.lower():\n            expert_id = 1\n        elif 'enthusiast' in choice.content.lower():\n            expert_id = 2\n        else:\n            expert_id = 3 # Default to helpful assistant\n\n        thinking, answer = expert_agents[expert_id]([taskInfo], cot_instruction)\n        return answer\n",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (5.5%, 16.4%), Median: 10.9%",
        "test_fitness": "95% Bootstrap Confidence Interval: (12.6%, 17.6%), Median: 15.1%"
    },
    {
        "thought": "**Insights:**\nThe previous architecture's collaborative nature showcases the potential for agents to work together; however, enhancing the feedback mechanisms could significantly optimize their interactions and outputs. A better approach would involve iterative refinement, where agents can provide insights that help each other improve their initial answers before submission to the final decision agent.\n**Overall Idea:**\nThe revised architecture will focus on an iterative feedback process among specialized agents. Each agent will not only provide their solution but also critique the drafts from others, leading to a more refined final output. This promotes a deeper level of collaboration beyond mere submission of findings.",
        "name": "Collaborative Refinement System",
        "code": "def forward(self, taskInfo):\n    # Instructions for specialized agents\n    math_instruction = \"Analyze the mathematical aspects of this problem and provide a solution.\"\n    logic_instruction = \"Review the proposed solutions and identify any pitfalls or improvements needed.\"\n    language_instruction = \"Ensure the clarity and precision of the language used in the answers.\"\n\n    # Instantiate specialized agents\n    math_agent = LLMAgentBase(['thinking', 'answer'], 'Math Expert')\n    logic_agent = LLMAgentBase(['thinking', 'feedback'], 'Logic Expert')\n    language_agent = LLMAgentBase(['thinking', 'clarification'], 'Language Expert')\n    final_decision_agent = LLMAgentBase(['final_thinking', 'final_answer'], 'Final Decision Agent')\n\n    # Get initial responses from specialized agents\n    math_thinking, math_answer = math_agent([taskInfo], math_instruction)\n    logic_thinking, logic_feedback = logic_agent([taskInfo, math_thinking], logic_instruction)\n    language_thinking, language_clarity = language_agent([taskInfo, math_answer], language_instruction)\n\n    # Prepare combined inputs for the final decision agent\n    combined_inputs = [taskInfo, math_thinking, math_answer, logic_feedback, language_clarity]\n    final_thinking, final_answer = final_decision_agent(combined_inputs, \"Synthesize responses from all agents and provide the final answer.\")\n\n    return final_answer",
        "fitness": "95% Bootstrap Confidence Interval: (57.0%, 73.4%), Median: 65.6%",
        "generation": 1,
        "test_fitness": "95% Bootstrap Confidence Interval: (66.2%, 72.6%), Median: 69.5%"
    },
    {
        "thought": "**Overall Idea:** The architecture will employ a cyclic feedback mechanism where agents not only provide solutions but also actively engage in critiquing and refining each other's outputs. This will enhance the quality of the final answer by promoting deeper collaboration. The Math Agent will analyze the problem and provide a solution, the Logic Agent will critique this solution, and the Language Agent will verify clarity. They will exchange feedback iteratively before the final decision is synthesized by the Coordinator Agent.\n**Implementation:** 1. Instantiate the Math, Logic, and Language Agents. 2. Each agent will provide its output, and following this, the Logic Agent will critique the Math Agent's output directly. 3. The Language Agent will also provide clarity checks on the Math Agent\u2019s initial response. 4. The Coordinator Agent will synthesize responses taking into account the critiques and clarity checks from the agents, ensuring the final answer is accurate and clearly communicated.",
        "name": "Cyclic Collaborative Refinement System",
        "code": "def forward(self, taskInfo):\n    # Instructions for specialized agents\n    math_instruction = \"Analyze the mathematical aspects of this problem and provide a solution.\"\n    logic_instruction = \"Critique the proposed solution and suggest improvements.\"\n    language_instruction = \"Ensure the clarity and precision of the language used in the provided answer.\"\n\n    # Instantiate specialized agents\n    math_agent = LLMAgentBase(['thinking', 'answer'], 'Math Expert')\n    logic_agent = LLMAgentBase(['thinking', 'feedback'], 'Logic Expert')\n    language_agent = LLMAgentBase(['thinking', 'clarification'], 'Language Expert')\n    coordinator_agent = LLMAgentBase(['final_thinking', 'final_answer'], 'Coordinator Agent')\n\n    # Get initial response from the Math Agent\n    math_response = math_agent([taskInfo], math_instruction)[0]\n    # Logic Agent critiques the Math Agent's answer\n    logic_response = logic_agent([taskInfo, math_response], logic_instruction)[0]\n    # Language Agent checks for clarity on the Math Agent's answer\n    language_response = language_agent([taskInfo, math_response], language_instruction)[0]\n\n    # Incorporate feedback into the Math Agent's response\n    # Assuming logic_response and language_response contain actionable feedback\n    combined_feedback = f\"{logic_response.content} {language_response.content}\"\n    # Modify the Math Agent's response based on feedback\n    improved_math_response = math_agent([taskInfo, combined_feedback], math_instruction)[0]\n\n    # Prepare combined inputs for the Coordinator Agent\n    combined_inputs = [taskInfo, improved_math_response, logic_response, language_response]\n    # Final synthesis of thoughts and answers\n    final_response = coordinator_agent(combined_inputs, \"Synthesize responses from all agents and provide the final answer.\")\n    return final_response",
        "fitness": "95% Bootstrap Confidence Interval: (0.0%, 0.0%), Median: 0.0%",
        "generation": 2,
        "test_fitness": "95% Bootstrap Confidence Interval: (0.0%, 0.0%), Median: 0.0%"
    },
    {
        "thought": "**Insights:** A collaborative feedback architecture can benefit from a dedicated integration agent that synthesizes feedback before it affects the primary agent's response. This ensures that the feedback used is constructive and relevant, improving clarity and accuracy. \n**Overall Idea:** Introduce a 'Feedback Integration Agent' to process and prioritize feedback from the Logic and Language Experts before passing it to the Math Expert. This creates a clearer and more effective feedback loop, enhancing the quality of the responses. \n**Implementation:** 1. Retain the existing specialized agents. 2. Introduce a new `Feedback Integration Agent` to synthesize and assess feedback effectively. 3. The Math Expert will then be provided with the processed feedback instead of raw feedback. 4. Final synthesis will be performed by a Coordinator Agent, ensuring clarity and accuracy of the final answer.",
        "name": "Collaborative Feedback Integration System",
        "code": "def forward(self, taskInfo):\n    # Instructions for specialized agents\n    math_instruction = \"Analyze the mathematical aspects of this problem and provide a solution.\"\n    logic_instruction = \"Critique the proposed solution and suggest specific improvements.\"\n    language_instruction = \"Ensure the clarity and precision of the language used in the provided answer.\"\n\n    # Instantiate specialized agents\n    math_agent = LLMAgentBase(['thinking', 'answer'], 'Math Expert')\n    logic_agent = LLMAgentBase(['thinking', 'feedback'], 'Logic Expert')\n    language_agent = LLMAgentBase(['thinking', 'clarification'], 'Language Expert')\n    feedback_integration_agent = LLMAgentBase(['integrated_feedback'], 'Feedback Integration Agent')\n    coordinator_agent = LLMAgentBase(['final_thinking', 'final_answer'], 'Coordinator Agent')\n\n    # Get the initial response from the Math Agent\n    math_response = math_agent([taskInfo], math_instruction)[0]\n    # Logic Agent critiques the Math Agent's answer\n    logic_response = logic_agent([taskInfo, math_response], logic_instruction)[0]\n    # Language Agent checks for clarity on the Math Agent's answer\n    language_response = language_agent([taskInfo, math_response], language_instruction)[0]\n\n    # Prepare inputs for feedback integration\n    feedback_inputs = [logic_response, language_response]\n    # Feedback integration\n    processed_feedback = feedback_integration_agent(feedback_inputs, \"Synthesize the feedback from Logic and Language Experts.\")[0]\n\n    # Pass the processed feedback to the Math Agent for improvement\n    improved_math_response = math_agent([taskInfo, processed_feedback], math_instruction)[0]\n\n    # Prepare combined inputs for the Coordinator Agent\n    combined_inputs = [taskInfo, improved_math_response, logic_response, language_response]\n    # Final synthesis of thoughts and answers\n    final_response = coordinator_agent(combined_inputs, \"Synthesize responses from all agents and provide the final answer.\")[0]\n    return final_response",
        "fitness": "95% Bootstrap Confidence Interval: (0.0%, 0.0%), Median: 0.0%",
        "generation": 3,
        "test_fitness": "95% Bootstrap Confidence Interval: (0.0%, 0.0%), Median: 0.0%"
    },
    {
        "thought": "By encouraging the LLM to think step by step rather than directly outputting an answer, chain-of-thought reasoning enables complex problem-solving through intermediate steps. This practice improves the model's ability to handle tasks that require deeper reasoning and provides insight into its decision-making process.",
        "name": "Chain-of-Thought",
        "code": "def forward(self, taskInfo):\n    # Instruction for the Chain-of-Thought (CoT) approach\n    # It is an important practice that allows the LLM to think step by step before solving the task.\n    cot_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instantiate a new LLM agent specifically for CoT\n    # To allow LLM thinking before answering, we need to set an additional output field 'thinking'.\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Prepare the inputs for the CoT agent\n    # The input should be a list of Info, and the first one is often the taskInfo\n    cot_agent_inputs = [taskInfo]\n\n    # Get the response from the CoT agent\n    thinking, answer = cot_agent(cot_agent_inputs, cot_instruction)\n\n    # Return only the final answer\n    return answer\n",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (10.2%, 22.7%), Median: 16.4%",
        "test_fitness": "95% Bootstrap Confidence Interval: (12.6%, 17.6%), Median: 15.1%"
    },
    {
        "thought": "While an LLM can arrive at the correct answer, its reasoning may vary. By repeatedly asking the same question with high temperature settings, we can generate different reasoning paths. We then combine multiple answers from these Chain-of-Thought (CoT) agents to produce a more accurate final answer through ensembling.",
        "name": "Self-Consistency with Chain-of-Thought",
        "code": "def forward(self, taskInfo):\n    # Instruction for step-by-step reasoning\n    cot_instruction = \"Please think step by step and then solve the task.\"\n    N = 5 # Number of CoT agents\n\n    # Initialize multiple CoT agents with a higher temperature for varied reasoning\n    cot_agents = [LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent', temperature=0.8) for _ in range(N)]\n\n    # Majority voting function to select the most common answer\n    from collections import Counter\n    def majority_voting(answers):\n        return Counter(answers).most_common(1)[0][0]\n    \n    possible_answers = []\n    for i in range(N):\n        thinking, answer = cot_agents[i]([taskInfo], cot_instruction)\n        possible_answers.append(answer.content)\n\n    # Ensembling the answers from multiple CoT agents\n    answer = majority_voting(possible_answers)\n    return answer  \n",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (8.6%, 20.3%), Median: 14.1%",
        "test_fitness": "95% Bootstrap Confidence Interval: (12.1%, 17.0%), Median: 14.5%"
    }
]