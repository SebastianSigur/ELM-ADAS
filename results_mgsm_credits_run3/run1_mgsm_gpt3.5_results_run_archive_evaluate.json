[
    {
        "thought": "By encouraging the LLM to think step by step rather than directly outputting an answer, chain-of-thought reasoning enables complex problem-solving through intermediate steps. This practice improves the model's ability to handle tasks that require deeper reasoning and provides insight into its decision-making process.",
        "name": "Chain-of-Thought",
        "code": "def forward(self, taskInfo):\n    # Instruction for the Chain-of-Thought (CoT) approach\n    # It is an important practice that allows the LLM to think step by step before solving the task.\n    cot_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instantiate a new LLM agent specifically for CoT\n    # To allow LLM thinking before answering, we need to set an additional output field 'thinking'.\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Prepare the inputs for the CoT agent\n    # The input should be a list of Info, and the first one is often the taskInfo\n    cot_agent_inputs = [taskInfo]\n\n    # Get the response from the CoT agent\n    thinking, answer = cot_agent(cot_agent_inputs, cot_instruction)\n\n    # Return only the final answer\n    return answer\n",
        "api_calls": 1,
        "structure_label": "Chain-of-Thought Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (9.4%, 21.9%), Median: 15.6%",
        "test_fitness": "95% Bootstrap Confidence Interval: (11.5%, 16.2%), Median: 13.9%"
    },
    {
        "thought": "While an LLM can arrive at the correct answer, its reasoning may vary. By repeatedly asking the same question with high temperature settings, we can generate different reasoning paths. We then combine multiple answers from these Chain-of-Thought (CoT) agents to produce a more accurate final answer through ensembling.",
        "name": "Self-Consistency with Chain-of-Thought",
        "code": "def forward(self, taskInfo):\n    # Instruction for step-by-step reasoning\n    cot_instruction = \"Please think step by step and then solve the task.\"\n    N = 5 # Number of CoT agents\n\n    # Initialize multiple CoT agents with a higher temperature for varied reasoning\n    cot_agents = [LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent', temperature=0.8) for _ in range(N)]\n\n    # Majority voting function to select the most common answer\n    from collections import Counter\n    def majority_voting(answers):\n        return Counter(answers).most_common(1)[0][0]\n    \n    possible_answers = []\n    for i in range(N):\n        thinking, answer = cot_agents[i]([taskInfo], cot_instruction)\n        possible_answers.append(answer.content)\n\n    # Ensembling the answers from multiple CoT agents\n    answer = majority_voting(possible_answers)\n    return answer  \n",
        "api_calls": 5,
        "structure_label": "Multi-Agent Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (9.4%, 21.9%), Median: 15.6%",
        "test_fitness": "95% Bootstrap Confidence Interval: (11.2%, 16.0%), Median: 13.6%"
    },
    {
        "thought": "To enhance its performance, an LLM can iteratively improve its answer based on feedback. By reflecting on its previous attempts and incorporating feedback, the model can refine its reasoning and provide a more accurate solution.",
        "name": "Self-Refine (Reflexion)",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    cot_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for reflecting on previous attempts and feedback to improve\n    cot_reflect_instruction = \"Given previous attempts and feedback, carefully consider where you could go wrong in your latest attempt. Using insights from previous attempts, try to solve the task better.\"\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Instruction for providing feedback and correcting the answer\n    critic_instruction = \"Please review the answer above and criticize on where might be wrong. If you are absolutely sure it is correct, output 'True' in 'correct'.\"\n    critic_agent = LLMAgentBase(['feedback', 'correct'], 'Critic Agent')\n    \n    N_max = 5 # Maximum number of attempts\n\n    # Initial attempt\n    cot_inputs = [taskInfo]\n    thinking, answer = cot_agent(cot_inputs, cot_initial_instruction, 0)\n\n    for i in range(N_max):\n        # Get feedback and correct status from the critic\n        feedback, correct = critic_agent([taskInfo, thinking, answer], critic_instruction, i)\n        if correct.content == 'True':\n            break\n            \n        # Add feedback to the inputs for the next iteration\n        cot_inputs.extend([thinking, answer, feedback])\n\n        # Reflect on previous attempts and refine the answer\n        thinking, answer = cot_agent(cot_inputs, cot_reflect_instruction, i + 1)\n    return answer\n",
        "api_calls": 7,
        "structure_label": "Self-Reflection Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (9.4%, 21.1%), Median: 14.8%",
        "test_fitness": "95% Bootstrap Confidence Interval: (14.2%, 19.4%), Median: 16.8%"
    },
    {
        "thought": "By letting different LLMs debate with each other, we can leverage their diverse perspectives to find better solutions for tasks.",
        "name": "LLM Debate",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    debate_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for debating and updating the solution based on other agents' solutions\n    debate_instruction = \"Given solutions to the problem from other agents, consider their opinions as additional advice. Please think carefully and provide an updated answer.\"\n    \n    # Initialize debate agents with different roles and a moderate temperature for varied reasoning\n    debate_agents = [LLMAgentBase(['thinking', 'answer'], 'Debate Agent', temperature=0.8, role=role) for role in ['Math Professor', 'Grade School Teacher', 'Math Enthusiast']]\n\n    # Instruction for final decision-making based on all debates and solutions\n    final_decision_instruction = \"Given all the above thinking and answers, reason over them carefully and provide a final answer.\"\n    final_decision_agent = LLMAgentBase(['thinking', 'answer'], 'Final Decision Agent', temperature=0.1)\n\n    max_round = 2 # Maximum number of debate rounds\n    all_thinking = [[] for _ in range(max_round)]\n    all_answer = [[] for _ in range(max_round)]\n\n    # Perform debate rounds\n    for r in range(max_round):\n        for i in range(len(debate_agents)):\n            if r == 0:\n                thinking, answer = debate_agents[i]([taskInfo], debate_initial_instruction)\n            else:\n                input_infos = [taskInfo] + [all_thinking[r-1][i]] + all_thinking[r-1][:i] + all_thinking[r-1][i+1:]\n                thinking, answer = debate_agents[i](input_infos, debate_instruction)\n            all_thinking[r].append(thinking)\n            all_answer[r].append(answer)\n    \n    # Make the final decision based on all debate results and solutions\n    thinking, answer = final_decision_agent([taskInfo] + all_thinking[max_round-1] + all_answer[max_round-1], final_decision_instruction)\n    return answer\n",
        "api_calls": 9,
        "structure_label": "Multi-Agent Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (40.6%, 57.8%), Median: 49.2%",
        "test_fitness": "95% Bootstrap Confidence Interval: (45.0%, 52.0%), Median: 48.5%"
    },
    {
        "thought": "Let LLM first think about the principles involved in solving this task which could be helpful. By understanding the underlying principles, the model can better reason through the problem and provide a more accurate solution.",
        "name": "Step-back Abstraction",
        "code": "def forward(self, taskInfo):\n        # Instruction for understanding the principles involved in the task\n        principle_instruction = \"What are the physics, chemistry or biology principles and concepts involved in solving this task? First think step by step. Then list all involved principles and explain them.\"\n        \n        # Instruction for solving the task based on the principles\n        cot_instruction = \"Given the question and the involved principle behind the question, think step by step and then solve the task.\"\n        \n        # Instantiate LLM agents\n        principle_agent = LLMAgentBase(['thinking', 'principle'], 'Principle Agent')\n        cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n        \n        # Get the principles involved in the task\n        thinking, principle = principle_agent([taskInfo], principle_instruction)\n\n        # Use the principles to solve the task\n        thinking, answer = cot_agent([taskInfo, thinking, principle], cot_instruction)\n        return answer\n",
        "api_calls": 2,
        "structure_label": "Abstraction to Principles Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (14.1%, 28.1%), Median: 21.1%",
        "test_fitness": "95% Bootstrap Confidence Interval: (23.5%, 29.6%), Median: 26.5%"
    },
    {
        "thought": "Similar to Quality-Diversity methods, let LLM generate multiple diverse interesting solutions could help. By encouraging the model to explore different reasoning paths, we can increase the chances of finding the best solution.",
        "name": "Quality-Diversity",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    cot_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for giving diverse answers\n    qd_instruction = \"Given previous attempts, try to come up with another interesting way to solve the task.\"\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Instruction for final decision-making based on collected reasoning and answers\n    final_decision_instruction = \"Given all the above solutions, reason over them carefully and provide a final answer.\"\n    final_decision_agent = LLMAgentBase(['thinking', 'answer'], 'Final Decision Agent', temperature=0.1)\n    \n    N_max = 3 # Maximum number of attempts\n\n    # Initial attempt\n    cot_inputs = [taskInfo]\n    possible_answers = []\n    thinking, answer = cot_agent(cot_inputs, cot_initial_instruction, 0)\n\n    # Add the answer to the list of possible answers\n    possible_answers.extend([thinking, answer])\n\n    for i in range(N_max):\n        # Reflect on previous attempts and generate another interesting answer\n        cot_inputs.extend([thinking, answer])\n\n        # Generate another interesting answer\n        thinking, answer = cot_agent(cot_inputs, qd_instruction, i + 1)\n        possible_answers.extend([thinking, answer])\n\n    # Make the final decision based on all generated answers\n    thinking, answer = final_decision_agent([taskInfo] + possible_answers, final_decision_instruction)\n    return answer\n",
        "api_calls": 7,
        "structure_label": "Multi-Agent Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (50.0%, 67.2%), Median: 58.6%",
        "test_fitness": "95% Bootstrap Confidence Interval: (51.1%, 58.0%), Median: 54.6%"
    },
    {
        "thought": "Similar to Auto-GPT and expert prompting, we can use dynamic control flow in the design to let the agent decide what expert we should use.",
        "name": "Dynamic Assignment of Roles",
        "code": "def forward(self, taskInfo):\n        # Instruction for step-by-step reasoning\n        cot_instruction = \"Please think step by step and then solve the task.\"\n        expert_agents = [LLMAgentBase(['thinking', 'answer'], 'Expert Agent', role=role) for role in ['Math Professor', 'Grade School Teacher', 'Math Enthusiast', 'Helpful Assistant']]\n\n        # Instruction for routing the task to the appropriate expert\n        routing_instruction = \"Given the task, please choose an Expert to answer the question. Choose from: Math Professor, Grade School Teacher, Math Enthusiast.\"\n        routing_agent = LLMAgentBase(['choice'], 'Routing agent')\n\n        # Get the choice of expert to route the task\n        choice = routing_agent([taskInfo], routing_instruction)[0]\n\n        if 'professor' in choice.content.lower():\n            expert_id = 0\n        elif 'teacher' in choice.content.lower():\n            expert_id = 1\n        elif 'enthusiast' in choice.content.lower():\n            expert_id = 2\n        else:\n            expert_id = 3 # Default to helpful assistant\n\n        thinking, answer = expert_agents[expert_id]([taskInfo], cot_instruction)\n        return answer\n",
        "api_calls": 4,
        "structure_label": "Multi-Agent Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (10.9%, 24.2%), Median: 17.2%",
        "test_fitness": "95% Bootstrap Confidence Interval: (10.8%, 15.4%), Median: 13.0%"
    },
    {
        "thought": "**Insights:**\nTo enhance efficiency further and adhere strictly to the API call limits, I propose an architecture that generates multiple answers and reflects on them in a single consolidated output. This avoids multiple LLMAgentBase calls while still allowing for diverse reasoning pathways. Instead of having separate agents for reflection, we will have a single agent that generates the answers and later critiques them in a cohesive manner.\n\n**Overall Idea:**\nThe goal is to produce diverse initial answers while also integrating self-reflection into the same interaction, thus minimizing API calls. By creating a single LLMAgentBase instance that handles both the answer generation and self-reflection, we can streamline the process while still allowing for critical evaluation of the outputs.",
        "name": "Integrated Reflection Mechanism",
        "code": "def forward(self, taskInfo):\n    # Combined instruction for generating multiple answers and reflecting on them\n    combined_instruction = \"Please generate three distinct solutions for the task, thinking step by step, and then reflect on those solutions to suggest improvements.\"\n\n    # Instantiate a new LLM agent to handle the process\n    integrated_agent = LLMAgentBase(['thinking', 'answer', 'reflection'], 'Integrated Reflective Agent')\n\n    # Prepare inputs for the integrated agent\n    agent_inputs = [taskInfo]\n\n    # Get the response from the integrated agent\n    response = integrated_agent(agent_inputs, combined_instruction)\n\n    # Extract the answer from the response\n    final_answer = next((info.content for info in response if info.name == 'answer'), 'No answer generated.')\n\n    return final_answer",
        "fitness": "95% Bootstrap Confidence Interval: (37.5%, 54.7%), Median: 46.1%",
        "generation": 8,
        "api_calls": 1,
        "structure_label": "Self-Reflection Reasoning",
        "test_fitness": "95% Bootstrap Confidence Interval: (35.5%, 42.2%), Median: 38.9%"
    },
    {
        "thought": "**Insights:**\nThe proposed architecture can be enhanced by implementing a mechanism that allows agents to generate initial solutions and critique these solutions collectively in a single step. Each agent can offer a solution and critique them in the same call, reducing the number of API calls while ensuring more diverse perspectives are integrated into the final decision.\n\n**Overall Idea:**\nThe design will feature multi-agent reasoning where agents generate solutions, then critique each other's outputs in a collaborative format. This will allow for a synthesis of insights while maintaining a low number of API calls.",
        "name": "Collaborative Synthesis Agent",
        "code": "def forward(self, taskInfo):\n    # Instruction for independent reasoning and collaborative critique\n    combined_instruction = \"Please generate a distinct solution for the task and provide a brief critique of your own response.\"\n    N = 3  # Number of independent reasoning agents\n\n    # Initialize reasoning agents\n    reasoning_agents = [LLMAgentBase([\"thinking\", \"answer\", \"critique\"], f\"Collaborative Agent {i + 1}\") for i in range(N)]\n    initial_answers = []\n    initial_critiques = []\n\n    # Collect all answers and critiques from the reasoning agents\n    for agent in reasoning_agents:\n        response = agent([taskInfo], combined_instruction)\n        initial_answers.append(response[0])  # Store the answer\n        initial_critiques.append(response[1])  # Store the critique\n\n    # Prepare inputs for final decision-making based on critiques and answers\n    final_decision_instruction = \"Considering the following responses and critiques, provide the best final answer.\"\n    final_decision_agent = LLMAgentBase([\"thinking\", \"final_answer\"], \"Final Decision Agent\")\n\n    # Aggregate answers and critiques into a single input\n    aggregated_responses = list(zip(initial_answers, initial_critiques))\n\n    # Make the final decision using aggregated responses\n    final_answer_thinking, final_answer = final_decision_agent([taskInfo] + aggregated_responses, final_decision_instruction)\n\n    return final_answer",
        "fitness": "95% Bootstrap Confidence Interval: (36.7%, 53.9%), Median: 45.3%",
        "generation": 15,
        "api_calls": 4,
        "structure_label": "Multi-Agent Reasoning",
        "test_fitness": "95% Bootstrap Confidence Interval: (38.8%, 45.6%), Median: 42.1%"
    },
    {
        "thought": "**Insights:**\nTo enhance the architecture, I will design it to allow a single agent to generate multiple distinct solutions while reflecting on those solutions in the same call. This approach will minimize API calls while ensuring that diverse perspectives are captured in the generated critiques. I will also leverage peer feedback among the generated solutions simultaneously to refine the answers and ensure that the model is critically evaluating its outputs effectively. \n\n**Overall Idea:**\nThe new design will utilize a single LLMAgentBase instance to generate multiple solutions and critiques in one go. Each proposed solution will be followed by a critique from the same agent, allowing for an integrated reflection process. This streamlined architecture will focus on maintaining high performance while adhering to API call limits. \n\n**Implementation:**\n1. Define a single instruction that prompts the LLM to produce multiple solutions and critiques in one pass.\n2. Instantiate one LLMAgentBase that will handle all aspects of reasoning and critique in one go.\n3. Prepare the input task information for the LLM.\n4. Extract the solutions and critiques from the LLM\u2019s response.\n5. Return the best final answer based on the provided critiques.",
        "name": "Collaborative Reflection Integration",
        "code": "def forward(self, taskInfo):\n    # Instruction for generating multiple solutions and their critiques\n    combined_instruction = \"Please generate three distinct solutions for the task, thinking step by step, and for each solution, provide a brief critique.\"\n    \n    # Instantiate a single LLMAgentBase to handle reasoning and critiques\n    integrated_agent = LLMAgentBase([\"thinking\", \"answer\", \"critique\"], \"Integrated Collaborative Reflection Agent\")\n    \n    # Prepare inputs for the integrated agent\n    agent_inputs = [taskInfo] \n    \n    # Get the response from the integrated agent\n    response = integrated_agent(agent_inputs, combined_instruction) \n    \n    # Initialize variable to store the best answer\n    best_answer = 'No answer generated.'\n\n    # Process the response to extract answers\n    for info in response: \n        if info.name == 'answer': \n            best_answer = info.content \n            break  # Exit once the first answer is found\n\n    return best_answer",
        "fitness": "95% Bootstrap Confidence Interval: (32.0%, 49.2%), Median: 40.6%",
        "generation": 17,
        "api_calls": 1,
        "structure_label": "Self-Reflection Reasoning",
        "test_fitness": "95% Bootstrap Confidence Interval: (36.1%, 42.9%), Median: 39.5%"
    }
]