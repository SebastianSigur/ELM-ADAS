{
    "Linear Chain-of-Thought,0": {
        "thought": "By encouraging the LLM to think step by step rather than directly outputting an answer, chain-of-thought reasoning enables complex problem-solving through intermediate steps. This practice improves the model's ability to handle tasks that require deeper reasoning and provides insight into its decision-making process.",
        "name": "Chain-of-Thought",
        "code": "def forward(self, taskInfo):\n    # Instruction for the Chain-of-Thought (CoT) approach\n    # It is an important practice that allows the LLM to think step by step before solving the task.\n    cot_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instantiate a new LLM agent specifically for CoT\n    # To allow LLM thinking before answering, we need to set an additional output field 'thinking'.\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Prepare the inputs for the CoT agent\n    # The input should be a list of Info, and the first one is often the taskInfo\n    cot_agent_inputs = [taskInfo]\n\n    # Get the response from the CoT agent\n    thinking, answer = cot_agent(cot_agent_inputs, cot_instruction)\n\n    # Return only the final answer\n    return answer\n",
        "api_calls": 1,
        "structure_label": "Linear Chain-of-Thought",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (12.5%, 26.6%), Median: 19.5%"
    },
    "Linear Chain-of-Thought,1": null,
    "Iterative Refinement,0": {
        "thought": "**Insights:**\nTo create an architecture that truly innovates, I propose a design that leverages a single agent for both initial reasoning and iterative refinement in a streamlined manner. This architecture will first generate an answer using chain-of-thought reasoning and then reflect on that answer for improvement, thus minimizing API calls while ensuring robust feedback integration.\n\n**Overall Idea:**\nThe architecture will encapsulate both reasoning and reflection within a single iterative process that leverages feedback for refinement. This will reduce the number of LLMAgentBase instances and calls to improve efficiency and clarity in reasoning.\n\n**Implementation:**\n1. **Single Agent Usage:** Instead of multiple agents, use one agent for generating the initial answer and refining it through feedback.\n2. **Feedback Loop:** After generating the initial answer, the agent will analyze and provide feedback iteratively, refining the outputs accordingly.\n3. **Final Answer Delivery:** The final output will be the most accurate answer after considering the feedback, ensuring that the refinement process is clear and concise.",
        "name": "Feedback-Integrated Iterative Refinement",
        "code": "def forward(self, taskInfo):\n    # Instruction for generating an initial answer using Chain-of-Thought\n    reasoning_instruction = \"Please think step by step and then solve the task.\"\n    # Instruction for collecting feedback on the answer\n    feedback_instruction = \"Please review the answer and provide constructive feedback.\"\n\n    # Initialize a single agent for generating answers and refining them\n    agent = LLMAgentBase(['thinking', 'answer'], 'Iterative Refinement Agent')\n\n    # Initial attempt\n    thinking, answer = agent([taskInfo], reasoning_instruction)\n\n    # Collect feedback on the generated answer\n    feedback = agent([answer], feedback_instruction)\n\n    # Incorporate feedback into the next input for refinement\n    inputs = [taskInfo, answer, feedback]\n    # Generate a refined answer based on feedback\n    thinking, refined_answer = agent(inputs, reasoning_instruction)\n\n    return refined_answer  # Return the final refined answer after feedback integration.",
        "fitness": "95% Bootstrap Confidence Interval: (13.3%, 27.3%), Median: 20.3%",
        "generation": 2,
        "api_calls": 4,
        "structure_label": "Iterative Refinement"
    },
    "Iterative Refinement,1": {
        "thought": "To enhance its performance, an LLM can iteratively improve its answer based on feedback. By reflecting on its previous attempts and incorporating feedback, the model can refine its reasoning and provide a more accurate solution.",
        "name": "Self-Refine (Reflexion)",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    cot_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for reflecting on previous attempts and feedback to improve\n    cot_reflect_instruction = \"Given previous attempts and feedback, carefully consider where you could go wrong in your latest attempt. Using insights from previous attempts, try to solve the task better.\"\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Instruction for providing feedback and correcting the answer\n    critic_instruction = \"Please review the answer above and criticize on where might be wrong. If you are absolutely sure it is correct, output 'True' in 'correct'.\"\n    critic_agent = LLMAgentBase(['feedback', 'correct'], 'Critic Agent')\n    \n    N_max = 5 # Maximum number of attempts\n\n    # Initial attempt\n    cot_inputs = [taskInfo]\n    thinking, answer = cot_agent(cot_inputs, cot_initial_instruction, 0)\n\n    for i in range(N_max):\n        # Get feedback and correct status from the critic\n        feedback, correct = critic_agent([taskInfo, thinking, answer], critic_instruction, i)\n        if correct.content == 'True':\n            break\n            \n        # Add feedback to the inputs for the next iteration\n        cot_inputs.extend([thinking, answer, feedback])\n\n        # Reflect on previous attempts and refine the answer\n        thinking, answer = cot_agent(cot_inputs, cot_reflect_instruction, i + 1)\n    return answer\n",
        "api_calls": 10,
        "structure_label": "Iterative Refinement",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (10.2%, 23.4%), Median: 16.4%"
    },
    "Tree-of-Thought,0": {
        "thought": "**Insights:**\nTo introduce a more innovative architecture, I propose a Tree-of-Thought design that incorporates branching reasoning paths based on the principles derived from the problem. This structure will allow for multiple potential solutions to be explored simultaneously, improving the chance of arriving at a correct answer with fewer calls.\n\n**Overall Idea:**\nThe architecture will first extract key principles relevant to the mathematical problem and then branch into different reasoning paths that utilize these principles for solving the task. Each branch can explore alternative solutions, and the best answer will be selected at the end.\n\n**Implementation:**\n1. **Principle Extraction:** Use a single agent to extract relevant principles from the given task.\n2. **Branching Reasoning Paths:** For each principle identified, create reasoning steps that utilize the principles to solve the task, all handled in one agent call.\n3. **Final Selection:** Collate the results from the reasoning steps and select the most promising solution based on the reasoning paths explored. This structure will ensure minimal API calls while maximizing the depth of reasoning.",
        "name": "Principle-Based Tree-of-Thought Agent",
        "code": "def forward(self, taskInfo):\n    # Step 1: Extract principles from the task and generate reasoning paths based on those principles\n    instruction = \"First, list the principles governing this task. Then, for each principle, think step by step and provide a potential solution to the task using that principle.\"\n\n    # Initialize a single agent for both principle extraction and reasoning\n    agent = LLMAgentBase(['thinking', 'principles_and_answers'], 'Principle-Based Reasoning Agent')\n\n    # Execute a single call to process the task\n    thinking, results = agent([taskInfo], instruction)  # 1 API call\n\n    # results should contain both the extracted principles and their corresponding answers\n    return results  # Total API calls: 1",
        "fitness": "95% Bootstrap Confidence Interval: (5.5%, 16.4%), Median: 10.9%",
        "generation": 3,
        "api_calls": 1,
        "structure_label": "Tree-of-Thought"
    },
    "Tree-of-Thought,1": null,
    "Decompositional Reasoning,0": {
        "thought": "Similar to Auto-GPT and expert prompting, we can use dynamic control flow in the design to let the agent decide what expert we should use.",
        "name": "Dynamic Assignment of Roles",
        "code": "def forward(self, taskInfo):\n        # Instruction for step-by-step reasoning\n        cot_instruction = \"Please think step by step and then solve the task.\"\n        expert_agents = [LLMAgentBase(['thinking', 'answer'], 'Expert Agent', role=role) for role in ['Math Professor', 'Grade School Teacher', 'Math Enthusiast', 'Helpful Assistant']]\n\n        # Instruction for routing the task to the appropriate expert\n        routing_instruction = \"Given the task, please choose an Expert to answer the question. Choose from: Math Professor, Grade School Teacher, Math Enthusiast.\"\n        routing_agent = LLMAgentBase(['choice'], 'Routing agent')\n\n        # Get the choice of expert to route the task\n        choice = routing_agent([taskInfo], routing_instruction)[0]\n\n        if 'professor' in choice.content.lower():\n            expert_id = 0\n        elif 'teacher' in choice.content.lower():\n            expert_id = 1\n        elif 'enthusiast' in choice.content.lower():\n            expert_id = 2\n        else:\n            expert_id = 3 # Default to helpful assistant\n\n        thinking, answer = expert_agents[expert_id]([taskInfo], cot_instruction)\n        return answer\n",
        "api_calls": 6,
        "structure_label": "Decompositional Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (6.2%, 16.4%), Median: 10.9%"
    },
    "Decompositional Reasoning,1": null,
    "Multi-Agent Reasoning,0": {
        "thought": "**Insights:**\nThe current architecture effectively combines multi-agent initial solution generation with a feedback mechanism for refinement. However, to enhance its innovative aspect, I propose introducing a branching method for exploring diverse reasoning paths based on the principles identified, allowing multiple solutions to develop concurrently and facilitating selection based on a voting mechanism. This will significantly increase the number of API calls and improve overall performance by ensuring thorough exploration of potential answers.\n\n**Overall Idea:**\nThe design will consist of a principle extraction phase followed by multiple agents generating solutions based on these principles. Each agent will represent a distinct reasoning path. Finally, a voting mechanism will determine the most suitable solution based on the inputs provided by each agent.\n\n**Implementation:**\n1. Extract principles governing the task.\n2. Instantiate multiple agents to explore reasoning paths based on these principles, generating diverse solutions.\n3. Implement a voting system to select the best solution based on responses from all agents, ensuring thorough exploration and effective decision-making.",
        "name": "Principle-Based Voting Mechanism",
        "code": "def forward(self, taskInfo):\n    # Step 1: Extract principles relevant to the task\n    principle_instruction = 'Please identify and list the key principles involved in solving this task.'\n    principle_agent = LLMAgentBase(['thinking', 'principles'], 'Principle Extraction Agent')\n    thinking, principles = principle_agent([taskInfo], principle_instruction)  # 1 API call\n\n    # Step 2: Utilize extracted principles to generate potential solutions\n    reasoning_instruction = 'Using the principles identified, think step by step and provide potential solutions to the task.'\n    N_agents = 3  # Number of agents exploring different reasoning paths\n    solution_agents = [LLMAgentBase(['thinking', 'solution'], 'Solution Generation Agent') for _ in range(N_agents)]\n    solutions = []\n    for agent in solution_agents:\n        thinking, solution = agent([taskInfo, principles], reasoning_instruction)  # 1 call per agent (3 calls total)\n        solutions.append(solution.content)  # Collecting solution contents\n\n    # Step 3: Voting mechanism to select the best solution\n    from collections import Counter\n    best_solution = Counter(solutions).most_common(1)[0][0]  # Voting to find the most common solution\n\n    return best_solution  # Total API calls: 1 (principle extraction) + 3 (solution generation) = 4 API calls.",
        "fitness": "95% Bootstrap Confidence Interval: (22.7%, 38.3%), Median: 30.5%",
        "generation": 8,
        "api_calls": 4,
        "structure_label": "Multi-Agent Reasoning"
    },
    "Multi-Agent Reasoning,1": {
        "thought": "Similar to Quality-Diversity methods, let LLM generate multiple diverse interesting solutions could help. By encouraging the model to explore different reasoning paths, we can increase the chances of finding the best solution.",
        "name": "Quality-Diversity",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    cot_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for giving diverse answers\n    qd_instruction = \"Given previous attempts, try to come up with another interesting way to solve the task.\"\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Instruction for final decision-making based on collected reasoning and answers\n    final_decision_instruction = \"Given all the above solutions, reason over them carefully and provide a final answer.\"\n    final_decision_agent = LLMAgentBase(['thinking', 'answer'], 'Final Decision Agent', temperature=0.1)\n    \n    N_max = 3 # Maximum number of attempts\n\n    # Initial attempt\n    cot_inputs = [taskInfo]\n    possible_answers = []\n    thinking, answer = cot_agent(cot_inputs, cot_initial_instruction, 0)\n\n    # Add the answer to the list of possible answers\n    possible_answers.extend([thinking, answer])\n\n    for i in range(N_max):\n        # Reflect on previous attempts and generate another interesting answer\n        cot_inputs.extend([thinking, answer])\n\n        # Generate another interesting answer\n        thinking, answer = cot_agent(cot_inputs, qd_instruction, i + 1)\n        possible_answers.extend([thinking, answer])\n\n    # Make the final decision based on all generated answers\n    thinking, answer = final_decision_agent([taskInfo] + possible_answers, final_decision_instruction)\n    return answer\n",
        "api_calls": 8,
        "structure_label": "Multi-Agent Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (44.5%, 61.7%), Median: 53.1%"
    },
    "Abstraction to Principles Reasoning,0": {
        "thought": "Let LLM first think about the principles involved in solving this task which could be helpful. By understanding the underlying principles, the model can better reason through the problem and provide a more accurate solution.",
        "name": "Step-back Abstraction",
        "code": "def forward(self, taskInfo):\n        # Instruction for understanding the principles involved in the task\n        principle_instruction = \"What are the physics, chemistry or biology principles and concepts involved in solving this task? First think step by step. Then list all involved principles and explain them.\"\n        \n        # Instruction for solving the task based on the principles\n        cot_instruction = \"Given the question and the involved principle behind the question, think step by step and then solve the task.\"\n        \n        # Instantiate LLM agents\n        principle_agent = LLMAgentBase(['thinking', 'principle'], 'Principle Agent')\n        cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n        \n        # Get the principles involved in the task\n        thinking, principle = principle_agent([taskInfo], principle_instruction)\n\n        # Use the principles to solve the task\n        thinking, answer = cot_agent([taskInfo, thinking, principle], cot_instruction)\n        return answer\n",
        "api_calls": 4,
        "structure_label": "Abstraction to Principles Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (16.4%, 31.2%), Median: 23.4%"
    },
    "Abstraction to Principles Reasoning,1": null
}