[
    {
        "thought": "By encouraging the LLM to think step by step rather than directly outputting an answer, chain-of-thought reasoning enables complex problem-solving through intermediate steps. This practice improves the model's ability to handle tasks that require deeper reasoning and provides insight into its decision-making process.",
        "name": "Chain-of-Thought",
        "code": "def forward(self, taskInfo):\n    # Instruction for the Chain-of-Thought (CoT) approach\n    # It is an important practice that allows the LLM to think step by step before solving the task.\n    cot_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instantiate a new LLM agent specifically for CoT\n    # To allow LLM thinking before answering, we need to set an additional output field 'thinking'.\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Prepare the inputs for the CoT agent\n    # The input should be a list of Info, and the first one is often the taskInfo\n    cot_agent_inputs = [taskInfo]\n\n    # Get the response from the CoT agent\n    thinking, answer = cot_agent(cot_agent_inputs, cot_instruction)\n\n    # Return only the final answer\n    return answer\n",
        "api_calls": 1,
        "structure_label": "Single-Pass Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (10.9%, 24.2%), Median: 17.2%"
    },
    {
        "thought": "While an LLM can arrive at the correct answer, its reasoning may vary. By repeatedly asking the same question with high temperature settings, we can generate different reasoning paths. We then combine multiple answers from these Chain-of-Thought (CoT) agents to produce a more accurate final answer through ensembling.",
        "name": "Self-Consistency with Chain-of-Thought",
        "code": "def forward(self, taskInfo):\n    # Instruction for step-by-step reasoning\n    cot_instruction = \"Please think step by step and then solve the task.\"\n    N = 5 # Number of CoT agents\n\n    # Initialize multiple CoT agents with a higher temperature for varied reasoning\n    cot_agents = [LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent', temperature=0.8) for _ in range(N)]\n\n    # Majority voting function to select the most common answer\n    from collections import Counter\n    def majority_voting(answers):\n        return Counter(answers).most_common(1)[0][0]\n    \n    possible_answers = []\n    for i in range(N):\n        thinking, answer = cot_agents[i]([taskInfo], cot_instruction)\n        possible_answers.append(answer.content)\n\n    # Ensembling the answers from multiple CoT agents\n    answer = majority_voting(possible_answers)\n    return answer  \n",
        "api_calls": 5,
        "structure_label": "Parallel Ensemble Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (7.0%, 18.8%), Median: 12.5%"
    },
    {
        "thought": "To enhance its performance, an LLM can iteratively improve its answer based on feedback. By reflecting on its previous attempts and incorporating feedback, the model can refine its reasoning and provide a more accurate solution.",
        "name": "Self-Refine (Reflexion)",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    cot_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for reflecting on previous attempts and feedback to improve\n    cot_reflect_instruction = \"Given previous attempts and feedback, carefully consider where you could go wrong in your latest attempt. Using insights from previous attempts, try to solve the task better.\"\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Instruction for providing feedback and correcting the answer\n    critic_instruction = \"Please review the answer above and criticize on where might be wrong. If you are absolutely sure it is correct, output 'True' in 'correct'.\"\n    critic_agent = LLMAgentBase(['feedback', 'correct'], 'Critic Agent')\n    \n    N_max = 5 # Maximum number of attempts\n\n    # Initial attempt\n    cot_inputs = [taskInfo]\n    thinking, answer = cot_agent(cot_inputs, cot_initial_instruction, 0)\n\n    for i in range(N_max):\n        # Get feedback and correct status from the critic\n        feedback, correct = critic_agent([taskInfo, thinking, answer], critic_instruction, i)\n        if correct.content == 'True':\n            break\n            \n        # Add feedback to the inputs for the next iteration\n        cot_inputs.extend([thinking, answer, feedback])\n\n        # Reflect on previous attempts and refine the answer\n        thinking, answer = cot_agent(cot_inputs, cot_reflect_instruction, i + 1)\n    return answer\n",
        "api_calls": 7,
        "structure_label": "Iterative Refinement",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (10.2%, 23.4%), Median: 16.4%"
    },
    {
        "thought": "By letting different LLMs debate with each other, we can leverage their diverse perspectives to find better solutions for tasks.",
        "name": "LLM Debate",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    debate_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for debating and updating the solution based on other agents' solutions\n    debate_instruction = \"Given solutions to the problem from other agents, consider their opinions as additional advice. Please think carefully and provide an updated answer.\"\n    \n    # Initialize debate agents with different roles and a moderate temperature for varied reasoning\n    debate_agents = [LLMAgentBase(['thinking', 'answer'], 'Debate Agent', temperature=0.8, role=role) for role in ['Math Professor', 'Grade School Teacher', 'Math Enthusiast']]\n\n    # Instruction for final decision-making based on all debates and solutions\n    final_decision_instruction = \"Given all the above thinking and answers, reason over them carefully and provide a final answer.\"\n    final_decision_agent = LLMAgentBase(['thinking', 'answer'], 'Final Decision Agent', temperature=0.1)\n\n    max_round = 2 # Maximum number of debate rounds\n    all_thinking = [[] for _ in range(max_round)]\n    all_answer = [[] for _ in range(max_round)]\n\n    # Perform debate rounds\n    for r in range(max_round):\n        for i in range(len(debate_agents)):\n            if r == 0:\n                thinking, answer = debate_agents[i]([taskInfo], debate_initial_instruction)\n            else:\n                input_infos = [taskInfo] + [all_thinking[r-1][i]] + all_thinking[r-1][:i] + all_thinking[r-1][i+1:]\n                thinking, answer = debate_agents[i](input_infos, debate_instruction)\n            all_thinking[r].append(thinking)\n            all_answer[r].append(answer)\n    \n    # Make the final decision based on all debate results and solutions\n    thinking, answer = final_decision_agent([taskInfo] + all_thinking[max_round-1] + all_answer[max_round-1], final_decision_instruction)\n    return answer\n",
        "api_calls": 9,
        "structure_label": "Parallel Ensemble Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (37.5%, 54.7%), Median: 46.1%"
    },
    {
        "thought": "Let LLM first think about the principles involved in solving this task which could be helpful. By understanding the underlying principles, the model can better reason through the problem and provide a more accurate solution.",
        "name": "Step-back Abstraction",
        "code": "def forward(self, taskInfo):\n        # Instruction for understanding the principles involved in the task\n        principle_instruction = \"What are the physics, chemistry or biology principles and concepts involved in solving this task? First think step by step. Then list all involved principles and explain them.\"\n        \n        # Instruction for solving the task based on the principles\n        cot_instruction = \"Given the question and the involved principle behind the question, think step by step and then solve the task.\"\n        \n        # Instantiate LLM agents\n        principle_agent = LLMAgentBase(['thinking', 'principle'], 'Principle Agent')\n        cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n        \n        # Get the principles involved in the task\n        thinking, principle = principle_agent([taskInfo], principle_instruction)\n\n        # Use the principles to solve the task\n        thinking, answer = cot_agent([taskInfo, thinking, principle], cot_instruction)\n        return answer\n",
        "api_calls": 2,
        "structure_label": "Abstraction-Based Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (18.8%, 34.4%), Median: 26.6%"
    },
    {
        "thought": "Similar to Quality-Diversity methods, let LLM generate multiple diverse interesting solutions could help. By encouraging the model to explore different reasoning paths, we can increase the chances of finding the best solution.",
        "name": "Quality-Diversity",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    cot_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for giving diverse answers\n    qd_instruction = \"Given previous attempts, try to come up with another interesting way to solve the task.\"\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Instruction for final decision-making based on collected reasoning and answers\n    final_decision_instruction = \"Given all the above solutions, reason over them carefully and provide a final answer.\"\n    final_decision_agent = LLMAgentBase(['thinking', 'answer'], 'Final Decision Agent', temperature=0.1)\n    \n    N_max = 3 # Maximum number of attempts\n\n    # Initial attempt\n    cot_inputs = [taskInfo]\n    possible_answers = []\n    thinking, answer = cot_agent(cot_inputs, cot_initial_instruction, 0)\n\n    # Add the answer to the list of possible answers\n    possible_answers.extend([thinking, answer])\n\n    for i in range(N_max):\n        # Reflect on previous attempts and generate another interesting answer\n        cot_inputs.extend([thinking, answer])\n\n        # Generate another interesting answer\n        thinking, answer = cot_agent(cot_inputs, qd_instruction, i + 1)\n        possible_answers.extend([thinking, answer])\n\n    # Make the final decision based on all generated answers\n    thinking, answer = final_decision_agent([taskInfo] + possible_answers, final_decision_instruction)\n    return answer\n",
        "api_calls": 7,
        "structure_label": "Iterative Refinement",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (43.8%, 60.9%), Median: 52.3%"
    },
    {
        "thought": "Similar to Auto-GPT and expert prompting, we can use dynamic control flow in the design to let the agent decide what expert we should use.",
        "name": "Dynamic Assignment of Roles",
        "code": "def forward(self, taskInfo):\n        # Instruction for step-by-step reasoning\n        cot_instruction = \"Please think step by step and then solve the task.\"\n        expert_agents = [LLMAgentBase(['thinking', 'answer'], 'Expert Agent', role=role) for role in ['Math Professor', 'Grade School Teacher', 'Math Enthusiast', 'Helpful Assistant']]\n\n        # Instruction for routing the task to the appropriate expert\n        routing_instruction = \"Given the task, please choose an Expert to answer the question. Choose from: Math Professor, Grade School Teacher, Math Enthusiast.\"\n        routing_agent = LLMAgentBase(['choice'], 'Routing agent')\n\n        # Get the choice of expert to route the task\n        choice = routing_agent([taskInfo], routing_instruction)[0]\n\n        if 'professor' in choice.content.lower():\n            expert_id = 0\n        elif 'teacher' in choice.content.lower():\n            expert_id = 1\n        elif 'enthusiast' in choice.content.lower():\n            expert_id = 2\n        else:\n            expert_id = 3 # Default to helpful assistant\n\n        thinking, answer = expert_agents[expert_id]([taskInfo], cot_instruction)\n        return answer\n",
        "api_calls": 4,
        "structure_label": "Single-Pass Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (9.4%, 21.9%), Median: 15.6%"
    },
    {
        "thought": "**Insights:**\nTo further optimize the implementation, we can structure the instruction and task input more effectively, allowing the agent to derive principles and solutions in one go without compromising clarity.\n\n**Overall Idea:**\nThe architecture will keep the single-agent approach while enhancing the instruction to guide the agent through both understanding the principles and applying them in the solution in a coherent manner.\n\n**Implementation:**\n1. Define a comprehensive input that combines task information with the detailed instruction in one go.\n2. Instantiate the single LLM agent.\n3. Call the agent with the combined input and return the agent\u2019s response directly.",
        "name": "Abstraction in Math Problem Solving",
        "code": "def forward(self, taskInfo):\n    # Detailed instruction combining principles and task\n    combined_input = (f\"Given the task: {taskInfo.content}, first identify the high-level principles involved in the solution, such as arithmetic rules, properties of numbers, or logical reasoning.\"\n    \" Then, using these principles, think step-by-step to provide a detailed solution.\")\n    \n    # Instantiate a single LLM agent to handle both tasks\n    combined_agent = LLMAgentBase(['thinking', 'answer'], 'Combined Principle and Solution Agent')\n    \n    # Call the agent with the combined input\n    thinking, answer = combined_agent([taskInfo], combined_input)\n    \n    return answer",
        "fitness": "95% Bootstrap Confidence Interval: (14.8%, 28.9%), Median: 21.9%",
        "generation": 1,
        "api_calls": 1,
        "structure_label": "Abstraction-Based Reasoning"
    },
    {
        "thought": "**Insights:**\nTo enhance the effectiveness of the reasoning process in solving math problems, we should enable the model to explore multiple reasoning pathways without exceeding API call limits. This also involves reinforcing the connection between high-level principles and their application to specific problems.\n\n**Overall Idea:**\nIntroduce a framework that allows the model to generate diverse reasoning paths based on principles identified in the problem. This could involve structuring the instruction to solicit multiple strategies in one call, ensuring depth without unnecessary complexity.\n\n**Implementation:**\n1. Create an instruction that prompts the model to identify high-level principles related to the task and then apply a minimum of two distinct reasoning methods based on those principles in a single agent call.\n2. The implementation should focus on encouraging multiple reasoning pathways, which still fits within a single API call while maximizing the output's depth.",
        "name": "Diverse Pathway Reasoning",
        "code": "def forward(self, taskInfo):\n    # Instruction for identifying principles and generating multiple reasoning pathways\n    combined_instruction = (f\"Given the task: {taskInfo.content}, first identify the key mathematical principles relevant to solving this problem, such as arithmetic operations, relationships between quantities, and logical reasoning. Then, apply at least two distinct reasoning strategies based on these principles to arrive at a solution.\")\n    \n    # Instantiate a single LLM agent to handle the combined reasoning tasks\n    reasoning_agent = LLMAgentBase(['thinking', 'answer'], 'Diverse Pathway Reasoning Agent')\n    \n    # Call the agent with the combined instruction and get the output\n    output_infos = reasoning_agent([taskInfo], combined_instruction)\n    \n    # Return the answer directly from the output\n    return output_infos[1]",
        "fitness": "95% Bootstrap Confidence Interval: (17.2%, 32.0%), Median: 24.2%",
        "generation": 2,
        "api_calls": 1,
        "structure_label": "Parallel Ensemble Reasoning"
    },
    {
        "thought": "**Insights:**\nTo enhance the architecture while adhering to the API call limits, I propose a new structure that merges the reflection on previous answers with the generation of new solutions into a single call. This will consolidate the reasoning process, allowing the model to consider past attempts and generate diverse strategies based on them without exceeding API limits.\n\n**Overall Idea:**\nThe agent will generate an initial answer and reflect upon it in a single call. The model will be instructed to build from previous attempts and apply multiple reasoning strategies in one go, thus reducing unnecessary overhead and increasing coherence in the output.\n\n**Implementation:**\n1. Create an instruction that prompts the model to reflect on its previous answers while generating a new response based on that reflection.\n2. Use a single LLMAgentBase instance to conduct both the initial reasoning and the iterative reflection and enhancement.\n3. This approach allows for both the identification of principles and the generation of multiple strategies in a seamless manner, ensuring fewer API calls.",
        "name": "Reflective Cohesion",
        "code": "def forward(self, taskInfo):\n    # Instruction for generating a cohesive response while reflecting on previous insights\n    combined_instruction = (f\"Given the task: {taskInfo.content}, first identify the key mathematical principles relevant to solving this problem. Generate an initial solution and then reflect on it to identify areas of improvement while applying at least two distinct reasoning strategies to enhance the solution.\")\n    \n    # Instantiate a single LLM agent to handle both tasks\n    reasoning_agent = LLMAgentBase(['thinking', 'answer'], 'Reflective Cohesion Agent')\n    \n    # Call the agent with the combined instruction and get the output\n    output_infos = reasoning_agent([taskInfo], combined_instruction)\n    \n    # Return the final answer directly from the output\n    return output_infos[1]",
        "fitness": "95% Bootstrap Confidence Interval: (14.8%, 28.9%), Median: 21.9%",
        "generation": 3,
        "api_calls": 1,
        "structure_label": "Single-Pass Reasoning"
    },
    {
        "thought": "**Insights:**\nTo create a more engaging architecture, it is essential to focus on direct problem-solving and the exploration of multiple reasoning pathways simultaneously, without excessive reliance on reflection. This can allow for a more thorough understanding and effective application of mathematical principles.\n\n**Overall Idea:**\nThe revised design will prompt the model to identify key principles and apply multiple reasoning strategies within the same instruction, generating a more comprehensive answer that leverages both direct problem-solving and diverse reasoning.\n\n**Implementation:**\n1. Craft a unified instruction that asks the LLM to identify key principles and apply at least two distinct reasoning strategies in deriving a solution.\n2. Use a single instance of LLMAgentBase to process this instruction, ensuring it includes the principles and the application of reasoning strategies in one call. This design is aimed at maximizing the efficacy of the model's reasoning while still fitting within the API call limits.",
        "name": "Diverse Reasoning Application",
        "code": "def forward(self, taskInfo):\n    # Unified instruction that combines identifying principles and generating a solution using multiple reasoning strategies\n    combined_instruction = (f\"Given the task: {taskInfo.content}, first identify the key mathematical principles relevant to solving this problem. Then, apply at least two distinct reasoning strategies based on these principles to derive the solution step-by-step.\")\n    \n    # Instantiate a single LLM agent to handle both tasks\n    reasoning_agent = LLMAgentBase(['thinking', 'answer'], 'Diverse Reasoning Agent')\n    \n    # Call the agent with the combined instruction and obtain the output\n    output_infos = reasoning_agent([taskInfo], combined_instruction)\n    \n    # Directly return the answer from the output\n    return output_infos[1] if output_infos else Info('answer', 'Diverse Reasoning Agent', 'No answer generated.', 0)",
        "fitness": "95% Bootstrap Confidence Interval: (10.2%, 23.4%), Median: 16.4%",
        "generation": 4,
        "api_calls": 1,
        "structure_label": "Single-Pass Reasoning"
    },
    {
        "thought": "**Insights:**\nTo enhance the performance of the architecture, I will focus on consolidating multiple steps into fewer API calls. This will not only help stay within the API limits but also ensure that the output is robust and well-informed through self-assessment. The new approach will combine the generation of diverse answers and their critique into a single iterative loop, refining them based on feedback without exceeding the API call limit.\n**Overall Idea:**\nThe agent will generate diverse solutions, critique them in a single loop, and then refine the best answer iteratively, enhancing the process while reducing API calls.\n**Implementation:**\n1. Generate multiple diverse initial solutions in a single call.\n2. Critique all solutions together, accumulating insights in one step.\n3. Refine the best answer based on the critiques and provide a final output.",
        "name": "Diverse Iterative Refinement",
        "code": "def forward(self, taskInfo):\n    # Unified instruction for generating diverse answers and critiquing them\n    combined_instruction = (f\"Given the task: {taskInfo.content}, first think step by step and generate multiple diverse solutions. Then, critique each solution, identifying strengths and weaknesses in your reasoning.\")\n    \n    # Instantiate a single LLM agent to handle all tasks\n    iterative_agent = LLMAgentBase([\"thinking\", \"answer\"], \"Iterative Evaluation Agent\")\n    \n    # Call the agent with the combined instruction and obtain the output\n    output_infos = iterative_agent([taskInfo], combined_instruction)\n    \n    # Return the final answer from the output\n    return output_infos[1]",
        "fitness": "95% Bootstrap Confidence Interval: (13.3%, 27.3%), Median: 20.3%",
        "generation": 5,
        "api_calls": 1,
        "structure_label": "Iterative Refinement"
    }
]