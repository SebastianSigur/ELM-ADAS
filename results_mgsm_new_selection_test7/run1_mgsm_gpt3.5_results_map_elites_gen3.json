{
    "Linear Chain-of-Thought,0": {
        "thought": "By encouraging the LLM to think step by step rather than directly outputting an answer, chain-of-thought reasoning enables complex problem-solving through intermediate steps. This practice improves the model's ability to handle tasks that require deeper reasoning and provides insight into its decision-making process.",
        "name": "Chain-of-Thought",
        "code": "def forward(self, taskInfo):\n    # Instruction for the Chain-of-Thought (CoT) approach\n    # It is an important practice that allows the LLM to think step by step before solving the task.\n    cot_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instantiate a new LLM agent specifically for CoT\n    # To allow LLM thinking before answering, we need to set an additional output field 'thinking'.\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Prepare the inputs for the CoT agent\n    # The input should be a list of Info, and the first one is often the taskInfo\n    cot_agent_inputs = [taskInfo]\n\n    # Get the response from the CoT agent\n    thinking, answer = cot_agent(cot_agent_inputs, cot_instruction)\n\n    # Return only the final answer\n    return answer\n",
        "api_calls": 1,
        "structure_label": "Linear Chain-of-Thought",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (12.5%, 26.6%), Median: 19.5%"
    },
    "Linear Chain-of-Thought,1": null,
    "Iterative Refinement,0": {
        "thought": "**Insights:**\nTo create a more effective architecture, I propose integrating a feedback loop that maintains a single call to the agent while allowing for iterative adjustments based on previously generated answers. This architecture will leverage the principles while ensuring compliance with the API call limits by utilizing a single reasoning agent and avoiding multiple calls within loops.\n**Overall Idea:**\nThe new structure will extract principles and use them iteratively to refine the response based on an evaluation of the answer quality. It will merge the reasoning and feedback phases into one continuous process, ensuring adherence to the limits while retaining innovative aspects in the approach.\n**Implementation:**\n1. Extract principles and solve the task in a single step while capturing feedback on answer quality.\n2. Utilize a single instance of the reasoning agent to process the task and principles, with a built-in evaluation mechanism to determine if further refinement is needed.\n3. Implement a loop that only allows for re-evaluation based on the previous result, ensuring minimal API calls.",
        "name": "Feedback-Enhanced Principle Reasoning",
        "code": "def forward(self, taskInfo):\n    # Instruction for combining principle extraction and task solving\n    instruction = \"Identify and explain the high-level mathematical principles relevant to this problem. Then, think step by step to solve the task using these principles.\"\n    agent = LLMAgentBase([\"thinking\", \"answer\"], \"Integrated Principle and Reasoning Agent\")\n\n    # Generate an initial response\n    thinking, answer = agent([taskInfo], instruction)  # 1 call\n\n    # Simple quality check for the answer (this can be improved based on actual requirements)\n    def is_satisfactory(answer):\n        return isinstance(answer.content, str) and len(answer.content) > 10  # Example check: answer must be a string longer than 10 characters\n\n    # Attempt to refine the answer if needed\n    for _ in range(2):  # Allow for 2 more refinements\n        if is_satisfactory(answer):  # Placeholder for satisfaction check\n            return answer  # Return the satisfactory answer\n        # Here, we can re-evaluate by modifying the input to reinforce the prior response\n        thinking, answer = agent([taskInfo, answer], instruction)  # Re-use the agent for re-evaluation, still counting as 1 call\n\n    # If no satisfactory answer is found after max attempts, return the last answer.\n    return answer  # Final output after iterations.",
        "fitness": "95% Bootstrap Confidence Interval: (17.2%, 32.0%), Median: 24.2%",
        "generation": 3,
        "api_calls": 3,
        "structure_label": "Iterative Refinement"
    },
    "Iterative Refinement,1": {
        "thought": "To enhance its performance, an LLM can iteratively improve its answer based on feedback. By reflecting on its previous attempts and incorporating feedback, the model can refine its reasoning and provide a more accurate solution.",
        "name": "Self-Refine (Reflexion)",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    cot_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for reflecting on previous attempts and feedback to improve\n    cot_reflect_instruction = \"Given previous attempts and feedback, carefully consider where you could go wrong in your latest attempt. Using insights from previous attempts, try to solve the task better.\"\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Instruction for providing feedback and correcting the answer\n    critic_instruction = \"Please review the answer above and criticize on where might be wrong. If you are absolutely sure it is correct, output 'True' in 'correct'.\"\n    critic_agent = LLMAgentBase(['feedback', 'correct'], 'Critic Agent')\n    \n    N_max = 5 # Maximum number of attempts\n\n    # Initial attempt\n    cot_inputs = [taskInfo]\n    thinking, answer = cot_agent(cot_inputs, cot_initial_instruction, 0)\n\n    for i in range(N_max):\n        # Get feedback and correct status from the critic\n        feedback, correct = critic_agent([taskInfo, thinking, answer], critic_instruction, i)\n        if correct.content == 'True':\n            break\n            \n        # Add feedback to the inputs for the next iteration\n        cot_inputs.extend([thinking, answer, feedback])\n\n        # Reflect on previous attempts and refine the answer\n        thinking, answer = cot_agent(cot_inputs, cot_reflect_instruction, i + 1)\n    return answer\n",
        "api_calls": 10,
        "structure_label": "Iterative Refinement",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (12.5%, 25.8%), Median: 18.8%"
    },
    "Tree-of-Thought,0": null,
    "Tree-of-Thought,1": null,
    "Decompositional Reasoning,0": {
        "thought": "Similar to Auto-GPT and expert prompting, we can use dynamic control flow in the design to let the agent decide what expert we should use.",
        "name": "Dynamic Assignment of Roles",
        "code": "def forward(self, taskInfo):\n        # Instruction for step-by-step reasoning\n        cot_instruction = \"Please think step by step and then solve the task.\"\n        expert_agents = [LLMAgentBase(['thinking', 'answer'], 'Expert Agent', role=role) for role in ['Math Professor', 'Grade School Teacher', 'Math Enthusiast', 'Helpful Assistant']]\n\n        # Instruction for routing the task to the appropriate expert\n        routing_instruction = \"Given the task, please choose an Expert to answer the question. Choose from: Math Professor, Grade School Teacher, Math Enthusiast.\"\n        routing_agent = LLMAgentBase(['choice'], 'Routing agent')\n\n        # Get the choice of expert to route the task\n        choice = routing_agent([taskInfo], routing_instruction)[0]\n\n        if 'professor' in choice.content.lower():\n            expert_id = 0\n        elif 'teacher' in choice.content.lower():\n            expert_id = 1\n        elif 'enthusiast' in choice.content.lower():\n            expert_id = 2\n        else:\n            expert_id = 3 # Default to helpful assistant\n\n        thinking, answer = expert_agents[expert_id]([taskInfo], cot_instruction)\n        return answer\n",
        "api_calls": 6,
        "structure_label": "Decompositional Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (5.5%, 16.4%), Median: 10.9%"
    },
    "Decompositional Reasoning,1": null,
    "Multi-Agent Reasoning,0": {
        "thought": "**Insights:**\nThe need for enhanced flexibility and adaptability in reasoning agents based on extracted principles is crucial for improving performance on complex tasks. Current methods often lack this adaptability, which can lead to less effective solutions.\n\n**Overall Idea:**\nA new architecture could involve a feedback mechanism where the reasoning agents can adjust their strategies based on the principles extracted, allowing for a more tailored response to the task at hand. This would create a dynamic interaction between principle extraction and reasoning, leading to better performance on mathematical problems.\n\n**Implementation:**\n1. Extract principles with a dedicated agent and allow it to interpret the principles for specific guidance.\n2. Use multiple reasoning agents, but allow them to receive context from the principles to optimize their outputs. This can involve additional API calls to ensure that reasoning agents reflect on the principles accurately.\n3. Finally, implement an aggregation strategy that not only uses majority voting but also considers the confidence of each reasoning agent based on its alignment with the principles.",
        "name": "Dynamic Principles-Based Reasoning",
        "code": "def forward(self, taskInfo):\n    # Step 1: Extract principles from the task\n    principle_instruction = \"Identify and explain the high-level mathematical principles that apply to this problem.\"\n    principle_agent = LLMAgentBase(['thinking', 'principle'], 'Principle Extraction Agent')\n    thinking, principles = principle_agent([taskInfo], principle_instruction)  # 1 call\n\n    # Step 2: Generate reasoning agents and adapt based on principles\n    reasoning_instruction = \"Using the principles identified, think step by step and solve the task.\"\n    N = 3  # Reduced number of reasoning agents for compliance\n    reasoning_agents = [LLMAgentBase(['thinking', 'answer'], 'Reasoning Agent', temperature=0.7) for _ in range(N)]  # 0 calls (instantiation)\n\n    possible_answers = []\n    for agent in reasoning_agents:  # Loop: N iterations x 1 call = N calls\n        thinking, answer = agent([taskInfo, principles], reasoning_instruction)  # 1 call per agent\n        possible_answers.append(answer)\n\n    # Step 3: Majority voting to refine answers\n    from collections import Counter\n    def majority_voting(answers):\n        return Counter(answers).most_common(1)[0][0]\n\n    final_answer = majority_voting([ans.content for ans in possible_answers])  # Final aggregation\n    return final_answer  # Return the final answer",
        "fitness": "95% Bootstrap Confidence Interval: (13.3%, 27.3%), Median: 20.3%",
        "generation": 1,
        "api_calls": 4,
        "structure_label": "Multi-Agent Reasoning"
    },
    "Multi-Agent Reasoning,1": {
        "thought": "Similar to Quality-Diversity methods, let LLM generate multiple diverse interesting solutions could help. By encouraging the model to explore different reasoning paths, we can increase the chances of finding the best solution.",
        "name": "Quality-Diversity",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    cot_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for giving diverse answers\n    qd_instruction = \"Given previous attempts, try to come up with another interesting way to solve the task.\"\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Instruction for final decision-making based on collected reasoning and answers\n    final_decision_instruction = \"Given all the above solutions, reason over them carefully and provide a final answer.\"\n    final_decision_agent = LLMAgentBase(['thinking', 'answer'], 'Final Decision Agent', temperature=0.1)\n    \n    N_max = 3 # Maximum number of attempts\n\n    # Initial attempt\n    cot_inputs = [taskInfo]\n    possible_answers = []\n    thinking, answer = cot_agent(cot_inputs, cot_initial_instruction, 0)\n\n    # Add the answer to the list of possible answers\n    possible_answers.extend([thinking, answer])\n\n    for i in range(N_max):\n        # Reflect on previous attempts and generate another interesting answer\n        cot_inputs.extend([thinking, answer])\n\n        # Generate another interesting answer\n        thinking, answer = cot_agent(cot_inputs, qd_instruction, i + 1)\n        possible_answers.extend([thinking, answer])\n\n    # Make the final decision based on all generated answers\n    thinking, answer = final_decision_agent([taskInfo] + possible_answers, final_decision_instruction)\n    return answer\n",
        "api_calls": 8,
        "structure_label": "Multi-Agent Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (50.0%, 67.2%), Median: 58.6%"
    },
    "Abstraction to Principles Reasoning,0": {
        "thought": "Let LLM first think about the principles involved in solving this task which could be helpful. By understanding the underlying principles, the model can better reason through the problem and provide a more accurate solution.",
        "name": "Step-back Abstraction",
        "code": "def forward(self, taskInfo):\n        # Instruction for understanding the principles involved in the task\n        principle_instruction = \"What are the physics, chemistry or biology principles and concepts involved in solving this task? First think step by step. Then list all involved principles and explain them.\"\n        \n        # Instruction for solving the task based on the principles\n        cot_instruction = \"Given the question and the involved principle behind the question, think step by step and then solve the task.\"\n        \n        # Instantiate LLM agents\n        principle_agent = LLMAgentBase(['thinking', 'principle'], 'Principle Agent')\n        cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n        \n        # Get the principles involved in the task\n        thinking, principle = principle_agent([taskInfo], principle_instruction)\n\n        # Use the principles to solve the task\n        thinking, answer = cot_agent([taskInfo, thinking, principle], cot_instruction)\n        return answer\n",
        "api_calls": 4,
        "structure_label": "Abstraction to Principles Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (15.6%, 30.5%), Median: 22.7%"
    },
    "Abstraction to Principles Reasoning,1": null
}