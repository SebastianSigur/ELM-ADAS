{
    "Linear Chain-of-Thought,0": {
        "thought": "By encouraging the LLM to think step by step rather than directly outputting an answer, chain-of-thought reasoning enables complex problem-solving through intermediate steps. This practice improves the model's ability to handle tasks that require deeper reasoning and provides insight into its decision-making process.",
        "name": "Chain-of-Thought",
        "code": "def forward(self, taskInfo):\n    # Instruction for the Chain-of-Thought (CoT) approach\n    # It is an important practice that allows the LLM to think step by step before solving the task.\n    cot_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instantiate a new LLM agent specifically for CoT\n    # To allow LLM thinking before answering, we need to set an additional output field 'thinking'.\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Prepare the inputs for the CoT agent\n    # The input should be a list of Info, and the first one is often the taskInfo\n    cot_agent_inputs = [taskInfo]\n\n    # Get the response from the CoT agent\n    thinking, answer = cot_agent(cot_agent_inputs, cot_instruction)\n\n    # Return only the final answer\n    return answer\n",
        "api_calls": 1,
        "structure_label": "Linear Chain-of-Thought",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (63.6%, 67.8%), Median: 76.5%"
    },
    "Linear Chain-of-Thought,1": null,
    "Iterative Refinement,0": {
        "thought": "**Insights:**\nThe previous architecture effectively combines principles identification with answer generation but lacks depth in reasoning. By introducing iterative refinement, we can enhance the reasoning process through multiple evaluations. \n**Overall Idea:**\nThe new architecture will incorporate a two-step iterative refinement process where the model first generates an initial answer and then refines it through a feedback loop, which will lead to a more accurate and coherent solution.\n**Implementation:**\n1. Generate an initial answer based on the task information. \n2. Refine the answer in a single call that aggregates feedback for improvement, promoting a deeper understanding of the task.",
        "name": "Iterative Feedback Refinement",
        "code": "def forward(self, taskInfo):\n    # Initial instruction for generating an answer\n    initial_instruction = \"Based on the passage, generate an initial answer to the question posed.\"\n    \n    # Instantiate the LLM agent for the initial answer\n    initial_agent = LLMAgentBase(['thinking', 'answer'], 'Initial Answer Agent')\n    \n    # Get the initial answer\n    thinking, initial_answer = initial_agent([taskInfo], initial_instruction)\n    \n    # Instruction for refining the answer\n    refine_instruction = \"Evaluate the initial answer and suggest improvements based on the content.\"\n    \n    # Make a single call to refine the answer\n    refinement_agent = LLMAgentBase(['thinking', 'refined_answer'], 'Refinement Agent')\n    refined_thinking, refined_answer = refinement_agent([taskInfo, initial_answer], refine_instruction)  # 1 call\n    \n    return refined_answer  # Total: 2 API calls",
        "fitness": "95% Bootstrap Confidence Interval: (38.6%, 43.5%), Median: 53.6%",
        "generation": 3,
        "api_calls": 2,
        "structure_label": "Iterative Refinement"
    },
    "Iterative Refinement,1": {
        "thought": "To enhance its performance, an LLM can iteratively improve its answer based on feedback. By reflecting on its previous attempts and incorporating feedback, the model can refine its reasoning and provide a more accurate solution.",
        "name": "Self-Refine (Reflexion)",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    cot_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for reflecting on previous attempts and feedback to improve\n    cot_reflect_instruction = \"Given previous attempts and feedback, carefully consider where you could go wrong in your latest attempt. Using insights from previous attempts, try to solve the task better.\"\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Instruction for providing feedback and correcting the answer\n    critic_instruction = \"Please review the answer above and criticize on where might be wrong. If you are absolutely sure it is correct, output 'True' in 'correct'.\"\n    critic_agent = LLMAgentBase(['feedback', 'correct'], 'Critic Agent')\n    \n    N_max = 5 # Maximum number of attempts\n\n    # Initial attempt\n    cot_inputs = [taskInfo]\n    thinking, answer = cot_agent(cot_inputs, cot_initial_instruction, 0)\n\n    for i in range(N_max):\n        # Get feedback and correct status from the critic\n        feedback, correct = critic_agent([taskInfo, thinking, answer], critic_instruction, i)\n        if correct.content == 'True':\n            break\n            \n        # Add feedback to the inputs for the next iteration\n        cot_inputs.extend([thinking, answer, feedback])\n\n        # Reflect on previous attempts and refine the answer\n        thinking, answer = cot_agent(cot_inputs, cot_reflect_instruction, i + 1)\n    return answer\n",
        "api_calls": 10,
        "structure_label": "Iterative Refinement",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (63.9%, 68.2%), Median: 76.8%"
    },
    "Tree-of-Thought,0": null,
    "Tree-of-Thought,1": null,
    "Decompositional Reasoning,0": null,
    "Decompositional Reasoning,1": {
        "thought": "Similar to Auto-GPT and expert prompting, we can use dynamic control flow in the design to let the agent decide what expert we should use.",
        "name": "Dynamic Assignment of Roles",
        "code": "def forward(self, taskInfo):\n        # Instruction for step-by-step reasoning\n        cot_instruction = \"Please think step by step and then solve the task.\"\n        expert_agents = [LLMAgentBase(['thinking', 'answer'], 'Expert Agent', role=role) for role in ['Reading Comprehension Specialist', 'Logical Reasoning Strategist', 'Multidisciplinary Knowledge Integrator', 'Helpful Assistant']]\n\n        # Instruction for routing the task to the appropriate expert\n        routing_instruction = \"Given the task, please choose an Expert to answer the question. Choose from: Reading Comprehension Specialist, Logical Reasoning Strategist, and Multidisciplinary Knowledge Integrator.\"\n        routing_agent = LLMAgentBase(['choice'], 'Routing agent')\n\n        # Get the choice of expert to route the task\n        choice = routing_agent([taskInfo], routing_instruction)[0]\n\n        if 'specialist' in choice.content.lower():\n            expert_id = 0\n        elif 'strategist' in choice.content.lower():\n            expert_id = 1\n        elif 'integrator' in choice.content.lower():\n            expert_id = 2\n        else:\n            expert_id = 3 # Default to helpful assistant\n\n        thinking, answer = expert_agents[expert_id]([taskInfo], cot_instruction)\n        return answer\n",
        "api_calls": 6,
        "structure_label": "Decompositional Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (64.1%, 68.4%), Median: 77.0%"
    },
    "Multi-Agent Reasoning,0": {
        "thought": "**Insights:**\nTo enhance the architecture, I propose generating multiple relevant principles and allowing two agents to explore distinct reasoning paths based on these principles. This approach would leverage the strengths of the Tree-of-Thought framework and provide richer, more nuanced answers.\n\n**Overall Idea:**\nThe updated implementation will include an additional reasoning agent to explore different aspects of the task using the principles generated, while also incorporating a structured evaluation of responses to determine the best option.\n\n**Implementation:**\n1. Use a dedicated agent to identify and elaborate on key principles relevant to the task.\n2. Instantiate two distinct reasoning agents, each tasked with addressing different aspects of the passage based on the principles identified.\n3. Collect and evaluate answers from both agents using a comparative mechanism to ensure a robust final output.",
        "name": "Divergent Principle Reasoning",
        "code": "def forward(self, taskInfo):\n    # Instruction to identify relevant principles for the task\n    principle_instruction = \"Identify key demographic principles from the passage and elaborate on each.\"\n    \n    # Instantiate LLM agent for principles\n    principle_agent = LLMAgentBase([\"thinking\", \"principle\"], \"Principle Agent\")  # 1 agent\n    # Generate the principles involved in the task\n    principle_thinking, principles = principle_agent([taskInfo], principle_instruction)  # 1 API Call\n    \n    # Instruction for reasoning based on identified principles, focusing on exploring different reasoning paths\n    reasoning_instruction = \"Using the identified principles, think step by step to derive answers from both perspectives.\"\n    \n    # Instantiate two reasoning agents for divergent paths\n    reasoning_agent1 = LLMAgentBase([\"thinking\", \"answer\"], \"Reasoning Agent 1\")  # 2nd agent\n    reasoning_agent2 = LLMAgentBase([\"thinking\", \"answer\"], \"Reasoning Agent 2\")  # 3rd agent\n    \n    # Apply the reasoning strategies to derive answers\n    response1 = reasoning_agent1([taskInfo, principles], reasoning_instruction)  # 2nd API Call\n    response2 = reasoning_agent2([taskInfo, principles], reasoning_instruction)  # 3rd API Call\n    \n    # Collect answers from both agents\n    responses = [response1, response2]  # Collect Info objects\n    \n    # Evaluate answers based on the content\n    all_answers = []\n    for response in responses:\n        if isinstance(response, list):\n            all_answers.extend([r.content for r in response])  # Extract content from each Info if it's a list\n        else:\n            all_answers.append(response.content)  # Directly append if it's a single Info object\n    \n    # Determine the best answer\n    if all_answers:\n        final_answer = max(set(all_answers), key=all_answers.count)\n    else:\n        final_answer = 'No valid response.'  # Default response\n    \n    # Return wrapped in Info\n    return Info('answer', 'Final Decision Agent', final_answer, 0)",
        "fitness": "95% Bootstrap Confidence Interval: (49.1%, 53.9%), Median: 63.5%",
        "generation": 11,
        "api_calls": 3,
        "structure_label": "Multi-Agent Reasoning"
    },
    "Multi-Agent Reasoning,1": {
        "thought": "**Insights:**\nThe architecture lacks the depth and variety in reasoning that could lead to a more comprehensive exploration of the task. By integrating multiple agents that operate in parallel, we can take advantage of diverse reasoning approaches and ensure a more thorough evaluation of possible answers.\n**Overall Idea:**\nThis new architecture will introduce a multi-agent system utilizing the Tree-of-Thought structure. Each agent will provide a unique interpretation of the task and contribute to a final consensus-based answer. This approach will lead to more than five API calls, fulfilling the requirement for many API calls.\n**Implementation:**\n1. Define an instruction for the agents to analyze the task from various angles.\n2. Instantiate multiple agents, each tasked with generating a different response based on the same input information.\n3. Collect the responses to evaluate them collectively and decide on the final output based on the majority or most confident response.",
        "name": "Multi-Agent Tree-of-Thought",
        "code": "def forward(self, taskInfo):\n    # Instruction for multi-agent reasoning\n    instruction = \"Analyze the task from different perspectives and generate a unique response.\"\n    \n    # Instantiate multiple agents for diverse reasoning paths\n    agents = [LLMAgentBase(['thinking', 'answer'], f'Multi-Agent {i}') for i in range(6)]  # 0 calls (instantiation)\n    \n    # Initialize lists to hold answers\n    answers = []\n    \n    # Call each agent for a unique reasoning path\n    for agent in agents:\n        _, answer = agent([taskInfo], instruction)  # 6 calls (1 per agent)\n        answers.append(answer)\n    \n    # Determine the most frequent answer as the final response\n    final_answer = max(set(answers), key=answers.count)  # Simple majority vote for demonstration\n    \n    return final_answer  # Total: 6 API calls",
        "fitness": "95% Bootstrap Confidence Interval: (56.9%, 61.8%), Median: 71.0%",
        "generation": 4,
        "api_calls": 6,
        "structure_label": "Multi-Agent Reasoning"
    },
    "Abstraction to Principles Reasoning,0": {
        "thought": "Let LLM first think about the principles involved in solving this task which could be helpful. By understanding the underlying principles, the model can better reason through the problem and provide a more accurate solution.",
        "name": "Step-back Abstraction",
        "code": "def forward(self, taskInfo):\n        # Instruction for understanding the principles involved in the task\n        principle_instruction = \"What are the physics, chemistry or biology principles and concepts involved in solving this task? First think step by step. Then list all involved principles and explain them.\"\n        \n        # Instruction for solving the task based on the principles\n        cot_instruction = \"Given the question and the involved principle behind the question, think step by step and then solve the task.\"\n        \n        # Instantiate LLM agents\n        principle_agent = LLMAgentBase(['thinking', 'principle'], 'Principle Agent')\n        cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n        \n        # Get the principles involved in the task\n        thinking, principle = principle_agent([taskInfo], principle_instruction)\n\n        # Use the principles to solve the task\n        thinking, answer = cot_agent([taskInfo, thinking, principle], cot_instruction)\n        return answer\n",
        "api_calls": 4,
        "structure_label": "Abstraction to Principles Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (64.7%, 68.9%), Median: 77.4%"
    },
    "Abstraction to Principles Reasoning,1": null
}