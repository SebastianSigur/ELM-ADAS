{
    "Linear Chain-of-Thought,0": {
        "thought": "By encouraging the LLM to think step by step rather than directly outputting an answer, chain-of-thought reasoning enables complex problem-solving through intermediate steps. This practice improves the model's ability to handle tasks that require deeper reasoning and provides insight into its decision-making process.",
        "name": "Chain-of-Thought",
        "code": "def forward(self, taskInfo):\n    # Instruction for the Chain-of-Thought (CoT) approach\n    # It is an important practice that allows the LLM to think step by step before solving the task.\n    cot_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instantiate a new LLM agent specifically for CoT\n    # To allow LLM thinking before answering, we need to set an additional output field 'thinking'.\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Prepare the inputs for the CoT agent\n    # The input should be a list of Info, and the first one is often the taskInfo\n    cot_agent_inputs = [taskInfo]\n\n    # Get the response from the CoT agent\n    thinking, answer = cot_agent(cot_agent_inputs, cot_instruction)\n\n    # Return only the final answer\n    return answer\n",
        "api_calls": 1,
        "structure_label": "Linear Chain-of-Thought",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (63.6%, 67.8%), Median: 76.5%"
    },
    "Linear Chain-of-Thought,1": null,
    "Iterative Refinement,0": {
        "thought": "**Insights:**\nTo improve upon the current architecture, I propose integrating an iterative refinement process that allows the agent to refine its answer based on its own reasoning. This creates a feedback mechanism that enhances accuracy without increasing the number of API calls. \n\n**Overall Idea:**\nThe revised implementation will utilize one agent to generate an initial answer and then refine that answer iteratively based on self-assessment, effectively creating a more accurate and robust solution. This approach allows for the extraction of insights and justifications that can guide the refinement process.\n\n**Implementation:**\n1. Use a single LLMAgentBase instance to generate the initial response based on the task information.\n2. Introduce a feedback mechanism that prompts the same agent to evaluate its generated answer and suggest improvements, allowing for an iterative refinement process.\n3. Set a maximum iteration limit to prevent excessive processing while ensuring the outcome is both accurate and coherent.",
        "name": "Iterative Principle Refinement",
        "code": "def forward(self, taskInfo):\n    # Instruction to identify key principles and derive a single answer clearly\n    instruction = \"Carefully read the passage and identify the key demographic principles. Based on these principles, answer the question clearly and concisely.\"\n    \n    # Create a single agent for processing\n    agent = LLMAgentBase([\"thinking\", \"answer\"], \"Iterative Refinement Agent\")  # 1 agent\n    \n    # Generate the initial answer\n    initial_thinking, answer = agent([taskInfo], instruction)  # 1 API Call\n    \n    # Initialize iteration control variables\n    max_iterations = 3\n    refined_answer = answer\n    \n    # Create feedback instruction\n    feedback_instruction = \"Evaluate the following answer and suggest improvements, if necessary:\"\n    \n    # Feedback loop for refining the answer\n    for _ in range(max_iterations):\n        # Evaluate the quality of the answer and refine it in one API call\n        refined_thinking, refined_answer = agent([taskInfo, refined_answer, feedback_instruction], 'Refine the answer based on feedback.')  # 1 API Call\n    \n    return refined_answer  # Return the final refined answer after iterations",
        "fitness": "95% Bootstrap Confidence Interval: (59.6%, 64.2%), Median: 73.2%",
        "generation": 13,
        "api_calls": 4,
        "structure_label": "Iterative Refinement"
    },
    "Iterative Refinement,1": {
        "thought": "To enhance its performance, an LLM can iteratively improve its answer based on feedback. By reflecting on its previous attempts and incorporating feedback, the model can refine its reasoning and provide a more accurate solution.",
        "name": "Self-Refine (Reflexion)",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    cot_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for reflecting on previous attempts and feedback to improve\n    cot_reflect_instruction = \"Given previous attempts and feedback, carefully consider where you could go wrong in your latest attempt. Using insights from previous attempts, try to solve the task better.\"\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Instruction for providing feedback and correcting the answer\n    critic_instruction = \"Please review the answer above and criticize on where might be wrong. If you are absolutely sure it is correct, output 'True' in 'correct'.\"\n    critic_agent = LLMAgentBase(['feedback', 'correct'], 'Critic Agent')\n    \n    N_max = 5 # Maximum number of attempts\n\n    # Initial attempt\n    cot_inputs = [taskInfo]\n    thinking, answer = cot_agent(cot_inputs, cot_initial_instruction, 0)\n\n    for i in range(N_max):\n        # Get feedback and correct status from the critic\n        feedback, correct = critic_agent([taskInfo, thinking, answer], critic_instruction, i)\n        if correct.content == 'True':\n            break\n            \n        # Add feedback to the inputs for the next iteration\n        cot_inputs.extend([thinking, answer, feedback])\n\n        # Reflect on previous attempts and refine the answer\n        thinking, answer = cot_agent(cot_inputs, cot_reflect_instruction, i + 1)\n    return answer\n",
        "api_calls": 10,
        "structure_label": "Iterative Refinement",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (63.9%, 68.2%), Median: 76.8%"
    },
    "Tree-of-Thought,0": null,
    "Tree-of-Thought,1": null,
    "Decompositional Reasoning,0": null,
    "Decompositional Reasoning,1": {
        "thought": "Similar to Auto-GPT and expert prompting, we can use dynamic control flow in the design to let the agent decide what expert we should use.",
        "name": "Dynamic Assignment of Roles",
        "code": "def forward(self, taskInfo):\n        # Instruction for step-by-step reasoning\n        cot_instruction = \"Please think step by step and then solve the task.\"\n        expert_agents = [LLMAgentBase(['thinking', 'answer'], 'Expert Agent', role=role) for role in ['Reading Comprehension Specialist', 'Logical Reasoning Strategist', 'Multidisciplinary Knowledge Integrator', 'Helpful Assistant']]\n\n        # Instruction for routing the task to the appropriate expert\n        routing_instruction = \"Given the task, please choose an Expert to answer the question. Choose from: Reading Comprehension Specialist, Logical Reasoning Strategist, and Multidisciplinary Knowledge Integrator.\"\n        routing_agent = LLMAgentBase(['choice'], 'Routing agent')\n\n        # Get the choice of expert to route the task\n        choice = routing_agent([taskInfo], routing_instruction)[0]\n\n        if 'specialist' in choice.content.lower():\n            expert_id = 0\n        elif 'strategist' in choice.content.lower():\n            expert_id = 1\n        elif 'integrator' in choice.content.lower():\n            expert_id = 2\n        else:\n            expert_id = 3 # Default to helpful assistant\n\n        thinking, answer = expert_agents[expert_id]([taskInfo], cot_instruction)\n        return answer\n",
        "api_calls": 6,
        "structure_label": "Decompositional Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (64.1%, 68.4%), Median: 77.0%"
    },
    "Multi-Agent Reasoning,0": {
        "thought": "**Insights:**\nTo improve performance, I propose a multi-path reasoning architecture within the Tree-of-Thought framework. This will enable diverse explorations of the task while allowing cross-validation between branches to enhance the final selection process. \n**Overall Idea:**\nThe architecture will generate multiple reasoning agents that explore different aspects of the task simultaneously. Each agent will work on a specific aspect derived from the principles, and their outputs will be evaluated together to select the most coherent and accurate answer. \n**Implementation:**\n1. Use an initial agent to extract key principles, then branch into multiple agents where each agent tackles a sub-question derived from the principles.\n2. Collect outputs and evaluate them based on clarity and relevance, allowing for a more nuanced final answer. \n3. Ensure multiple API calls are made to meet the requirement for 'many API calls'.",
        "name": "Multi-Path Reasoning Agent",
        "code": "def forward(self, taskInfo):\n    # Step 1: Instruction to extract principles from the task\n    principle_instruction = \"Identify the key principles and concepts that are relevant to the task.\"\n    \n    # Step 2: Instantiate LLM agent for principle extraction\n    principle_agent = LLMAgentBase([\"thinking\", \"principles\"], \"Principle Extraction Agent\")\n    \n    # Step 3: Extract principles from taskInfo\n    thinking, principles = principle_agent([taskInfo], principle_instruction)  # 1 API Call\n    \n    # Ensure principles are valid strings\n    principles_str = [str(principle) for principle in principles if principle is not None]  # Filter out None values\n    \n    # Validate if principles were successfully extracted\n    if not principles_str:\n        return \"No valid principles extracted.\"  # Handle case where no principles are found\n    \n    # Step 4: Create reasoning instructions for multiple paths\n    reasoning_instructions = [\n        f\"Using the principle '{principle}', reason through the task and propose a specific solution.\"\n        for principle in principles_str\n    ]  \n    \n    # Step 5: Collect outputs from reasoning in a single agent call\n    answers = []  \n    for instruction in reasoning_instructions:  # Calls will be counted here\n        reasoning_agent = LLMAgentBase([\"thinking\", \"answer\"], \"Reasoning Agent\")\n        # Correctly call the agent with inputs\n        thinking, answer = reasoning_agent([taskInfo], instruction)  # 1 API Call per agent\n        answers.append(answer)  # Collect answers\n    \n    # Step 6: Evaluate the results and select the best answer\n    # Improved selection based on the coherence of each response (using a hypothetical evaluation)\n    final_answer = max(answers, key=lambda x: len(x.content))  # Hypothetical selection based on content length\n    \n    return final_answer",
        "fitness": "95% Bootstrap Confidence Interval: (63.0%, 67.5%), Median: 76.2%",
        "generation": 15,
        "api_calls": 2,
        "structure_label": "Multi-Agent Reasoning"
    },
    "Multi-Agent Reasoning,1": {
        "thought": "**Insights:**\nThe architecture lacks the depth and variety in reasoning that could lead to a more comprehensive exploration of the task. By integrating multiple agents that operate in parallel, we can take advantage of diverse reasoning approaches and ensure a more thorough evaluation of possible answers.\n**Overall Idea:**\nThis new architecture will introduce a multi-agent system utilizing the Tree-of-Thought structure. Each agent will provide a unique interpretation of the task and contribute to a final consensus-based answer. This approach will lead to more than five API calls, fulfilling the requirement for many API calls.\n**Implementation:**\n1. Define an instruction for the agents to analyze the task from various angles.\n2. Instantiate multiple agents, each tasked with generating a different response based on the same input information.\n3. Collect the responses to evaluate them collectively and decide on the final output based on the majority or most confident response.",
        "name": "Multi-Agent Tree-of-Thought",
        "code": "def forward(self, taskInfo):\n    # Instruction for multi-agent reasoning\n    instruction = \"Analyze the task from different perspectives and generate a unique response.\"\n    \n    # Instantiate multiple agents for diverse reasoning paths\n    agents = [LLMAgentBase(['thinking', 'answer'], f'Multi-Agent {i}') for i in range(6)]  # 0 calls (instantiation)\n    \n    # Initialize lists to hold answers\n    answers = []\n    \n    # Call each agent for a unique reasoning path\n    for agent in agents:\n        _, answer = agent([taskInfo], instruction)  # 6 calls (1 per agent)\n        answers.append(answer)\n    \n    # Determine the most frequent answer as the final response\n    final_answer = max(set(answers), key=answers.count)  # Simple majority vote for demonstration\n    \n    return final_answer  # Total: 6 API calls",
        "fitness": "95% Bootstrap Confidence Interval: (56.9%, 61.8%), Median: 71.0%",
        "generation": 4,
        "api_calls": 6,
        "structure_label": "Multi-Agent Reasoning"
    },
    "Abstraction to Principles Reasoning,0": {
        "thought": "Let LLM first think about the principles involved in solving this task which could be helpful. By understanding the underlying principles, the model can better reason through the problem and provide a more accurate solution.",
        "name": "Step-back Abstraction",
        "code": "def forward(self, taskInfo):\n        # Instruction for understanding the principles involved in the task\n        principle_instruction = \"What are the physics, chemistry or biology principles and concepts involved in solving this task? First think step by step. Then list all involved principles and explain them.\"\n        \n        # Instruction for solving the task based on the principles\n        cot_instruction = \"Given the question and the involved principle behind the question, think step by step and then solve the task.\"\n        \n        # Instantiate LLM agents\n        principle_agent = LLMAgentBase(['thinking', 'principle'], 'Principle Agent')\n        cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n        \n        # Get the principles involved in the task\n        thinking, principle = principle_agent([taskInfo], principle_instruction)\n\n        # Use the principles to solve the task\n        thinking, answer = cot_agent([taskInfo, thinking, principle], cot_instruction)\n        return answer\n",
        "api_calls": 4,
        "structure_label": "Abstraction to Principles Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (64.7%, 68.9%), Median: 77.4%"
    },
    "Abstraction to Principles Reasoning,1": null
}