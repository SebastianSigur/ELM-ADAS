[
    {
        "thought": "By encouraging the LLM to think step by step rather than directly outputting an answer, chain-of-thought reasoning enables complex problem-solving through intermediate steps. This practice improves the model's ability to handle tasks that require deeper reasoning and provides insight into its decision-making process.",
        "name": "Chain-of-Thought",
        "code": "def forward(self, taskInfo):\n    # Instruction for the Chain-of-Thought (CoT) approach\n    # It is an important practice that allows the LLM to think step by step before solving the task.\n    cot_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instantiate a new LLM agent specifically for CoT\n    # To allow LLM thinking before answering, we need to set an additional output field 'thinking'.\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Prepare the inputs for the CoT agent\n    # The input should be a list of Info, and the first one is often the taskInfo\n    cot_agent_inputs = [taskInfo]\n\n    # Get the response from the CoT agent\n    thinking, answer = cot_agent(cot_agent_inputs, cot_instruction)\n\n    # Return only the final answer\n    return answer\n",
        "api_calls": 1,
        "structure_label": "Chain-of-Thought Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (10.9%, 24.2%), Median: 17.2%"
    },
    {
        "thought": "While an LLM can arrive at the correct answer, its reasoning may vary. By repeatedly asking the same question with high temperature settings, we can generate different reasoning paths. We then combine multiple answers from these Chain-of-Thought (CoT) agents to produce a more accurate final answer through ensembling.",
        "name": "Self-Consistency with Chain-of-Thought",
        "code": "def forward(self, taskInfo):\n    # Instruction for step-by-step reasoning\n    cot_instruction = \"Please think step by step and then solve the task.\"\n    N = 5 # Number of CoT agents\n\n    # Initialize multiple CoT agents with a higher temperature for varied reasoning\n    cot_agents = [LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent', temperature=0.8) for _ in range(N)]\n\n    # Majority voting function to select the most common answer\n    from collections import Counter\n    def majority_voting(answers):\n        return Counter(answers).most_common(1)[0][0]\n    \n    possible_answers = []\n    for i in range(N):\n        thinking, answer = cot_agents[i]([taskInfo], cot_instruction)\n        possible_answers.append(answer.content)\n\n    # Ensembling the answers from multiple CoT agents\n    answer = majority_voting(possible_answers)\n    return answer  \n",
        "api_calls": 5,
        "structure_label": "Multi-Agent Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (6.2%, 17.2%), Median: 11.7%"
    },
    {
        "thought": "To enhance its performance, an LLM can iteratively improve its answer based on feedback. By reflecting on its previous attempts and incorporating feedback, the model can refine its reasoning and provide a more accurate solution.",
        "name": "Self-Refine (Reflexion)",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    cot_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for reflecting on previous attempts and feedback to improve\n    cot_reflect_instruction = \"Given previous attempts and feedback, carefully consider where you could go wrong in your latest attempt. Using insights from previous attempts, try to solve the task better.\"\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Instruction for providing feedback and correcting the answer\n    critic_instruction = \"Please review the answer above and criticize on where might be wrong. If you are absolutely sure it is correct, output 'True' in 'correct'.\"\n    critic_agent = LLMAgentBase(['feedback', 'correct'], 'Critic Agent')\n    \n    N_max = 5 # Maximum number of attempts\n\n    # Initial attempt\n    cot_inputs = [taskInfo]\n    thinking, answer = cot_agent(cot_inputs, cot_initial_instruction, 0)\n\n    for i in range(N_max):\n        # Get feedback and correct status from the critic\n        feedback, correct = critic_agent([taskInfo, thinking, answer], critic_instruction, i)\n        if correct.content == 'True':\n            break\n            \n        # Add feedback to the inputs for the next iteration\n        cot_inputs.extend([thinking, answer, feedback])\n\n        # Reflect on previous attempts and refine the answer\n        thinking, answer = cot_agent(cot_inputs, cot_reflect_instruction, i + 1)\n    return answer\n",
        "api_calls": 7,
        "structure_label": "Self-Reflection Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (14.8%, 28.9%), Median: 21.9%"
    },
    {
        "thought": "By letting different LLMs debate with each other, we can leverage their diverse perspectives to find better solutions for tasks.",
        "name": "LLM Debate",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    debate_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for debating and updating the solution based on other agents' solutions\n    debate_instruction = \"Given solutions to the problem from other agents, consider their opinions as additional advice. Please think carefully and provide an updated answer.\"\n    \n    # Initialize debate agents with different roles and a moderate temperature for varied reasoning\n    debate_agents = [LLMAgentBase(['thinking', 'answer'], 'Debate Agent', temperature=0.8, role=role) for role in ['Math Professor', 'Grade School Teacher', 'Math Enthusiast']]\n\n    # Instruction for final decision-making based on all debates and solutions\n    final_decision_instruction = \"Given all the above thinking and answers, reason over them carefully and provide a final answer.\"\n    final_decision_agent = LLMAgentBase(['thinking', 'answer'], 'Final Decision Agent', temperature=0.1)\n\n    max_round = 2 # Maximum number of debate rounds\n    all_thinking = [[] for _ in range(max_round)]\n    all_answer = [[] for _ in range(max_round)]\n\n    # Perform debate rounds\n    for r in range(max_round):\n        for i in range(len(debate_agents)):\n            if r == 0:\n                thinking, answer = debate_agents[i]([taskInfo], debate_initial_instruction)\n            else:\n                input_infos = [taskInfo] + [all_thinking[r-1][i]] + all_thinking[r-1][:i] + all_thinking[r-1][i+1:]\n                thinking, answer = debate_agents[i](input_infos, debate_instruction)\n            all_thinking[r].append(thinking)\n            all_answer[r].append(answer)\n    \n    # Make the final decision based on all debate results and solutions\n    thinking, answer = final_decision_agent([taskInfo] + all_thinking[max_round-1] + all_answer[max_round-1], final_decision_instruction)\n    return answer\n",
        "api_calls": 9,
        "structure_label": "Multi-Agent Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (40.6%, 57.8%), Median: 49.2%"
    },
    {
        "thought": "Let LLM first think about the principles involved in solving this task which could be helpful. By understanding the underlying principles, the model can better reason through the problem and provide a more accurate solution.",
        "name": "Step-back Abstraction",
        "code": "def forward(self, taskInfo):\n        # Instruction for understanding the principles involved in the task\n        principle_instruction = \"What are the physics, chemistry or biology principles and concepts involved in solving this task? First think step by step. Then list all involved principles and explain them.\"\n        \n        # Instruction for solving the task based on the principles\n        cot_instruction = \"Given the question and the involved principle behind the question, think step by step and then solve the task.\"\n        \n        # Instantiate LLM agents\n        principle_agent = LLMAgentBase(['thinking', 'principle'], 'Principle Agent')\n        cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n        \n        # Get the principles involved in the task\n        thinking, principle = principle_agent([taskInfo], principle_instruction)\n\n        # Use the principles to solve the task\n        thinking, answer = cot_agent([taskInfo, thinking, principle], cot_instruction)\n        return answer\n",
        "api_calls": 2,
        "structure_label": "Abstraction to Principles Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (14.1%, 28.1%), Median: 21.1%"
    },
    {
        "thought": "Similar to Quality-Diversity methods, let LLM generate multiple diverse interesting solutions could help. By encouraging the model to explore different reasoning paths, we can increase the chances of finding the best solution.",
        "name": "Quality-Diversity",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    cot_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for giving diverse answers\n    qd_instruction = \"Given previous attempts, try to come up with another interesting way to solve the task.\"\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Instruction for final decision-making based on collected reasoning and answers\n    final_decision_instruction = \"Given all the above solutions, reason over them carefully and provide a final answer.\"\n    final_decision_agent = LLMAgentBase(['thinking', 'answer'], 'Final Decision Agent', temperature=0.1)\n    \n    N_max = 3 # Maximum number of attempts\n\n    # Initial attempt\n    cot_inputs = [taskInfo]\n    possible_answers = []\n    thinking, answer = cot_agent(cot_inputs, cot_initial_instruction, 0)\n\n    # Add the answer to the list of possible answers\n    possible_answers.extend([thinking, answer])\n\n    for i in range(N_max):\n        # Reflect on previous attempts and generate another interesting answer\n        cot_inputs.extend([thinking, answer])\n\n        # Generate another interesting answer\n        thinking, answer = cot_agent(cot_inputs, qd_instruction, i + 1)\n        possible_answers.extend([thinking, answer])\n\n    # Make the final decision based on all generated answers\n    thinking, answer = final_decision_agent([taskInfo] + possible_answers, final_decision_instruction)\n    return answer\n",
        "api_calls": 7,
        "structure_label": "Multi-Agent Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (46.1%, 63.3%), Median: 54.7%"
    },
    {
        "thought": "Similar to Auto-GPT and expert prompting, we can use dynamic control flow in the design to let the agent decide what expert we should use.",
        "name": "Dynamic Assignment of Roles",
        "code": "def forward(self, taskInfo):\n        # Instruction for step-by-step reasoning\n        cot_instruction = \"Please think step by step and then solve the task.\"\n        expert_agents = [LLMAgentBase(['thinking', 'answer'], 'Expert Agent', role=role) for role in ['Math Professor', 'Grade School Teacher', 'Math Enthusiast', 'Helpful Assistant']]\n\n        # Instruction for routing the task to the appropriate expert\n        routing_instruction = \"Given the task, please choose an Expert to answer the question. Choose from: Math Professor, Grade School Teacher, Math Enthusiast.\"\n        routing_agent = LLMAgentBase(['choice'], 'Routing agent')\n\n        # Get the choice of expert to route the task\n        choice = routing_agent([taskInfo], routing_instruction)[0]\n\n        if 'professor' in choice.content.lower():\n            expert_id = 0\n        elif 'teacher' in choice.content.lower():\n            expert_id = 1\n        elif 'enthusiast' in choice.content.lower():\n            expert_id = 2\n        else:\n            expert_id = 3 # Default to helpful assistant\n\n        thinking, answer = expert_agents[expert_id]([taskInfo], cot_instruction)\n        return answer\n",
        "api_calls": 4,
        "structure_label": "Multi-Agent Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (9.4%, 21.9%), Median: 15.6%"
    },
    {
        "thought": "**Insights:**\nTo enhance the architecture's ability to solve complex tasks while adhering to API call limits, I propose an architecture that uses simultaneous calls to all expert agents to gather diverse perspectives effectively. This will allow for direct aggregation of results without needing a routing agent.\n\n**Overall Idea:**\nInstead of only routing to a single expert based on a decision, all experts will process the same task in parallel, and their outputs will be aggregated to form a consensus answer. This design minimizes API calls while maximizing the range of insights collected.\n\n**Implementation:**\n1. Initialize all expert agents to work simultaneously.\n2. Each agent will process the same task using a step-by-step instruction.\n3. Collect all answers and implement a simple aggregation mechanism to determine the most common or reliable answer among them.\n4. Ensure the structure maintains minimal API call counts by avoiding redundancy and unnecessary complexity.",
        "name": "Simultaneous Expert Aggregation",
        "code": "def forward(self, taskInfo):\n    # Instruction for step-by-step reasoning\n    cot_instruction = 'Please solve the task step by step and provide a detailed answer.'\n    \n    expert_roles = ['Math Professor', 'Grade School Teacher', 'Math Enthusiast']\n    combined_prompts = []\n    for role in expert_roles:\n        combined_prompts.append(f'Role: {role}\\nTask: {taskInfo.content}\\n{cot_instruction}')\n\n    # Construct single prompt containing all expert roles\n    full_prompt = '\\n\\n'.join(combined_prompts)\n\n    # Make a single API call to process all experts in one go\n    response = LLMAgentBase(['thinking', 'answer'], 'Multi-Expert Aggregator')(full_prompt, 'Provide detailed answers from each expert based on the task.')\n\n    # Extract responses and aggregate them\n    answers = response[1]  # This should have the answers as Info objects\n\n    answer_counts = {}\n    for answer in answers:\n        # Ensure we are dealing with Info objects correctly\n        answer_content = answer.content if hasattr(answer, 'content') else answer\n        answer_counts[answer_content] = answer_counts.get(answer_content, 0) + 1\n\n    # Determine the final answer by finding the most common one\n    final_answer = max(answer_counts, key=answer_counts.get)\n    return Info('answer', self.__repr__(), final_answer, -1)",
        "fitness": "95% Bootstrap Confidence Interval: (0.0%, 0.0%), Median: 0.0%",
        "generation": 2,
        "api_calls": 1,
        "structure_label": "Multi-Agent Reasoning"
    },
    {
        "thought": "**Insights:**\nIn considering the limitations of the simultaneous expert aggregation approach, I propose a slightly modified architecture that maintains the parallel processing of expert agents while integrating a feedback loop for improved consensus. This architecture will first gather answers from the experts and then use the same expert agents to critique and refine the aggregated answer based on their collective feedback.\n\n**Overall Idea:**\nThe revised architecture will involve an initial simultaneous run of all three experts, followed by a critique phase where the same experts will evaluate the aggregated answer for coherence and potential errors. This will allow for both diverse inputs and a critical review process without exceeding API call limits.\n\n**Implementation:**\n1. Initiate simultaneous calls to all expert agents to gather their responses.\n2. Combine the responses and select a preliminary consensus answer.\n3. Utilize the same experts in a second round to critique the consensus answer, providing feedback and refinement.\n4. Return the final answer based on the critique and adjustments made by the expert agents, ensuring improved accuracy through this iterative feedback.",
        "name": "Expert Consensus with Feedback Loop",
        "code": "def forward(self, taskInfo):\n    # Instruction for step-by-step reasoning\n    cot_instruction = 'Please solve the task step by step and provide a detailed answer.'\n    \n    expert_roles = ['Math Professor', 'Grade School Teacher', 'Math Enthusiast']\n    combined_prompts = []\n    for role in expert_roles:\n        combined_prompts.append(f'Role: {role}\\nTask: {taskInfo.content}\\n{cot_instruction}')\n\n    # Construct single prompt containing all expert roles\n    full_prompt = '\\n\\n'.join(combined_prompts)\n\n    # Make a single API call to process all experts in one go\n    response = LLMAgentBase(['thinking', 'answer'], 'Multi-Expert Aggregator')(full_prompt, 'Provide detailed answers from each expert based on the task.')\n\n    # Extract responses and ensure they are Info objects\n    answers = response[1]  # This should have the answers as Info objects\n\n    if not isinstance(answers, list):  # Check if the response is a list\n        return Info('answer', self.__repr__(), 'Error: Expected a list of answers.', -1)\n\n    answer_counts = {}\n    for answer in answers:\n        if isinstance(answer, Info):  # Ensure answer is an Info object\n            answer_content = answer.content\n        else:\n            answer_content = answer  # Fallback in case it is not\n        answer_counts[answer_content] = answer_counts.get(answer_content, 0) + 1\n\n    # Determine preliminary answer by finding the most common one\n    preliminary_answer = max(answer_counts, key=answer_counts.get)\n\n    # Now create new prompts for critique based on the preliminary answer\n    critique_prompts = []\n    for role in expert_roles:\n        critique_prompts.append(f'Role: {role}\\nTask: Critique the following answer: {preliminary_answer}\\nProvide your feedback including potential errors and improvements.')\n\n    # Construct full critique prompt\n    critique_prompt = '\\n\\n'.join(critique_prompts)\n    # Make the critique call with the same agent as before\n    critique_response = LLMAgentBase(['thinking', 'feedback'], 'Critique Aggregator')(critique_prompt, 'Gather feedback from experts on the preliminary answer.')\n\n    # Extract feedback and ensure it is processed correctly\n    final_feedbacks = critique_response[1]\n    refined_answer = preliminary_answer  # Start with the preliminary answer\n\n    if not isinstance(final_feedbacks, list):  # Check if the feedback is a list\n        return Info('answer', self.__repr__(), 'Error: Expected a list of feedback.', -1)\n\n    # Process feedback to refine answer (hypothetical integration)\n    for feedback in final_feedbacks:\n        if isinstance(feedback, Info):  # Ensure feedback is an Info object\n            refined_answer += f'\\nFeedback: {feedback.content}'\n        else:\n            refined_answer += f'\\nFeedback: {feedback}'  # Fallback in case it is not\n\n    return Info('answer', self.__repr__(), refined_answer, -1)",
        "fitness": "95% Bootstrap Confidence Interval: (0.0%, 0.0%), Median: 0.0%",
        "generation": 4,
        "api_calls": 2,
        "structure_label": "Multi-Agent Reasoning"
    },
    {
        "thought": "**Insights:**\nTo enhance the architecture, I propose a single call that both gathers expert opinions and critiques them in a unified process. This reduces the number of API calls while maintaining diverse inputs and critical evaluation. \n**Overall Idea:**\nBy merging the initial response gathering and critique phases into one, we can optimize the reasoning process. The model will gather answers from experts while including a self-critique mechanism in the prompt, allowing experts to articulate their thoughts and identify errors in a single step. \n**Implementation:**\n1. Initiate a prompt that asks expert agents to provide answers as well as critique their own responses. \n2. Process the feedback in the same response to determine the most valid answer based on the critique.  \n3. Return the final answer based on the aggregated expert opinions and critiques, ensuring it is both accurate and concise.",
        "name": "Unified Expert Aggregation with Self-Critique",
        "code": "def forward(self, taskInfo):\n    # Instruction for expert roles to provide answers and critique their own responses\n    instruction = 'As an expert in your field, please solve the task step by step, then critique your answer, identifying any potential errors or areas for improvement.'\n    \n    expert_roles = ['Math Professor', 'Grade School Teacher', 'Math Enthusiast']\n    combined_prompts = []\n    for role in expert_roles:\n        combined_prompts.append(f'Role: {role}\\nTask: {taskInfo.content}\\n{instruction}')\n\n    # Construct single prompt containing all expert roles\n    full_prompt = '\\n\\n'.join(combined_prompts)\n\n    # Make a single API call to process all experts in one go\n    response = LLMAgentBase(['thinking', 'answer', 'feedback'], 'Unified Expert Aggregator')(full_prompt, 'Provide clear answers and self-critiques from each expert based on the task.')\n\n    # Ensure the response is valid and process it\n    if isinstance(response, list):\n        aggregated_answers = []\n        for expert_info in response:\n            if isinstance(expert_info, Info):\n                aggregated_answers.append(expert_info.content)\n            else:\n                aggregated_answers.append(str(expert_info))  # Fallback in case it is not an Info object\n\n        # Implement consensus through aggregation by checking for overlapping content\n        answer_counts = {}\n        for answer in aggregated_answers:\n            answer_counts[answer] = answer_counts.get(answer, 0) + 1\n\n        # Select the most common answer\n        final_answer = max(answer_counts, key=answer_counts.get)\n        return Info('answer', self.__repr__(), final_answer, -1)\n    else:\n        return Info('answer', self.__repr__(), 'Error: Unexpected response structure or no responses.', -1)",
        "fitness": "95% Bootstrap Confidence Interval: (0.0%, 0.0%), Median: 0.0%",
        "generation": 5,
        "api_calls": 1,
        "structure_label": "Multi-Agent Reasoning"
    }
]