{
    "Linear Chain-of-Thought,0": {
        "thought": "By encouraging the LLM to think step by step rather than directly outputting an answer, chain-of-thought reasoning enables complex problem-solving through intermediate steps. This practice improves the model's ability to handle tasks that require deeper reasoning and provides insight into its decision-making process.",
        "name": "Chain-of-Thought",
        "code": "def forward(self, taskInfo):\n    # Instruction for the Chain-of-Thought (CoT) approach\n    # It is an important practice that allows the LLM to think step by step before solving the task.\n    cot_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instantiate a new LLM agent specifically for CoT\n    # To allow LLM thinking before answering, we need to set an additional output field 'thinking'.\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Prepare the inputs for the CoT agent\n    # The input should be a list of Info, and the first one is often the taskInfo\n    cot_agent_inputs = [taskInfo]\n\n    # Get the response from the CoT agent\n    thinking, answer = cot_agent(cot_agent_inputs, cot_instruction)\n\n    # Return only the final answer\n    return answer\n",
        "api_calls": 1,
        "structure_label": "Linear Chain-of-Thought",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (7.8%, 19.5%), Median: 13.3%"
    },
    "Linear Chain-of-Thought,1": null,
    "Iterative Refinement,0": {
        "thought": "**Insights:**\nTo improve decision-making while maintaining efficiency, I propose an architecture that utilizes a single iterative agent to generate an initial answer, followed by a feedback mechanism to refine this answer based on its own reasoning. This approach captures both the initial insights and allows for improvement through self-review, all while adhering to the constraints of few API calls.\n**Overall Idea:**\nThe architecture will involve one agent that first provides an initial answer based on the task information and subsequently refines that answer based on its reasoning process, leading to a more accurate final output with minimal API calls.\n**Implementation:**\n1. Use an initial instruction for the agent to think through the problem and provide a first answer.\n2. Introduce a refining mechanism where the agent analyzes its own answer and enhances it based on the initial reasoning.\n3. Return the final refined answer as output.",
        "name": "Iterative Refinement Agent",
        "code": "def forward(self, taskInfo):\n    # Initial instruction to think step by step and solve the task\n    initial_instruction = \"Please think step by step and then solve the task.\"\n    agent = LLMAgentBase(['thinking', 'answer'], 'Refinement Agent')\n    \n    # First call to get an initial answer\n    thinking, initial_answer = agent([taskInfo], initial_instruction)\n\n    # Refine the answer based on the initial answer's reasoning\n    refined_instruction = \"Given your initial answer, improve it based on your reasoning.\"\n    refined_thinking, refined_answer = agent([taskInfo, initial_answer], refined_instruction)\n    \n    return refined_answer",
        "fitness": "95% Bootstrap Confidence Interval: (27.3%, 43.8%), Median: 35.2%",
        "generation": 5,
        "api_calls": 2,
        "structure_label": "Iterative Refinement"
    },
    "Iterative Refinement,1": {
        "thought": "To enhance its performance, an LLM can iteratively improve its answer based on feedback. By reflecting on its previous attempts and incorporating feedback, the model can refine its reasoning and provide a more accurate solution.",
        "name": "Self-Refine (Reflexion)",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    cot_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for reflecting on previous attempts and feedback to improve\n    cot_reflect_instruction = \"Given previous attempts and feedback, carefully consider where you could go wrong in your latest attempt. Using insights from previous attempts, try to solve the task better.\"\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Instruction for providing feedback and correcting the answer\n    critic_instruction = \"Please review the answer above and criticize on where might be wrong. If you are absolutely sure it is correct, output 'True' in 'correct'.\"\n    critic_agent = LLMAgentBase(['feedback', 'correct'], 'Critic Agent')\n    \n    N_max = 5 # Maximum number of attempts\n\n    # Initial attempt\n    cot_inputs = [taskInfo]\n    thinking, answer = cot_agent(cot_inputs, cot_initial_instruction, 0)\n\n    for i in range(N_max):\n        # Get feedback and correct status from the critic\n        feedback, correct = critic_agent([taskInfo, thinking, answer], critic_instruction, i)\n        if correct.content == 'True':\n            break\n            \n        # Add feedback to the inputs for the next iteration\n        cot_inputs.extend([thinking, answer, feedback])\n\n        # Reflect on previous attempts and refine the answer\n        thinking, answer = cot_agent(cot_inputs, cot_reflect_instruction, i + 1)\n    return answer\n",
        "api_calls": 10,
        "structure_label": "Iterative Refinement",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (14.1%, 28.1%), Median: 21.1%"
    },
    "Tree-of-Thought,0": null,
    "Tree-of-Thought,1": null,
    "Decompositional Reasoning,0": null,
    "Decompositional Reasoning,1": {
        "thought": "Similar to Auto-GPT and expert prompting, we can use dynamic control flow in the design to let the agent decide what expert we should use.",
        "name": "Dynamic Assignment of Roles",
        "code": "def forward(self, taskInfo):\n        # Instruction for step-by-step reasoning\n        cot_instruction = \"Please think step by step and then solve the task.\"\n        expert_agents = [LLMAgentBase(['thinking', 'answer'], 'Expert Agent', role=role) for role in ['Math Professor', 'Grade School Teacher', 'Math Enthusiast', 'Helpful Assistant']]\n\n        # Instruction for routing the task to the appropriate expert\n        routing_instruction = \"Given the task, please choose an Expert to answer the question. Choose from: Math Professor, Grade School Teacher, Math Enthusiast.\"\n        routing_agent = LLMAgentBase(['choice'], 'Routing agent')\n\n        # Get the choice of expert to route the task\n        choice = routing_agent([taskInfo], routing_instruction)[0]\n\n        if 'professor' in choice.content.lower():\n            expert_id = 0\n        elif 'teacher' in choice.content.lower():\n            expert_id = 1\n        elif 'enthusiast' in choice.content.lower():\n            expert_id = 2\n        else:\n            expert_id = 3 # Default to helpful assistant\n\n        thinking, answer = expert_agents[expert_id]([taskInfo], cot_instruction)\n        return answer\n",
        "api_calls": 6,
        "structure_label": "Decompositional Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (7.0%, 18.8%), Median: 12.5%"
    },
    "Multi-Agent Reasoning,0": {
        "thought": "**Insights:**\nTo maximize the performance of the architecture and ensure compliance with the required number of API calls, I propose an architecture that utilizes three distinct reasoning agents, each with a unique instruction set. This design will not only enhance the variety of responses but also ensure that the total count of API calls exceeds previous designs.\n**Overall Idea:**\nThe architecture will feature three Chain-of-Thought agents, each tasked with analyzing the problem from different perspectives. Following their individual contributions, a consensus decision agent will evaluate the outputs and determine the final answer. This strategy aims to foster innovative reasoning and improve accuracy through diverse mathematical approaches.\n**Implementation:**\n1. **Instantiate Three Agents:** Create three Chain-of-Thought agents, each with tailored instructions to foster unique reasoning paths.\n2. **Collect Diverse Outputs:** Each agent will process the task independently, generating varied answers.\n3. **Consensus Decision-Making:** A final decision agent will synthesize the outputs from all three agents, evaluating their effectiveness to deliver the most accurate solution.\n4. **Ensure Sufficient API Calls:** The design will facilitate multiple API interactions while promoting diverse outputs through distinct reasoning instructions.",
        "name": "Triple Chain-of-Thought Agents",
        "code": "def forward(self, taskInfo):\n    # Instruction for Chain-of-Thought Agent 1\n    instruction1 = 'Analyze the problem by considering the relationships between numbers step by step.'\n    \n    # Instruction for Chain-of-Thought Agent 2\n    instruction2 = 'Approach the task from a geometric perspective, focusing on shapes and spatial reasoning.'\n    \n    # Instruction for Chain-of-Thought Agent 3\n    instruction3 = 'Use a logical reasoning approach to solve the problem, focusing on underlying mathematical principles.'\n    \n    # Instantiate three Chain-of-Thought Agents for unique solutions\n    cot_agent1 = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent 1')\n    cot_agent2 = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent 2')\n    cot_agent3 = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent 3')\n    \n    # Generate answers from all three agents\n    response1 = cot_agent1([taskInfo], instruction1)  # 1st API call\n    response2 = cot_agent2([taskInfo], instruction2)  # 2nd API call\n    response3 = cot_agent3([taskInfo], instruction3)  # 3rd API call\n\n    # Extracting thinking and answers from Info objects\n    thinking1, answer1 = response1[0].content, response1[1].content\n    thinking2, answer2 = response2[0].content, response2[1].content\n    thinking3, answer3 = response3[0].content, response3[1].content\n\n    # Make the final decision based on collected reasoning and answers\n    final_decision_instruction = 'Evaluate the answers from all agents and provide the most accurate solution.'\n    final_decision_agent = LLMAgentBase(['thinking', 'final_answer'], 'Final Decision Agent', temperature=0.1)  # 4th API call\n    final_response = final_decision_agent([taskInfo, answer1, answer2, answer3], final_decision_instruction)  # 5th API call\n    \n    # Return the final answer directly\n    return final_response[1].content  # Total: 5 API calls",
        "fitness": "95% Bootstrap Confidence Interval: (41.4%, 58.6%), Median: 50.0%",
        "generation": 2,
        "api_calls": 5,
        "structure_label": "Multi-Agent Reasoning"
    },
    "Multi-Agent Reasoning,1": {
        "thought": "Similar to Quality-Diversity methods, let LLM generate multiple diverse interesting solutions could help. By encouraging the model to explore different reasoning paths, we can increase the chances of finding the best solution.",
        "name": "Quality-Diversity",
        "code": "def forward(self, taskInfo):\n    # Instruction for initial reasoning\n    cot_initial_instruction = \"Please think step by step and then solve the task.\"\n\n    # Instruction for giving diverse answers\n    qd_instruction = \"Given previous attempts, try to come up with another interesting way to solve the task.\"\n    cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n\n    # Instruction for final decision-making based on collected reasoning and answers\n    final_decision_instruction = \"Given all the above solutions, reason over them carefully and provide a final answer.\"\n    final_decision_agent = LLMAgentBase(['thinking', 'answer'], 'Final Decision Agent', temperature=0.1)\n    \n    N_max = 3 # Maximum number of attempts\n\n    # Initial attempt\n    cot_inputs = [taskInfo]\n    possible_answers = []\n    thinking, answer = cot_agent(cot_inputs, cot_initial_instruction, 0)\n\n    # Add the answer to the list of possible answers\n    possible_answers.extend([thinking, answer])\n\n    for i in range(N_max):\n        # Reflect on previous attempts and generate another interesting answer\n        cot_inputs.extend([thinking, answer])\n\n        # Generate another interesting answer\n        thinking, answer = cot_agent(cot_inputs, qd_instruction, i + 1)\n        possible_answers.extend([thinking, answer])\n\n    # Make the final decision based on all generated answers\n    thinking, answer = final_decision_agent([taskInfo] + possible_answers, final_decision_instruction)\n    return answer\n",
        "api_calls": 8,
        "structure_label": "Multi-Agent Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (53.9%, 71.1%), Median: 62.5%"
    },
    "Abstraction to Principles Reasoning,0": {
        "thought": "Let LLM first think about the principles involved in solving this task which could be helpful. By understanding the underlying principles, the model can better reason through the problem and provide a more accurate solution.",
        "name": "Step-back Abstraction",
        "code": "def forward(self, taskInfo):\n        # Instruction for understanding the principles involved in the task\n        principle_instruction = \"What are the physics, chemistry or biology principles and concepts involved in solving this task? First think step by step. Then list all involved principles and explain them.\"\n        \n        # Instruction for solving the task based on the principles\n        cot_instruction = \"Given the question and the involved principle behind the question, think step by step and then solve the task.\"\n        \n        # Instantiate LLM agents\n        principle_agent = LLMAgentBase(['thinking', 'principle'], 'Principle Agent')\n        cot_agent = LLMAgentBase(['thinking', 'answer'], 'Chain-of-Thought Agent')\n        \n        # Get the principles involved in the task\n        thinking, principle = principle_agent([taskInfo], principle_instruction)\n\n        # Use the principles to solve the task\n        thinking, answer = cot_agent([taskInfo, thinking, principle], cot_instruction)\n        return answer\n",
        "api_calls": 4,
        "structure_label": "Abstraction to Principles Reasoning",
        "generation": "initial",
        "fitness": "95% Bootstrap Confidence Interval: (20.3%, 35.9%), Median: 28.1%"
    },
    "Abstraction to Principles Reasoning,1": null
}